<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git &amp; Github on TLDR Dev Notes</title>
    <link>/git-github/</link>
    <description>Recent content in Git &amp; Github on TLDR Dev Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>TOML &amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Sun, 21 May 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/git-github/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Common Git/Github Errors</title>
      <link>/git-github/common-git-github-errors/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/git-github/common-git-github-errors/</guid>
      <description>fatal: refusing to merge unrelated histories $ git pull origin master From github.com:aamnah/myproject.com * branch master -&amp;gt; FETCH_HEAD fatal: refusing to merge unrelated histories  Newly created Guthub repo, has only a .gitignore file that the local repo doesn&amp;rsquo;t. can&amp;rsquo;t push without pulling first.
Solution: You can use --allow-unrelated-histories to force the merge to happen.
source</description>
    </item>
    
    <item>
      <title>Rebasing vs. Merging</title>
      <link>/git-github/git-rebase-vs-merge/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/git-github/git-rebase-vs-merge/</guid>
      <description> Cheatsheet
Rebasing vs. Merging Merging combine branches, you go to different paths and join back in the main road. Rebasing adds branches on top of other branches. You go to a different path, and then come back and add the whole path on top of the main road.
Rebasing is neat, but you kinda lose the original commit authors.
Tools  Git Kraken - Mac, Windows, Linux Smart Git - Mac, Windows, Linxu  Links  YouTube: Git Tutorial: Rebasing &amp;amp; Merging  </description>
    </item>
    
    <item>
      <title>Getting started with Github Pages</title>
      <link>/git-github/getting-started-github-pages/</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>/git-github/getting-started-github-pages/</guid>
      <description>There are two kinds of Github Pages. User pages and project pages.
Steps for Creating Project pages  Create a branch called gh-pages
 Add your site to it Push to github  Create a branch called gh-pages git checkout -b gh-pages  You&amp;rsquo;ll be doing this locally on your computer. -b is for Branch. gh-pages is the name of the branch. It MUST be gh-pages. Any other name and Github is going to ignore it.</description>
    </item>
    
    <item>
      <title>What to .gitignore</title>
      <link>/git-github/files-gitignore/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>/git-github/files-gitignore/</guid>
      <description> Cache folders (.DS_Store, sass_cache) Modules/Packages folders generated by dependency managers (node_modules, vendor) Any folders that can be easily regenrated on the other end by a config file Configuration files. Anything that contains private usernames and passwords  Following are common files added to my .gitignore
# Mac OS X .DS_Store */.DS_Store # Opencart image/cache system/cache # OC 1x system/storage/cache # OC 2x vqmod/vqcache # Webhost cgi-bin # Dependency and Package folders node_modules vendor # Sass sass_cache  </description>
    </item>
    
    <item>
      <title>Git Basics</title>
      <link>/git-github/git-basics/</link>
      <pubDate>Wed, 21 May 2014 16:17:32 +0500</pubDate>
      
      <guid>/git-github/git-basics/</guid>
      <description>Configuration configure username
git config --global user.name &amp;quot;Your Name&amp;quot;  configure email
git config --global user.email &amp;quot;me@mydomain.com&amp;quot;  check confgiuration
git config --list  Repositories Start a git repo
git init my_new-repo  Start a git repo in existing folder, cd to that folder and..
git init  Removing the repo = just remove the .git folder, it&amp;rsquo;s the brains
rm -r my_project/.git  where my_project is the project folder you are removing git from.</description>
    </item>
    
  </channel>
</rss>