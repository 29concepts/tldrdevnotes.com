<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSS &amp; Sass on TLDR Dev Notes</title>
    <link>localhost/hugo-tldr/css-sass/</link>
    <description>Recent content in CSS &amp; Sass on TLDR Dev Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>TOML &amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Wed, 18 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="localhost/hugo-tldr/css-sass/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Notes on CSS Grid</title>
      <link>localhost/hugo-tldr/css-sass/css_grid-notes/</link>
      <pubDate>Wed, 18 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/css_grid-notes/</guid>
      <description>display: grid; grid-template-columns: repeat(12, 1fr); /* repeat this pattern 12 times, i.e. 12 columns of 1fr width */ grid-gap: 1rem;   grid-gap has been renamed to gap in the spec  grid-template-columns: 10% 2fr 3fr; /* first column is 10%, second and third are 2fr and 3fr of the remaining width */  .col-4 { grid-column: span 4; /* span 4 columns of the grid */ }  You can set defaults for when your grid overflows, i.</description>
    </item>
    
    <item>
      <title>SVG Sprites</title>
      <link>localhost/hugo-tldr/css-sass/svg-sprites/</link>
      <pubDate>Wed, 18 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/svg-sprites/</guid>
      <description>&amp;lt;symbol&amp;gt; allows you to embed the SVG code as well as have it&amp;rsquo;s own viewBox attribute Elements defined inside the &amp;lt;symbol&amp;gt; element can only be rendered to the browser when referenced by the &amp;lt;use&amp;gt; element. Each symbol will have it&amp;rsquo;s own id which we will use to reference it Each symbol will have it&amp;rsquo;s own viewBox property too. The first two values will almost always be &amp;ldquo;0 0&amp;rdquo;, the second two will be equal to the size of the icon you have exported You can also use viewBox in &amp;lt;use&amp;gt; instead of sprites.</description>
    </item>
    
    <item>
      <title>Quick intro to CSS Animations</title>
      <link>localhost/hugo-tldr/css-sass/css_animations/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/css_animations/</guid>
      <description>animation-name: scaleUp; /* the name of the corresponding @keyframes rule */ animation-duration: 2s; /* time to complete one animation cycle */ animation-delay: 1s; /* when to start */ animation-timing-function: 2s; /* defines acceleration curves */ animation-iteration-count: 6; /* repeat animation this many times, default is 1, infinite is an option */ animation-direction: normal; /* should the animation play forwards, backwards or alternate back and forth? this will change which keyframe plays first and which plays last */ animation-play-state: normal; /* pause and resume the animation - running, paused */ animation-fill-mode: none; /* choose to set CSS property values based on keyframes before/after an animation is played.</description>
    </item>
    
    <item>
      <title>Getting started with CSS Flexbox</title>
      <link>localhost/hugo-tldr/css-sass/css_flexbox/</link>
      <pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/css_flexbox/</guid>
      <description>tl;dr  The widths and heights of flexboxes vary to adapt to the display space The display order of flex boxes is independant of their order in the source code Margins of adjacent flex items do not collapse Main axis = vertical = columns Cross axis = horizontal = rows All flex items on a line are equal height by default (the default for axis properties like justify-content, align-content and align-items etc.</description>
    </item>
    
    <item>
      <title>CSS Layout Models</title>
      <link>localhost/hugo-tldr/css-sass/css-positioning-layout/</link>
      <pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/css-positioning-layout/</guid>
      <description>The Box Model treats every element as if it were in a box. You can position these boxes on the page
 A float (also referred to as a floated or floating box) is a box that is taken out of normal flow and moved to the far left or right of the containing box, yet still allows content to flow alongside it (although you can prevent text from flowing alongside it using the clear property).</description>
    </item>
    
    <item>
      <title>CSS Margins Collapsing and how to deal with them</title>
      <link>localhost/hugo-tldr/css-sass/css_collapsing-margins/</link>
      <pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/css_collapsing-margins/</guid>
      <description>tl;dr  Vertical margins between adjacent boxes (elements) collapse. The bigger value of the two margins is applied   Collapsing margins happen when two vertical margins come in contact with one another. If one margin is greater than the other, then that margin overrides the other, leaving one margin.
 .
 The top and bottom margins of blocks are sometimes combined (collapsed) into a single margin whose size is the largest of the individual margins (or just one of them, if they are equal), a behavior known as margin collapsing.</description>
    </item>
    
    <item>
      <title>A to  Z Sass in 30 minutes</title>
      <link>localhost/hugo-tldr/css-sass/sass-atoz_sass-in-30-minutes/</link>
      <pubDate>Fri, 20 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/sass-atoz_sass-in-30-minutes/</guid>
      <description>Ampersand &amp;amp;  &amp;amp; means the parent selector It is good for nested code and for BEM and SUIT naming methodologies for writing modular code Makes the code compact and easier to read without scrolling up and down the file  // Example SUIT-css style component .MyComponent { &amp;amp;.is-animating {} &amp;amp;--modifier {} &amp;amp;-part {} &amp;amp;-anotherPart {} }  // Example link states a { color: gray; &amp;amp;:hover, &amp;amp;:active { color: black; } }  // Example &#39;reverse&#39; parent selector .</description>
    </item>
    
    <item>
      <title>Hands-on with CSS Grid Layout</title>
      <link>localhost/hugo-tldr/css-sass/css_grid-examples/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/css_grid-examples/</guid>
      <description>Defining a grid is as simple as adding layout: grid to an element.  .wrapper { display: grid; }  Defining templates Rows and columns
grid-template-columns: 1fr 1fr 1fr 1fr; grid-template-rows: auto 300px;  Areas
grid-template-areas: &amp;quot;a a a a&amp;quot; &amp;quot;b c d e&amp;quot; &amp;quot;b c d e&amp;quot; &amp;quot;f f f f&amp;quot;;  or
grid-template-areas: &amp;quot;header header header header&amp;quot; &amp;quot;nav main main sidebar&amp;quot;;  Shorthand video
grid-template: auto 300px / 1fr 1fr 1fr 1fr grid-template: &amp;quot;header header header header&amp;quot; auto // this is the first row, auto (size) is default, so it&#39;s okay if you don&#39;t mention it.</description>
    </item>
    
    <item>
      <title>Introduction to CSS Grid Layout</title>
      <link>localhost/hugo-tldr/css-sass/css_grid-layout/</link>
      <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/css_grid-layout/</guid>
      <description>A true grid is two-dimensional. The two dimensions are rows and columns, and with grid layout you can control both at once. With flexbox, you choose whether to lay the items out as a row or a column, one or the other and not both.
 Why CSS Grid?  With CSS Grids you can not only hide/show things or adjust sizes or move items along one direction, you can actually change the order of HTML elements.</description>
    </item>
    
    <item>
      <title>CSS Positioning</title>
      <link>localhost/hugo-tldr/css-sass/css_positioning/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/css_positioning/</guid>
      <description>tl;dr  relative elements are positions with reference to their original position in normal flow, without affecting other elements. The offset is from it&amp;rsquo;s normal position in the document absolute elements are positioned with reference to their containing elements (or the closest positioned i.e. relative/absolute/fixed parent). The offset is from parent element. fixed elements are positioned with reference to the viewport (it&amp;rsquo;ll stay in place in the viewport when you scroll).</description>
    </item>
    
    <item>
      <title>CSS Transitions</title>
      <link>localhost/hugo-tldr/css-sass/css-transitions/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/css-transitions/</guid>
      <description> Links  Codrops: CSS Reference - Transitions  </description>
    </item>
    
    <item>
      <title>Sass - Beginner to Advanced in 30 Minutes</title>
      <link>localhost/hugo-tldr/css-sass/90-days-of-css/notes-sass-overview/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/90-days-of-css/notes-sass-overview/</guid>
      <description>node-sass npm i -D node-sass  add a script to package.json
&amp;quot;start&amp;quot;: &amp;quot;node-sass -o css scss&amp;quot;  -o is for output folder, which in our case is css.
partials  prepend files with an underscore but import them without the underscore or the file extension CSS imports create additional resource requests, and they don&amp;rsquo;t get compiled Sass imports get compiled into one file Import order matters  Partials let you compile multiple files into one and organize your code better.</description>
    </item>
    
    <item>
      <title>CSS Transitions and Transforms</title>
      <link>localhost/hugo-tldr/css-sass/css-transforms-and-transitions/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/css-transforms-and-transitions/</guid>
      <description> Transforms transform lets you modify the visual appearance (coordinate space) of css elements. Elements can be translated, rotated, scaled, and skewed
Examples Scale (resizes elements) Scale the .box by increasing it 20 times it&amp;rsquo;s original size. Value is in percentage
.box { width: 20px; height: 20px; transform: scale(20); }  Translate (moves elements) Skew Rotate center an element
/* center the element */ top: 50%; left: 50%; transform: translate(-50%, -50%);  Links  MDN: transform  </description>
    </item>
    
    <item>
      <title>CSS Style Notes</title>
      <link>localhost/hugo-tldr/css-sass/notes-css-styles/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/notes-css-styles/</guid>
      <description>Typography Responsive Typography x
Use calc and vw to your advantage. calc let&amp;rsquo;s you easily calculate values based on unknown variables like percentages and ems and vw is the width of the viewport at any given time. One viewport unit is 1% (1/100th) of the viewport size.
body { font-size: calc(14px + .3vw); }  Here 14px is going to be the smallest font size and it&amp;rsquo;s going to increase with the width of the viewport (screen).</description>
    </item>
    
    <item>
      <title>Making a site presentable in 7 lines of code</title>
      <link>localhost/hugo-tldr/css-sass/minimal-css-for-presentable-website/</link>
      <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/minimal-css-for-presentable-website/</guid>
      <description> With just 7 CSS declarations you can make a site very presentable with easy to read typography.
body { margin: 40px auto; max-width: 650px; line-height: 1.6; font-size: 18px; color: #444; padding: 0 10px } h1, h2, h3 { line-height:1.2 }  To go one step further, you can add media queries
@media print { body { max-width: none } }  Links  http://bettermotherfuckingwebsite.com/  </description>
    </item>
    
    <item>
      <title>How to create a Grid system in Sass</title>
      <link>localhost/hugo-tldr/css-sass/how-to-create-grid-sass/</link>
      <pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/how-to-create-grid-sass/</guid>
      <description>Making your own grid system is also pretty straightforward in Sass. The following example is a Sass @mixin from David Demaree’s article on A List Apart which takes one argument — $span — which will be passed into our @mixin as a variable:
$column-width: 21em; $gutter: 1.5em; @mixin grid($span) { float: left; margin-right: $gutter; margin-bottom: $gutter; width: ($column-width * $span) + ($gutter * ($span - 1)); }  And then later that mixin can be used with containers using simple @include:</description>
    </item>
    
    <item>
      <title>CSS Blend Modes</title>
      <link>localhost/hugo-tldr/css-sass/css_blend_modes/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/css_blend_modes/</guid>
      <description>CSS Blend Modes let you blend two or more layers together to create visual effects. You can use blend-modes on pretty much an HTML element including text, svg, images, and videos.
background-blend-mode Default value is normal, meaning no blending. There are 16 values for background-blend-mode including darken, lighten, multiply, overlay, screen,soft-light, color-burn and color-dodge. These blend modes are pretty much the same as what comes with Photoshop and Sketch.</description>
    </item>
    
    <item>
      <title>Sass -  Mixins vs. Extend</title>
      <link>localhost/hugo-tldr/css-sass/sass_mixins_vs_extend/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/sass_mixins_vs_extend/</guid>
      <description>source</description>
    </item>
    
    <item>
      <title>Sass Function to Auto-Convert Pixels to Ems</title>
      <link>localhost/hugo-tldr/css-sass/sass-function-convert-pixels-px-ems/</link>
      <pubDate>Sat, 17 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/sass-function-convert-pixels-px-ems/</guid>
      <description>Function Add this to your Sass (functions) file. It is recommended that you keep a separate functions.scss file and @import &#39;functions&#39;; at the top of your main/global css file. This way it keeps things organized. OR you could just add this function to the top of your main scss file.
@function pem($pixels) { @return #{$pixels/16.0}em }  Usage Using scss syntax:
@media (min-width: pem(768)) { ... }  When compiled to plain CSS and sent to the browser, we get:</description>
    </item>
    
    <item>
      <title>Debugging Sass</title>
      <link>localhost/hugo-tldr/css-sass/debug-troubleshoot-sass-issues/</link>
      <pubDate>Thu, 22 May 2014 06:08:52 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/debug-troubleshoot-sass-issues/</guid>
      <description>sass --help OR sass -h OR sass -? will give you a whole list of commands you can use and how to use them.
sass --style compressed main.css will output a compressed version of main.css in the console.
sass --style compressed main.css:main.css the file before the : is the input file and the one after is the output file.
sass --style expanded main.css:main.css converts to &amp;lsquo;expanded&amp;rsquo; style, which is nested but without the indentation.</description>
    </item>
    
    <item>
      <title>Sass: Working with Libraries</title>
      <link>localhost/hugo-tldr/css-sass/howto-sass-work-with-libraries/</link>
      <pubDate>Wed, 21 May 2014 20:13:51 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/howto-sass-work-with-libraries/</guid>
      <description>By far the most popular Sass based UI framework is Bootstrap. Another one is Foundation.
Sass libraries are more like a collection of mixins, funtcions and classes. The most common is Compass. Then there is Bourbon.
Installing Bourbon sudo gem install bourbon  Including Bourbon in a Project just include the bourbon .scss file in the main stylesheet.
@import &amp;quot;bourbon_bourbon.scss&amp;quot;;  Benefits  You can use all the new CSS3 features without having to worry about backwards compatibility as Bourbon and Compass take care of adding vendor prefixes.</description>
    </item>
    
    <item>
      <title>Import Files in Sass with `@import`</title>
      <link>localhost/hugo-tldr/css-sass/howto-sass-import-files/</link>
      <pubDate>Wed, 21 May 2014 19:51:45 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/howto-sass-import-files/</guid>
      <description>Importing files is handy when you have your css in multiple files instead of one bloated stylesheet. See Bootstrap&amp;rsquo;s Sass files for an example. Every css component gets it&amp;rsquo;s own .scss file and they all get compiled into one main stylesheet.
The usual imports in a main.scss file are something like this:
// Reset @import &amp;quot;_reset.scss&amp;quot;; // Definings @import &amp;quot;_varables.scss&amp;quot;; @import &amp;quot;_mixins.scss&amp;quot;; // Global Styles @imprt &amp;quot;_globals.scss&amp;quot;; // Page specifics @import &amp;quot;pages/_about_us.</description>
    </item>
    
    <item>
      <title>Create a Color Palette in Sass</title>
      <link>localhost/hugo-tldr/css-sass/howto-sass-create-a-color-palette/</link>
      <pubDate>Wed, 21 May 2014 19:26:53 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/howto-sass-create-a-color-palette/</guid>
      <description>$background: #f3f3f3; $text_color: #888; $link_color: #; $primary_color: mix(#ff0000, #fefefe); $secondary_color: complement($primary_color); $highlighted_text_color: darken($text_color, 30%);  Light and Dark shades Get a darker shade color: darken($text_color, 20%);  OR
color: darken(#888, 20%)  will give you a 20% darker shade of $text_color or #888. If you use a variable, it&amp;rsquo;ll change the colors dynamically, meaning the light/dark shade will vary with the base color variable used.
Get a lighter shade color: lighten($text_color, 20%);  OR</description>
    </item>
    
    <item>
      <title>How to install Compass on a Mac via Command Line</title>
      <link>localhost/hugo-tldr/css-sass/howto-sass-install-compass-on-a-mac-via-command-line/</link>
      <pubDate>Wed, 21 May 2014 15:34:28 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/css-sass/howto-sass-install-compass-on-a-mac-via-command-line/</guid>
      <description>Compass is a Ruby gem, so in order to install it you must have Ruby installed. Macs come pre-installed with Ruby.
sudo gem update --system sudo gem install compass compass --version  Notes  sudo gem update --system will make sure all gems are up to date You can use sass --version to see if you have installed or what version of Sass is it sudo gem install compass will also install Sass if it isn&amp;rsquo;t already installed compass --version will confirm the installation by telling you what version of Compass you have installed If command line scares you, you can install GUI apps for Compass, like:</description>
    </item>
    
  </channel>
</rss>