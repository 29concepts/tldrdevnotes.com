<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>How To on TLDR Dev Notes</title>
    <link>localhost/hugo-tldr/tags/how-to/</link>
    <description>Recent content in How To on TLDR Dev Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>TOML &amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Sun, 05 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="localhost/hugo-tldr/tags/how-to/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install MongoDB on MacOS</title>
      <link>localhost/hugo-tldr/databases/install-mongodb-macos/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/databases/install-mongodb-macos/</guid>
      <description>tl;dr # install Homebrew if not installed already # /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; # install brew install mongodb # add MongoDB to startup processes brew services start mongodb # create the `/data/db` directory, where mongo data will live mkdir -p /data/db # Make sure the `/data/db` directory has the right permissions sudo chown -R `id -un` /data/db # Run the mongo daemon mongod # sudo mongod # `quit()` to quit, `ctrl+c` to exit  Using MongoDB Client CLI # start mongo client mongo mongo &amp;gt; help # see a list of commands available mongo &amp;gt; show dbs # show all databases mongo &amp;gt; use foo # use/switch to a database mongo &amp;gt; show collections # show collections (like Tables in SQL dbs) in the database mongo &amp;gt; db.</description>
    </item>
    
    <item>
      <title>Opening and Writing to Files in Python</title>
      <link>localhost/hugo-tldr/python/opening_and_writing_to_files_in_python/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/python/opening_and_writing_to_files_in_python/</guid>
      <description>Our bio.txt contains
Name: Aamnah Age: 26 Location: Dubai Gender: Female  To open it in Python:
file = open(&#39;bio.txt&#39;)  The function open() can take two parameters, one is the path of the file
bio.txt (required). The other is mode (optional) which specifies the mode in which the file is opened, for example w+b. The default mode is r which means open for reading in text mode.
The w flag opens a file for writing only.</description>
    </item>
    
    <item>
      <title>OpenCart: Delete Multi-Store and Move Everything to the Default Store</title>
      <link>localhost/hugo-tldr/databases/opencart_how-to_delete_multi-store_and_move_everything_to_the_default_store/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/databases/opencart_how-to_delete_multi-store_and_move_everything_to_the_default_store/</guid>
      <description>Make a BACKUP before doing anything to the database. Be safe.
Assumptions This post assumes that
 the store_id for Default store is 0 you have only 1 multi-store you are moving things from Multi-store to Default store you want to delete Multi-Store you have products that were added to both Default and Multi-store everything means products, categories, manufacturers and information  We can&amp;rsquo;t delete a multi-store if there are orders associated with it.</description>
    </item>
    
    <item>
      <title>Database Foundations</title>
      <link>localhost/hugo-tldr/databases/database-foundations/</link>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/databases/database-foundations/</guid>
      <description>Creating Database CREATE DATABASE `shop` DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;  You can also use the keyword SCHEMA to create a database.
CREATE SCHEMA `shop`;  Once a database is cerated you can start using it with the following command
USE `shop`;  Get info about the database SHOW ENGINES  The default engine is InnoDB.
Creating Tables CREATE TABLE actors (name VARCHAR(50));  CREATE is the command telling the database what to do.</description>
    </item>
    
    <item>
      <title>Tips for Querying a MySQL Database</title>
      <link>localhost/hugo-tldr/databases/querying-selecting-showing-data-from-mysql-database-tips/</link>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/databases/querying-selecting-showing-data-from-mysql-database-tips/</guid>
      <description>Sort result ORDER based on frequency Here is a nifty way of influencing the ORDER of rows returned by a query that helps in displaying a list with frequently accessed items at the top.
An example is a name/address form where the country is a selectable list. If most of your users are from the UK and US you may want to do something like:
SELECT * FROM countries ORDER by iso_code IN (&#39;UK&#39;, &#39;US&#39;) desc  Which returns something like:</description>
    </item>
    
    <item>
      <title>Getting started with Github Pages</title>
      <link>localhost/hugo-tldr/git-github/getting-started-github-pages/</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/git-github/getting-started-github-pages/</guid>
      <description>There are two kinds of Github Pages. User pages and project pages.
Steps for Creating Project pages  Create a branch called gh-pages
 Add your site to it Push to github  Create a branch called gh-pages git checkout -b gh-pages  You&amp;rsquo;ll be doing this locally on your computer. -b is for Branch. gh-pages is the name of the branch. It MUST be gh-pages. Any other name and Github is going to ignore it.</description>
    </item>
    
    <item>
      <title>Bash script to create OCMOD and vQmod templates with a single command</title>
      <link>localhost/hugo-tldr/bash-scripting/create-ocmod-vqmod-template-opencart-bash-script/</link>
      <pubDate>Mon, 16 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/bash-scripting/create-ocmod-vqmod-template-opencart-bash-script/</guid>
      <description>OCMOD and vQmod are both modification systems for Opencart which allow you to change things without overwriting any core files. For Opencart version older than 2.x, vQmod was the king. With version 2.x Opencart launched it&amp;rsquo;s own modification system to replace the need for installing a separate extension.
The state Opencart is in right now, you&amp;rsquo;ll find yourself dealing with both vqmod and ocmod scripts. I know i do. So i have written this neat bash script which allows me to type ocmod foo to create a file called foo.</description>
    </item>
    
    <item>
      <title>OpenCart: Bulk update prices of Products</title>
      <link>localhost/hugo-tldr/databases/bulk-update-product-prices-opencart-phpmyadmin-mysql/</link>
      <pubDate>Fri, 13 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/databases/bulk-update-product-prices-opencart-phpmyadmin-mysql/</guid>
      <description>Changing the currency of an OpenCart store
 update product price update discount and special prices update order totals  MySQL Commands Multiply all prices in a column by 3.67000008
UPDATE `oc_product` SET `price` = `price` * 3.670008  Round the numbers of an entire column
UPDATE `oc_product` SET `price` = ROUND(`price`)  Select price column and create a new column ROUND(price) by rounding the value of price
SELECT `price`, ROUND(`price`) from `oc_product`  Why?</description>
    </item>
    
    <item>
      <title>How to add a WordPress Admin user via PhpMyAdmin</title>
      <link>localhost/hugo-tldr/databases/add-create-wordpress-admin-user-phpmyadmin/</link>
      <pubDate>Thu, 12 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/databases/add-create-wordpress-admin-user-phpmyadmin/</guid>
      <description>Why? Add support user for all hosting accounts that have wordpress installed, with one command via phpmyadmin and whm access.
INSERT INTO `databasename`.`wp_users` (`ID`, `user_login`, `user_pass`, `user_nicename`, `user_email`, `user_url`, `user_registered`, `user_activation_key`, `user_status`, `display_name`) VALUES (&#39;9191919&#39;, &#39;username&#39;, MD5(&#39;password&#39;), &#39;Name&#39;, &#39;test@yourdomain.com&#39;, &#39;http://hostmarkaz.com/&#39;, &#39;2015-02-11 00:00:00&#39;, &#39;&#39;, &#39;0&#39;, &#39;Your Name&#39;); INSERT INTO `databasename`.`wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES (NULL, &#39;9191919&#39;, &#39;wp_capabilities&#39;, &#39;a:1:{s:13:&amp;quot;administrator&amp;quot;;s:1:&amp;quot;1&amp;quot;;}&#39;); INSERT INTO `databasename`.`wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES (NULL, &#39;9191919&#39;, &#39;wp_user_level&#39;, &#39;10&#39;);  Fields to change  Database = databasename ID = 9191919 user_login = username user_pass = password user_nicename = Name user_email = test@yourdomain.</description>
    </item>
    
    <item>
      <title>How to include files in HTML</title>
      <link>localhost/hugo-tldr/webdev/include-files-in-html/</link>
      <pubDate>Sat, 07 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/webdev/include-files-in-html/</guid>
      <description>via JavaScript a.html
&amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Put here your HTML content before insertion of b.js.&amp;lt;/h1&amp;gt; ... &amp;lt;script src=&amp;quot;b.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; ... &amp;lt;p&amp;gt;And here whatever content you want afterwards.&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  b.js:
document.write(&#39;\ \ &amp;lt;h1&amp;gt;Add your HTML code here&amp;lt;/h1&amp;gt;\ \ &amp;lt;p&amp;gt;Notice however, that you have to escape LF&#39;s with a &#39;\&#39;, just like\ demonstrated in this code listing.\ &amp;lt;/p&amp;gt;\ \ &#39;);  JavaScript is preferred since jQuery is that jQuery.js is ~90kb in size.</description>
    </item>
    
  </channel>
</rss>