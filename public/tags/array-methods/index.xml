<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Array Methods on TLDR Dev Notes</title>
    <link>/tags/array-methods/</link>
    <description>Recent content in Array Methods on TLDR Dev Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>TOML &amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Thu, 19 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/array-methods/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Array.sort() - Sorting Arrays in JavaScript</title>
      <link>/javascript/array-sort/</link>
      <pubDate>Thu, 19 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/javascript/array-sort/</guid>
      <description>The method for sorting arrays is called.. sort!.
Examples Default sort
var fruit = [&#39;cherries&#39;, &#39;apples&#39;, &#39;bananas&#39;]; fruit.sort(); // [&#39;apples&#39;, &#39;bananas&#39;, &#39;cherries&#39;] var scores = [1, 10, 21, 2]; scores.sort(); // [1, 10, 2, 21] // Watch out that 10 comes before 2, // because &#39;10&#39; comes before &#39;2&#39; in Unicode code point order. var things = [&#39;word&#39;, &#39;Word&#39;, &#39;1 Word&#39;, &#39;2 Words&#39;]; things.sort(); // [&#39;1 Word&#39;, &#39;2 Words&#39;, &#39;Word&#39;, &#39;word&#39;] // In Unicode, numbers come before upper case letters, // which come before lower case letters.</description>
    </item>
    
    <item>
      <title>Array.concat</title>
      <link>/javascript/array-concat/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/javascript/array-concat/</guid>
      <description>.concat() .concat() takes an existing array, adds a value to it and returns a new array
it takes a copy of the original array, adds to it any parameters passed and returns a new array.
.concat() is the equivalent of .push(), but superior, because it does not edit the data in place, it gives a new array as a result.
 you can pass in multiple values you can pass in different types you can pass in other arrays as params.</description>
    </item>
    
    <item>
      <title>Array.every()</title>
      <link>/javascript/array-every/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/javascript/array-every/</guid>
      <description>.every() The every() method return true/false based on whether or not every element in the source array passes a certain condition or not
You&amp;rsquo;ll exit on the first failure. If the condition returns false for something, it stop processing the array there and returns.
Examples // EXAMPLE 1 const items = [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ] const result = items.every(x =&amp;gt; x &amp;lt; 10) // check every item is &amp;lt;10?</description>
    </item>
    
    <item>
      <title>Array.filter()</title>
      <link>/javascript/array-filter/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/javascript/array-filter/</guid>
      <description>.filter() gives a new array after filtering an array based on the truth/false of a condition
Examples 1. get expensive stocks Here&amp;rsquo;s an array of stocks.
let stocks = [ { symbol: &amp;quot;APL&amp;quot;, price: 693 }, { symbol: &amp;quot;HUBC&amp;quot;, price: 103 }, { symbol: &amp;quot;POL&amp;quot;, price: 413 } ]  We&amp;rsquo;ll get the expensive stocks (let&amp;rsquo;s say the ones which cost more than 150) out of it with filter()</description>
    </item>
    
    <item>
      <title>Array.forEach()</title>
      <link>/javascript/array-foreach/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/javascript/array-foreach/</guid>
      <description>.forEach() The forEach() array method accomplishes the same thing as regular for loops, but it does it asynchronously and in a simpler/easier way.
We have a stocks array, from which we just want the stock symbols.
let stocks = [ { symbol: &amp;quot;APL&amp;quot;, price: 693 }, { symbol: &amp;quot;HUBC&amp;quot;, price: 103 }, { symbol: &amp;quot;POL&amp;quot;, price: 413 } ]  Here&amp;rsquo;s how you&amp;rsquo;d do it using a regular for loop.</description>
    </item>
    
    <item>
      <title>Array.map()</title>
      <link>/javascript/array-map/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/javascript/array-map/</guid>
      <description>.map() transforms an array by performing a function on every item in the array, and returns a new array.
 async: can work on data that arrives async over time returns: A new array with each element being the result of the callback function.  We like working with map() because it works on data arriving asynchronously, unlike for loops where you can only work on synchronous data stored locally.</description>
    </item>
    
    <item>
      <title>Array.reduce()</title>
      <link>/javascript/array-reduce/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/javascript/array-reduce/</guid>
      <description>.reduce()  The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value. MDN
  The reduce() method reduces the array to a single value. The reduce() method executes a provided function for each value of the array (from left-to-right). The return value of the function is stored in an accumulator (result/total). Note: reduce() does not execute the function for array elements without values.</description>
    </item>
    
    <item>
      <title>Manipulating Arrays in JavaScript with built-in methods</title>
      <link>/javascript/js-array-methods/</link>
      <pubDate>Tue, 15 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/javascript/js-array-methods/</guid>
      <description>.map = iterate over arrays .reduce = Condense arrays .filter .sort .reverse .concat .split &amp;gt;&amp;gt; STRING method .join .slice() = slices array by taking indices .splice() = slice(), but modifies the original array .substr() .substring()  .forEach() forEach() is an async method (while normal for loops aren&amp;rsquo;t).
.map() iterates over every element of the array, creating a new array with values that have been modified by the callback function , and returns.</description>
    </item>
    
    <item>
      <title>Quick Intro to Arrays in JavaScript</title>
      <link>/javascript/js-arrays/</link>
      <pubDate>Tue, 15 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/javascript/js-arrays/</guid>
      <description>Arrays  get first item in an array: array[0]
 get last item in an array: array[array.length-1] add item to end: array.push(val) can push multiple values add item to beginning: array.unshift(val) remove item from end: array.pop() returns the last item from an array and removes it remove item from start: array.shift() returns the first item from an array and removes it Join elements in an array: .join()
 Join two Arrays: .</description>
    </item>
    
  </channel>
</rss>