<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberry Pi on TLDR Dev Notes</title>
    <link>/tags/raspberry-pi/</link>
    <description>Recent content in Raspberry Pi on TLDR Dev Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>TOML &amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Wed, 24 Aug 2016 17:07:46 +0500</lastBuildDate>
    
	<atom:link href="/tags/raspberry-pi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install/Upgrade Node.js on Raspberry Pi (Raspbian Jessie)</title>
      <link>/raspberrypi/howto-install-latest-node-js-raspberry-pi-raspbian-jessie/</link>
      <pubDate>Wed, 24 Aug 2016 17:07:46 +0500</pubDate>
      
      <guid>/raspberrypi/howto-install-latest-node-js-raspberry-pi-raspbian-jessie/</guid>
      <description>tl;dr Run this one command in Terminal:
curl raw.githubusercontent.com/aamnah/bash-scripts/master/install_nodejs.sh | bash  This will automatically run a script i wrote that takes care of removing existing Node.js stuff, downloading and installing the latest version, and cleaning up afterwards. It also confirms the Node.js version once the installation is done.
The Node.js version that comes pre-installed with Raspbian Jessie is old. If you check the version using node -v, it&amp;rsquo;ll give you v0.</description>
    </item>
    
    <item>
      <title>Change Raspberry Pi&#39;s system startup message (MOTD)</title>
      <link>/raspberrypi/change-raspberry-pi-motd-system-startup-message/</link>
      <pubDate>Thu, 04 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/raspberrypi/change-raspberry-pi-motd-system-startup-message/</guid>
      <description>MOTD = Message Of The Day
Add the following to ~/.bashrc
################################ # CUSTOM MOTD FOR RASPBERRY PI	################################ let upSeconds=&amp;quot;$(/usr/bin/cut -d. -f1 /proc/uptime)&amp;quot; let secs=$((${upSeconds}%60)) let mins=$((${upSeconds}/60%60)) let hours=$((${upSeconds}/3600%24)) let days=$((${upSeconds}/86400)) UPTIME=`printf &amp;quot;%d days, %02dh %02dm %02ds&amp;quot; &amp;quot;$days&amp;quot; &amp;quot;$hours&amp;quot; &amp;quot;$mins&amp;quot; &amp;quot;$secs&amp;quot;` # get the load averages read one five fifteen rest &amp;lt; /proc/loadavg echo &amp;quot;$(tput setaf 2) .~~. .~~. `date +&amp;quot;%A, %e %B %Y, %r&amp;quot;` &#39;. \ &#39; &#39; / .</description>
    </item>
    
    <item>
      <title>System Monitor for Raspberry Pi</title>
      <link>/raspberrypi/howto-system-monitor-for-raspberry-pi/</link>
      <pubDate>Wed, 21 May 2014 16:30:36 +0500</pubDate>
      
      <guid>/raspberrypi/howto-system-monitor-for-raspberry-pi/</guid>
      <description>RPi-Monitor is a nifty utility that monitors and displays system information about your Raspberry Pi in a nice-looking graphical interface in the browser.
It can show you how much CPU Load you have, what is the temperature of your Raspberry Pi (good to know in cases where you have overclocked the raspberry pi), Used, Free and Total Memroy (RAM), Used, Free and Total Space you have on both partitions of your SD Card, Used, Free and Total SWAP space (Virtual RAM), how long the Raspberry Pi has been running (Uptime), and general information about your Versions (Kernel, Firmware, Processor etc.</description>
    </item>
    
    <item>
      <title>Custom Raspberry Pi MOTD (Message Of The Day)</title>
      <link>/raspberrypi/howto-raspberry-pi-motd-message-of-the-day/</link>
      <pubDate>Wed, 21 May 2014 16:25:33 +0500</pubDate>
      
      <guid>/raspberrypi/howto-raspberry-pi-motd-message-of-the-day/</guid>
      <description>let upSeconds=&amp;quot;$(/usr/bin/cut -d. -f1 /proc/uptime)&amp;quot; let secs=$((${upSeconds}%60)) let mins=$((${upSeconds}/60%60)) let hours=$((${upSeconds}/3600%24)) let days=$((${upSeconds}/86400)) UPTIME=`printf &amp;quot;%d days, %02dh%02dm%02ds&amp;quot; &amp;quot;$days&amp;quot; &amp;quot;$hours&amp;quot; &amp;quot;$mins&amp;quot; &amp;quot;$secs&amp;quot;` # get the load averages read one five fifteen rest &amp;lt; /proc/loadavg echo &amp;quot;$(tput setaf 2) .~~. .~~. `date +&amp;quot;%A, %e %B %Y, %r&amp;quot;` &#39;. \ &#39; &#39; / .&#39; `uname -srmo`$(tput setaf 1) .~ .~~~..~. : .~.&#39;~&#39;.~. : Uptime.............: ${UPTIME} ~ ( ) ( ) ~ Memory.............: `cat /proc/meminfo | grep MemFree | awk {&#39;print $2&#39;}`kB (Free) / `cat /proc/meminfo | grep MemTotal | awk {&#39;print $2&#39;}`kB (Total) ( : &#39;~&#39;.</description>
    </item>
    
  </channel>
</rss>