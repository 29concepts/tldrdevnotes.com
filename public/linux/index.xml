<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on TLDR Dev Notes</title>
    <link>localhost/hugo-tldr/linux/</link>
    <description>Recent content in Linux on TLDR Dev Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>TOML &amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Thu, 31 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="localhost/hugo-tldr/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Networking Intro</title>
      <link>localhost/hugo-tldr/linux/linux-networking-basics/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/linux-networking-basics/</guid>
      <description>https://www.youtube.com/watch?v=hfUtHodJdWs
 cat /etc/services  TCP and UDP  TCP is reliable, resends the message if it fails UDP is unreliable  Ports and Permissions  Systems can only listen to ports below 1024 as root (i.e. they require sudo)  Servers  Often time servers are described as systems that listen to incoming connections Any computer can be a server  netcat  netcat nc allows you to setup tcp and udp connections and servers with netcat you can speak tcp directly the communication is bi-directional (the messages flow both ways)  # sudo apt install netcat nc -l 5000 # listen on port 5000 nc -lp 5000 # listen on port 5000  from another session, you can now send messages to port 5000</description>
    </item>
    
    <item>
      <title>Find, install and upgrade Linux software</title>
      <link>localhost/hugo-tldr/linux/install-upgrade-search-find-software-packages-linux/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/install-upgrade-search-find-software-packages-linux/</guid>
      <description>Update packages list: sudo apt update See packages that can be upgraded: apt list --upgradable See all packages that can be upgraded: apt list --upgradable -a Upgrade packages: apt upgrade Upgrade packages without asking me yes/no: apt upgrade -y Search for packages: apt-cache search foo OR apt search foo Get details about a specific package: apt-cache show foo OR apt show foo  apt-cache The apt-cache command can display much of the information stored in APT&amp;rsquo;s internal database.</description>
    </item>
    
    <item>
      <title>Add SSH Key to MacOS Keychain permanently</title>
      <link>localhost/hugo-tldr/linux/howto-add-ssh-key-macos-keychain-permanently/</link>
      <pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/howto-add-ssh-key-macos-keychain-permanently/</guid>
      <description>Run ssh-agent if it&amp;rsquo;s not already running
eval &amp;quot;$(ssh-agent -s)&amp;quot;  Add SSH key to ssh-agent
ssh-add -K ~/.ssh/id_rsa  where id_rsa is the actual filename of the key you&amp;rsquo;re adding. This should do it for OSX before Sierra.
MacOS Sierra Create an SSH config file
nano ~/.ssh/config  Add the following to it
Host * UseKeychain yes AddKeysToAgent yes IdentityFile ~/.ssh/id_rsa   UseKeychain yes tells SSH to look in your OSX keychain for the key passphrase.</description>
    </item>
    
    <item>
      <title>Run JNLP Files on Ubuntu</title>
      <link>localhost/hugo-tldr/linux/run-jnlp-files/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/run-jnlp-files/</guid>
      <description>sudo apt install icedtea-netx icedtea-plugin -y  icedtea-netx requires openjdk-8-jre and openjdk-8-jre-headless as dependencies so it&amp;rsquo;ll install JRE (Java Runtime Environment) for you as well if you don&amp;rsquo;t have that already.
 JNLP is Java Network Launching Protocol icdeatea-netx is Netx implementation of JNLP icedtea-plugin is web browser plugin to execute Java applets  </description>
    </item>
    
    <item>
      <title>Setting up shared network between Ubuntu and Mac using Samba</title>
      <link>localhost/hugo-tldr/linux/samba/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/samba/</guid>
      <description>Ubuntu 16.04 LTS
Set a password for your user in Samba sudo smbpasswd -a &amp;lt;username&amp;gt;  Share a folder Right click on folder &amp;gt; Properties &amp;gt; Share this folder
Now on Mac, Cmd+K, enter smb://yourIPwhatever, enter your username and password, and mount any of the folders you shared. You can share whole partitions or drives if you want.
That&amp;rsquo;s it.</description>
    </item>
    
    <item>
      <title>Getting WiFi details in Linux</title>
      <link>localhost/hugo-tldr/linux/wifi-linux-commands/</link>
      <pubDate>Thu, 15 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/wifi-linux-commands/</guid>
      <description> put wireless card in monitor mode sudo iwconfig wlan0 mode monitor &amp;amp;&amp;amp; iwconfig  via airmon
airmon-ng start wlan0  wlan0mon here is your wifi in monitor mode. To disable, run airmon-ng stop wlan0mon
get wifi details (BSSID)  iwlist scan wash -i wlan0mon --ignore-fcs airodump-ng wlan0mon  get available networks iwlist scanning  or
airodump-ng wlan0  put wifi card in monitor mode airmon-ng start wlan0  </description>
    </item>
    
    <item>
      <title>Image Optimization on a Linux server</title>
      <link>localhost/hugo-tldr/linux/image-optimzation-linux-jpegoptim/</link>
      <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/image-optimzation-linux-jpegoptim/</guid>
      <description>jpegoptim You can do a test run with the -n aka --noaction flag. It will print results without taking any action
jpegoptim -n img/  opencart directories with images  image/catalog/ catalog/view/  #!/bin/bash # optimize-images.sh install() { # Install tools if not already installed sudo apt-get install jpegoptim optipng } optimize_jpeg() { # jpegoptim -pqt --all-progressive *.jpeg # -p, --preserve, Preserve file modification times. # -q, --quiet, Quiet mode.</description>
    </item>
    
    <item>
      <title>How do you disable certain package updates using APT?</title>
      <link>localhost/hugo-tldr/linux/disable-update-packages-apt-dpkg/</link>
      <pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/disable-update-packages-apt-dpkg/</guid>
      <description> How do you disable, lock or blacklist certain package updates using apt tool in debian and ubuntu distributions.
To hold a package
sudo apt-mark hold apache2  To unhold a package
sudo apt-mark unhold apache2  Links  Tecmint: How to Disable/Lock or Blacklist Package Updates using Apt Tool  </description>
    </item>
    
    <item>
      <title>[modprobe, lsmod, insmod, rmmod] List, Add, Remove Kernel Modules</title>
      <link>localhost/hugo-tldr/linux/modprobe-lsmod-insmod-rmmod-list-add-remove-kernel-modules/</link>
      <pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/modprobe-lsmod-insmod-rmmod-list-add-remove-kernel-modules/</guid>
      <description>Building on previous lessons in this section, we will learn how to probe our kernel with the appropriate device driver and determine whether it is loaded and functioning as expected. We will also discuss how we can use the configuration of modprobe to blacklist or prevent some device drivers from loading even if the hardware is present on our system as well as why we might need to do that.</description>
    </item>
    
    <item>
      <title>Linux Disk File Systems (ext2, ext3, Reiser, ext4)</title>
      <link>localhost/hugo-tldr/linux/linux-disk-file-systems/</link>
      <pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/linux-disk-file-systems/</guid>
      <description>ext2 2nd Extended File System. It was originally introduced back in 1993 and ext2 stores data in the standard hierarchial fashion used by most other file systems.
Data is stored in files, files are stored in directories, and a directory can simply contain either files or other directories.
Max file size is 2TB. An ext2 volume can be upto 4TB. File names can be upto 255 characters long and ext2 supports Linux filesystem users, groups and permissions.</description>
    </item>
    
    <item>
      <title>User IDs</title>
      <link>localhost/hugo-tldr/linux/user-id/</link>
      <pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/user-id/</guid>
      <description>Process data and Ownership data in Linux use UIDs exclusively.
This can create diffculties if a user is deleted while he still owns files in the filesystem. His UID can perhaps be assigned to a different user, and that user will inherit the previous UID owners files.
There is no technical problem with assigning the same numerical UID to different usernames but these users will have equal access to the files owned by that numeric UID.</description>
    </item>
    
    <item>
      <title>[Bash] Customizing the Bash Prompt</title>
      <link>localhost/hugo-tldr/linux/bash-customize-prompt-ps1/</link>
      <pubDate>Sun, 22 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/bash-customize-prompt-ps1/</guid>
      <description>Customizing your terminal PS1=&amp;quot;[\u @ \h] \w &amp;gt; &amp;quot;  in the bash profile will output this:
[aamnah @ Serenity] ~/Sandbox/aamnah.com &amp;gt;   \u is your username which in my case is aamnah; \h is the hostname (the name of your machine) which is Serenity \w is the working directory which in my case is ~/Sandbox/aamnah.com  You can add or remove variables to customize what it shows in the terminal.</description>
    </item>
    
    <item>
      <title>[Bash] Bash PATH Environment Variable</title>
      <link>localhost/hugo-tldr/linux/bash-path-envirnoment-variable/</link>
      <pubDate>Fri, 20 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/bash-path-envirnoment-variable/</guid>
      <description>~ $ echo $PATH /Library/Frameworks/Python.framework/Versions/3.4/bin:/usr/local/sbin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/aamnah/Dropbox/todo ~ $ cat /etc/paths /usr/local/bin /usr/bin /bin /usr/sbin /sbin PATH=/usr/local/bin:$PATH # prepend a path to your current $PATH  Ubuntu The following command adds (appends) a path to your current path:
export PATH=$PATH:/my/custom/path  If you want your setup to execute this command every time, there are a number of places where you can put it. When you login, the following scripts will be executed in this order:</description>
    </item>
    
    <item>
      <title>[Bash] Reload Bash Shell without quitting</title>
      <link>localhost/hugo-tldr/linux/bash-reload-shell-without-quitting/</link>
      <pubDate>Fri, 20 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/bash-reload-shell-without-quitting/</guid>
      <description>You just have to enter the command:
source ~/.bashrc  or you can use the shorter version of the command:
. ~/.bashrc  or you could use;
exec bash  does the same thing. (and easier to remember, at least for me)
exec command replaces the shell with given program, in our example, it replaces our shell with bash (with the updated configuration files)
Links  StackOverflow: How do I reload .</description>
    </item>
    
    <item>
      <title>SSH Keys</title>
      <link>localhost/hugo-tldr/linux/ssh-keys/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/ssh-keys/</guid>
      <description>Generate a key pair locally Give the public key to the remote server Keep the private key yourself  Generate key ssh-keygen -t rsa  Copy .pub file to remote scp id_rsa.pub user@remoteserver:location  On linux you can do
ssh-copy-id user@123.456.789.123  Permissions The remote server doesn&amp;rsquo;t like the authorizated_keys file having too many permissions. For better security, change the authorizated_keys file to 600 and the ssh folder to 700.</description>
    </item>
    
    <item>
      <title>SSH Tunneling / Port Forwarding</title>
      <link>localhost/hugo-tldr/linux/ssh-tunnel-port-forward/</link>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/ssh-tunnel-port-forward/</guid>
      <description>ssh -f -L 2222:54.86.218.65  ssh -f -L 2222:vortex.myserver.com:22 localhost -N   -f force -L local -N don&amp;rsquo;t execute any commands at remote host 2222 is local port vortex.myserver.com is remote server 22 is remote port localhost is the system we&amp;rsquo;re creating an alias for  It looks like you have connected to yourself, but what you have done is you&amp;rsquo;ve tunneled your connection on the 2222 local port. Now you have a gateway to a remote network.</description>
    </item>
    
    <item>
      <title>FHS, File System Architecture and Directory Structure</title>
      <link>localhost/hugo-tldr/linux/fhs-linux-file-system/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/fhs-linux-file-system/</guid>
      <description>Filesystem Hierarchy Standard  FHS is the standard method of laying out the directory structure in Linux distributions, so that the contents follow a standard layout. That you can always depend upon certain types of files being in certain types of directories, and that they are generally consistent accross distributions.
 Some systems may deviate from FHS in some areas. The current FHS is v2.3, was actually announced Jan 29th, 2004.</description>
    </item>
    
    <item>
      <title>Configuring WIFI via Command Line</title>
      <link>localhost/hugo-tldr/linux/configuring-wifi-via-command-line/</link>
      <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/configuring-wifi-via-command-line/</guid>
      <description>The RaspberryPi Wireless WiFi Dongle Configuration guide by Farnell is THE BEST i’ve found so far.
To check if your wifi dongle is recognized ifconfig  if you see wlan0, it confirms that raspberry pi has detected your wifi adaptor.
To scan for wifi networks sudo iwlist wlan0 scan  Edit the wpa_supplicant.conf file sudo nano /etc/wpa_supplicant/wpa_supplicant.conf  Add the following with your network details at the end of the file, below update_config=1.</description>
    </item>
    
    <item>
      <title>Finding Files in Linux</title>
      <link>localhost/hugo-tldr/linux/finding-files-in-linux/</link>
      <pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/finding-files-in-linux/</guid>
      <description>Locate Check if locate is installed which locate  If it is installed, it&amp;rsquo;ll give you the path /usr/bin/locate
Install Locate yum install locate  OR
apt-get install locate  Update Database The locate command uses a database of file names and locations. That database is updated frequently via a system cron job.
sudo updatedb  Find Find is verstile and powerful. We can search files based of the permissions a file has.</description>
    </item>
    
    <item>
      <title>Vi and Vim</title>
      <link>localhost/hugo-tldr/linux/vi-vim-editor/</link>
      <pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/vi-vim-editor/</guid>
      <description>Vi Importance of Vi
Usually the text editor we can throw on a boot disk. It&amp;rsquo;s very light weight, very small in terms of memory size.
You can actually make command line arguments from within Vi, like cerating a directory.
Vi vs Vim Vim is the improved version of Vi. In most distributions Vi has been replaced by Vim. Vim is backwards-compatible with Vi.
Modes:
 i insert mode ex ex mode : command mode  Changing modes = esc</description>
    </item>
    
    <item>
      <title>How to install Node.js on CentOS/cPanel</title>
      <link>localhost/hugo-tldr/linux/install-nodejs-centos-cpanel/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/install-nodejs-centos-cpanel/</guid>
      <description>Run as root on RHEL, CentOS or Fedora:
curl -sL https://rpm.nodesource.com/setup | bash -  Then install, as root:
yum install -y nodejs  The -y flag will automatically answer &amp;ldquo;yes&amp;rdquo; to every confirmation question, so leave it out if you want to be able to say no to something.
Optional: install build tools
To compile and install native addons from npm you may also need to install build tools:</description>
    </item>
    
    <item>
      <title>Yum Transaction Check Errors &amp; Dependencies/Package Conflicts</title>
      <link>localhost/hugo-tldr/linux/yum-transaction-check-error-package-conflict/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/yum-transaction-check-error-package-conflict/</guid>
      <description>Transaction Check Error: file /etc/pki/tls/certs/ca-bundle.crt from install of openssl-0.9.8e-32.el5_11.x86_64 conflicts with file from package openssl-0.9.8e-26.el5_9.1.i686 file /usr/share/man/man1/ca.1ssl.gz from install of openssl-0.9.8e-32.el5_11.x86_64 conflicts with file from package openssl-0.9.8e-26.el5_9.1.i686 file /usr/share/man/man1/req.1ssl.gz from install of openssl-0.9.8e-32.el5_11.x86_64 conflicts with file from package openssl-0.9.8e-26.el5_9.1.i686 file /usr/share/man/man1/x509.1ssl.gz from install of openssl-0.9.8e-32.el5_11.x86_64 conflicts with file from package openssl-0.9.8e-26.el5_9.1.i686  This can happen if:
 package architecture is different (32-bit vs 64-bit) package source/repo is different you have a newer package installed while the repo you are trying to &amp;lsquo;update&amp;rsquo; from has an older version package already installed is 32-bit but 32-bit packages are excluded in /etc/yum.</description>
    </item>
    
    <item>
      <title>How to Install Git on CentOS</title>
      <link>localhost/hugo-tldr/linux/2015-01-18-howto-install-git-centos-6-7/</link>
      <pubDate>Sun, 18 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/2015-01-18-howto-install-git-centos-6-7/</guid>
      <description>The Easy Way sudo yum install git  git --version to make sure it&amp;rsquo;s installed.
Compiling from Source Make sure you have sudo access.
Install Compilation tools sudo yum groupinstall &amp;quot;Development Tools&amp;quot;  Instll Dependencies CentOS 6.x
sudo yum install zlib-devel perl-ExtUtils-MakeMaker asciidoc xmlto openssl-devel  CentOS 7.x
sudo yum install gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel  Fetch source files wget https://github.com/git/git/archive/v2.2.2.tar.gz -O git.tar.gz  Check Github Release page for the latest stable version.</description>
    </item>
    
    <item>
      <title>Linux - Basic User Management</title>
      <link>localhost/hugo-tldr/linux/linux_basic_user__management/</link>
      <pubDate>Sun, 31 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/linux_basic_user__management/</guid>
      <description>Cheatsheet    command meaning     whoami show which user is logged in   passwd change password of current user   passwd jane change Jane&amp;rsquo;s password   su become superuser / change user to root   su jane change user to jane   sudo superuser do = do it as a superuser   adduser james add a user named &amp;lsquo;james&amp;rsquo;   deluser james delete the user &amp;lsquo;james&amp;rsquo;   passwd -l jane lock jane&amp;rsquo;s password   passwd &amp;ndash;lock jane lock jane&amp;rsquo;s password    whoami shows which user is logged in</description>
    </item>
    
    <item>
      <title>Coloring the Mac Terminal</title>
      <link>localhost/hugo-tldr/linux/mac-terminal-colors-prompt/</link>
      <pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/mac-terminal-colors-prompt/</guid>
      <description>Adding colors to ls and tree Enabling Colors Edit ~/.bash_profile or ~/.profile and add the following two lines:
export CLICOLOR=1 export LSCOLORS=ExFxCxDxBxegedabagacad  you can use this if you are using a black background:
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx  LSCOLORS=&amp;quot;ExGxBxDxCxEgEdxbxgxcxd&amp;quot; will emulate the default colouring on the linux ls command.
Making it permanent You can add
alias ls=&#39;ls -Gp&#39; alias tree=&amp;quot;tree -C&amp;quot;  to your ~/.bash_profile to ALWAYS get colored ls and tree output.</description>
    </item>
    
    <item>
      <title>Command line color settings (GNU)</title>
      <link>localhost/hugo-tldr/linux/command-line-color-settings-gnu/</link>
      <pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/command-line-color-settings-gnu/</guid>
      <description> Coloring the list and tree command outputs (GNU) Customizing Colors (GNU) The format is as follows: LS_COLORS=&amp;quot;di=01;90:ow=01;90&amp;quot;
The LS_COLORS environment variable is a colon : separated list of key=colour pairs. There are 2 types of key: file types and file extensions.
   key effect color meaning     di 01 90 color all dirs dark grey and make it bold   ow 01 90 color all other_writable (o+w) dirs dark grey and make it bold    Links:  Configuring LS_COLORS (GNU) Howto: Add custom color to directory listings COLORS-Dircolors dircolors: modify color settings globaly  </description>
    </item>
    
    <item>
      <title>Generating an SSH Key and Copying it to Remote Server</title>
      <link>localhost/hugo-tldr/linux/generate_ssh_keys_copy_remote_server/</link>
      <pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/generate_ssh_keys_copy_remote_server/</guid>
      <description>mkdir ~/.ssh &amp;amp;&amp;amp; chmod 700 ~/.ssh touch ~/.ssh/authorized_keys &amp;amp;&amp;amp; chmod 600 ~/.ssh/authorized_keys # copy key.pub to authorized_keys # nano /etc/ssh/sshd_config service ssh reload  Generate the Key (on local server) cd ~/.ssh &amp;amp;&amp;amp; ssh-keygen -t rsa  Making Sure the Remote Server Accepts SSH Keys view the server&amp;rsquo;s sshd_config file
cat /etc/ssh/sshd_config  Check the following:
RSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile ~/.ssh/authorized_keys  Making sure the .ssh folder and authorized_keys file exists on Remote server sudo mkdir ~/.</description>
    </item>
    
    <item>
      <title>Install Ruby on Ubuntu</title>
      <link>localhost/hugo-tldr/linux/2014-08-26-installing-ruby-on-ubuntu/</link>
      <pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/2014-08-26-installing-ruby-on-ubuntu/</guid>
      <description># update packages sudo apt-get update # install curl if not already there sudo apt-get install curl -y # install RVM \curl -L https://get.rvm.io | bash -s stable # load RVM source ~/.rvm/scripts/rvm # install RVM dependencies rvm requirements # install ruby rvm install ruby # use default ruby version (latest) rvm use ruby --default # install rubygems rvm rubygems current # install Rails gem install rails  notes  the setup seems to be user specific  issues  rvm requirements needs to be run as root.</description>
    </item>
    
    <item>
      <title>Linux Directory Structure</title>
      <link>localhost/hugo-tldr/linux/intro-linux-directory-structure/</link>
      <pubDate>Thu, 17 Jul 2014 23:04:19 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/linux/intro-linux-directory-structure/</guid>
      <description>Home ~ ~ represents the home directory of the user. ~ is the same as /username. All user specific files are saved here and the user has permission to write files by default in the home folder. Files in a user&amp;rsquo;s home directory can not be listed or viewed by other users.
Root / / is the root directory. Do not confuse it with /root. While / represents the root directory of the system, /root is the home directory for the root user.</description>
    </item>
    
    <item>
      <title>Redirection in Linux</title>
      <link>localhost/hugo-tldr/linux/howto-redirection-in-linux/</link>
      <pubDate>Thu, 17 Jul 2014 22:34:46 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/linux/howto-redirection-in-linux/</guid>
      <description>In Linux, everything is a file. Redirection comes in very handy because you can move data from a file to another file, from the resulting output of a command to a file. You can also redirect the output of one command and feed it as an input to another command.
Output &amp;gt; The &amp;gt; symbol is used for redirecting output of one command to a new file or another command.</description>
    </item>
    
    <item>
      <title>Stopping, Quitting, Suspending and Killing Processes in Linux</title>
      <link>localhost/hugo-tldr/linux/howto-stop-quit-suspend-kill-processes-linux/</link>
      <pubDate>Sat, 21 Jun 2014 06:12:50 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/linux/howto-stop-quit-suspend-kill-processes-linux/</guid>
      <description>ctrl + c (Interrupt) ctrl + c aka Keyboard Interrupt will interrupt your program which most programs will exit. This is useful when you start a program that just has been running for a really long time and you want to close it because you don&amp;rsquo;t want it to take up all your shell and you don&amp;rsquo;t really need to run it or maybe you used a command with the wrong arguments</description>
    </item>
    
    <item>
      <title>Basic Unix/Linux System Monitoring Commands</title>
      <link>localhost/hugo-tldr/linux/unix-linux-commands-for-system-monitoring/</link>
      <pubDate>Wed, 21 May 2014 16:36:02 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/linux/unix-linux-commands-for-system-monitoring/</guid>
      <description>  Disk: df -h RAM: free -m CPU: ps -ef / top Load Averages: uptime  Memory Usage  top Show top processes free Display amount of free and used memory in the system. cat /proc/meminfo Show memory size and usage. vmstat Monitor virtual memory  </description>
    </item>
    
    <item>
      <title>How to change the default editor in Terminal</title>
      <link>localhost/hugo-tldr/linux/howto-change-default-editor-terminal/</link>
      <pubDate>Wed, 21 May 2014 16:34:20 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/linux/howto-change-default-editor-terminal/</guid>
      <description>In the terminal, run
export EDITOR=nano  to change the default editor to nano (or whatever) and then run
source ~/.bashrc  for the change to take effect</description>
    </item>
    
    <item>
      <title>Crontab Basics</title>
      <link>localhost/hugo-tldr/linux/basics-crontab/</link>
      <pubDate>Wed, 21 May 2014 16:32:55 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/linux/basics-crontab/</guid>
      <description>tl;dr crontab -l # List crontab entries crontab -e # Edit a crontab using the EDITOR specified (export EDITOR=nano) crontab -r # Remove a crontab sudo crontab -e # Edit root user’s crontab crontab my-crontab # add cron jobs by giving a file to crontab   If you are adding a script in any of the cron directories, it has to be executable Use absolute paths for files, directories and executable commands it should link to the absolute path of the executables (commands).</description>
    </item>
    
    <item>
      <title>Nagios</title>
      <link>localhost/hugo-tldr/linux/basics-nagios/</link>
      <pubDate>Wed, 21 May 2014 16:31:32 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/linux/basics-nagios/</guid>
      <description>  Install: apt update &amp;amp;&amp;amp; apt install -y nagios3 Check install: dpkg -l | grep -i nagios Default login: nagiosadmin, g_!_o
 Listing packages of nagios: dpkg -L nagios3  NOTES  aptitude is a front-end for dpkg. dpkg is the package manager.  </description>
    </item>
    
    <item>
      <title>Vim Basics</title>
      <link>localhost/hugo-tldr/linux/2014-05-21-basics-vim/</link>
      <pubDate>Wed, 21 May 2014 16:27:11 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/linux/2014-05-21-basics-vim/</guid>
      <description>Save file and exit in Vim  To go to insert mode: i
 To save: [Esc] and zz
 To quit: [Esc] and :wq
  Common Vi / Vim File Savings Related Commands (ex mode) You need to press [Esc] key followed by the colon : before typing the following commands:
 q Quit
 q! Quit without saving changes i.e. discard changes
 r fileName Read data from file called fileName</description>
    </item>
    
    <item>
      <title>Restart services in Linux</title>
      <link>localhost/hugo-tldr/linux/howto-restart-services-in-linux/</link>
      <pubDate>Wed, 21 May 2014 15:33:52 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/linux/howto-restart-services-in-linux/</guid>
      <description> Restart SSH  sudo service sshd restart  or
sudo service ssh restart   Restart Apache  sudo service apache2 restart  </description>
    </item>
    
    <item>
      <title>Unix: Using pushd and popd for faster navigation</title>
      <link>localhost/hugo-tldr/linux/pushd-and-popd-for-faster-navigation/</link>
      <pubDate>Wed, 21 May 2014 15:33:21 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/linux/pushd-and-popd-for-faster-navigation/</guid>
      <description>Unix: Using pushd and popd for faster navigation
The pushd and popd commands put directory paths onto a directory stack (pushd) and then pop them off again (popd). Using the pushd and popd commands is not unlike dropping directory &#34;bread crumbs&#34; and then returning in reverse order to all the places you visited.</description>
    </item>
    
    <item>
      <title>Unix: Pranks that sysadmins play</title>
      <link>localhost/hugo-tldr/linux/2014-05-21-unix-pranks-that-sysadmins-play/</link>
      <pubDate>Wed, 21 May 2014 15:32:18 +0500</pubDate>
      
      <guid>localhost/hugo-tldr/linux/2014-05-21-unix-pranks-that-sysadmins-play/</guid>
      <description>Unix: Pranks that sysadmins play
Unix systems administrators tend to be very serious about their responsibilities -- except when they&#39;re not. And, when they&#39;re not, the pranks that they play on each other and some of their more annoying users might surprise you.</description>
    </item>
    
    <item>
      <title>Vim Basics</title>
      <link>localhost/hugo-tldr/linux/vim-basics/</link>
      <pubDate>Wed, 21 May 2014 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/vim-basics/</guid>
      <description>Save file and exit in Vim To go to insert mode: a
To save: [Esc] and zz
To quit: [Esc] and :wq
Common Vi / Vim File Savings Related Commands (ex mode) You need to press [Esc] key followed by the colon (:) before typing the following commands:
q Quit
q! Quit without saving changes i.e. discard changes
r fileName Read data from file called fileName
wq Write and quit (save and exit)</description>
    </item>
    
    <item>
      <title>Editing Apache Configuration on a cPanel/CentOS Server</title>
      <link>localhost/hugo-tldr/linux/edit-apache-config-centos-cpanel-command-line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/edit-apache-config-centos-cpanel-command-line/</guid>
      <description>According to cPanel docs, it&amp;rsquo;s easier to use EasyApache for configuring and regenerating Apache. If you want the recommended way, skip this article. I&amp;rsquo;m more of a command line gal, so i&amp;rsquo;ll go ahead and detail the process of editing httpd.conf from the command line, enabling some modules, adding configurations, retaining the configuration and checking if your configuration has been preserved.
On Debian/Ubuntu it&amp;rsquo;s easier to enable a module. You run the command a2enmod followed by the name of the module and it gets enabled.</description>
    </item>
    
    <item>
      <title>Setup SSH Keys for Bitbucket on Mac/Linux</title>
      <link>localhost/hugo-tldr/linux/ssh-bitbucket-mac-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>localhost/hugo-tldr/linux/ssh-bitbucket-mac-linux/</guid>
      <description>Generate an SSH Key Pair cd ~/.ssh &amp;amp;&amp;amp; ssh-keygen -t rsa  Copy the Public key cat ~/.ssh/keyname.pub  Copy the output given as a result of the command above. It is the content of your keyname.pub file.
If you are on a Mac, you can directly copy the contents of keyname.pub by running
cat ~/.ssh/keyname.pub | pbcopy  Start the SSH Agent and Load your keys See if ssh-agent is running</description>
    </item>
    
  </channel>
</rss>